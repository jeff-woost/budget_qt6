<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/budget_vs_actual_methods.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/budget_vs_actual_methods.py" />
              <option name="updatedContent" value="&quot;&quot;&quot;&#10;Budget vs Actual methods for the Presentation Tab&#10;This contains the enhanced implementation for category-wise budget analysis&#10;&quot;&quot;&quot;&#10;&#10;def setup_budget_vs_actual_tab(self, tab):&#10;    &quot;&quot;&quot;Set up the budget vs actual tab with category-specific tables&quot;&quot;&quot;&#10;    layout = QVBoxLayout(tab)&#10;&#10;    # Instructions&#10;    instructions = QLabel(&#10;        &quot;This tab shows detailed budget vs actual analysis for each category. &quot;&#10;        &quot;Each category displays subcategories with estimates vs actual spending by person.&quot;&#10;    )&#10;    instructions.setWordWrap(True)&#10;    instructions.setStyleSheet(&quot;color: #666; margin-bottom: 10px; font-size: 12px;&quot;)&#10;    layout.addWidget(instructions)&#10;&#10;    # Controls section&#10;    controls_layout = QHBoxLayout()&#10;    &#10;    # Refresh button&#10;    refresh_btn = QPushButton(&quot;Refresh Analysis&quot;)&#10;    refresh_btn.clicked.connect(self.refresh_budget_vs_actual_data)&#10;    refresh_btn.setStyleSheet(&quot;&quot;&quot;&#10;        QPushButton {&#10;            background-color: #2c5530;&#10;            color: white;&#10;            padding: 8px 16px;&#10;            font-weight: bold;&#10;            border-radius: 4px;&#10;        }&#10;        QPushButton:hover {&#10;            background-color: #38663d;&#10;        }&#10;    &quot;&quot;&quot;)&#10;    controls_layout.addWidget(refresh_btn)&#10;    controls_layout.addStretch()&#10;    &#10;    layout.addLayout(controls_layout)&#10;&#10;    # Create scroll area for category tables&#10;    scroll_area = QScrollArea()&#10;    scroll_area.setWidgetResizable(True)&#10;    scroll_area.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAsNeeded)&#10;    scroll_area.setVerticalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAsNeeded)&#10;    &#10;    # Widget to contain all category tables&#10;    self.categories_widget = QWidget()&#10;    self.categories_layout = QVBoxLayout(self.categories_widget)&#10;    self.categories_layout.setSpacing(15)&#10;    &#10;    scroll_area.setWidget(self.categories_widget)&#10;    layout.addWidget(scroll_area)&#10;&#10;    # Store references to category tables for updates&#10;    self.category_tables = {}&#10;&#10;def refresh_budget_vs_actual_data(self):&#10;    &quot;&quot;&quot;Refresh data for the budget vs actual tab with category-specific tables&quot;&quot;&quot;&#10;    # Get selected month range&#10;    selected_date = self.month_selector.date()&#10;    month_start = selected_date.toString(&quot;yyyy-MM-01&quot;)&#10;    month_end = selected_date.addMonths(1).addDays(-1).toString(&quot;yyyy-MM-dd&quot;)&#10;&#10;    # Clear existing tables&#10;    for i in reversed(range(self.categories_layout.count())):&#10;        child = self.categories_layout.itemAt(i).widget()&#10;        if child:&#10;            child.setParent(None)&#10;    self.category_tables.clear()&#10;&#10;    # Get all categories and their subcategories&#10;    categories_data = self.category_manager.get_categories()&#10;    &#10;    # Get actual expenses by category, subcategory, and person&#10;    cursor = self.db.execute('''&#10;        SELECT &#10;            category,&#10;            subcategory,&#10;            person,&#10;            COALESCE(SUM(amount), 0) as total&#10;        FROM expenses&#10;        WHERE date &gt;= ? AND date &lt;= ?&#10;        GROUP BY category, subcategory, person&#10;        ORDER BY category, subcategory, person&#10;    ''', (month_start, month_end))&#10;    &#10;    actual_expenses = {}&#10;    for row in cursor.fetchall():&#10;        key = (row['category'], row['subcategory'])&#10;        if key not in actual_expenses:&#10;            actual_expenses[key] = {'Jeff': 0, 'Vanessa': 0}&#10;        actual_expenses[key][row['person']] = row['total']&#10;&#10;    # Get budget targets (if they exist)&#10;    year = selected_date.year()&#10;    month = selected_date.month()&#10;    cursor = self.db.execute('''&#10;        SELECT category, subcategory, monthly_target&#10;        FROM budget_targets&#10;        WHERE year = ? AND month = ?&#10;    ''', (year, month))&#10;    &#10;    budget_targets = {}&#10;    for row in cursor.fetchall():&#10;        key = (row['category'], row['subcategory'])&#10;        budget_targets[key] = row['monthly_target']&#10;&#10;    # Create tables for each category&#10;    for category, subcategories in categories_data.items():&#10;        self.create_category_table(category, subcategories, actual_expenses, budget_targets)&#10;&#10;    # Add stretch at the end&#10;    self.categories_layout.addStretch()&#10;&#10;def create_category_table(self, category, subcategories, actual_expenses, budget_targets):&#10;    &quot;&quot;&quot;Create a table for a specific category&quot;&quot;&quot;&#10;    # Create group box for the category&#10;    category_group = QGroupBox(f&quot;{category} - Budget vs Actual&quot;)&#10;    category_group.setStyleSheet(&quot;&quot;&quot;&#10;        QGroupBox {&#10;            font-weight: bold;&#10;            font-size: 14px;&#10;            color: #2c5530;&#10;            border: 3px solid #2c5530;&#10;            border-radius: 8px;&#10;            margin-top: 10px;&#10;            padding-top: 15px;&#10;            background-color: #fffef8;&#10;        }&#10;        QGroupBox::title {&#10;            subcontrol-origin: margin;&#10;            left: 15px;&#10;            padding: 0 10px;&#10;            background-color: #fffef8;&#10;            color: #2c5530;&#10;            font-weight: bold;&#10;            font-size: 14px;&#10;        }&#10;    &quot;&quot;&quot;)&#10;    &#10;    category_layout = QVBoxLayout(category_group)&#10;    &#10;    # Create table for this category&#10;    table = QTableWidget()&#10;    table.setColumnCount(6)&#10;    table.setHorizontalHeaderLabels([&#10;        &quot;Subcategory&quot;, &quot;Estimate&quot;, &quot;Jeff's Expenses&quot;, &quot;Vanessa's Expenses&quot;, &quot;Total Actual&quot;, &quot;Variance&quot;&#10;    ])&#10;    &#10;    # Set column widths&#10;    header = table.horizontalHeader()&#10;    header.setSectionResizeMode(0, QHeaderView.ResizeMode.Stretch)  # Subcategory&#10;    header.setSectionResizeMode(1, QHeaderView.ResizeMode.Fixed)    # Estimate&#10;    header.setSectionResizeMode(2, QHeaderView.ResizeMode.Fixed)    # Jeff&#10;    header.setSectionResizeMode(3, QHeaderView.ResizeMode.Fixed)    # Vanessa&#10;    header.setSectionResizeMode(4, QHeaderView.ResizeMode.Fixed)    # Total&#10;    header.setSectionResizeMode(5, QHeaderView.ResizeMode.Fixed)    # Variance&#10;    &#10;    table.setColumnWidth(1, 100)  # Estimate&#10;    table.setColumnWidth(2, 120)  # Jeff&#10;    table.setColumnWidth(3, 120)  # Vanessa&#10;    table.setColumnWidth(4, 100)  # Total&#10;    table.setColumnWidth(5, 100)  # Variance&#10;    &#10;    # Style the table&#10;    table.setAlternatingRowColors(True)&#10;    table.setStyleSheet(&quot;&quot;&quot;&#10;        QTableWidget {&#10;            background-color: #fffef8;&#10;            alternate-background-color: #f8f6f0;&#10;            selection-background-color: #e6f3ff;&#10;            gridline-color: #e8e2d4;&#10;            border: 2px solid #d4c5b9;&#10;            border-radius: 4px;&#10;        }&#10;        QHeaderView::section {&#10;            background-color: #2c5530;&#10;            color: white;&#10;            padding: 8px;&#10;            border: 1px solid #1e3d24;&#10;            font-weight: bold;&#10;            font-size: 11px;&#10;        }&#10;        QTableWidget::item {&#10;            padding: 6px;&#10;            border: none;&#10;            color: #2d3748;&#10;        }&#10;    &quot;&quot;&quot;)&#10;    &#10;    # Populate table with subcategories&#10;    table.setRowCount(len(subcategories))&#10;    category_totals = {'estimate': 0, 'jeff': 0, 'vanessa': 0, 'actual': 0, 'variance': 0}&#10;    &#10;    for i, subcategory in enumerate(subcategories):&#10;        # Subcategory name&#10;        table.setItem(i, 0, QTableWidgetItem(subcategory))&#10;        &#10;        # Get budget estimate (default to 0 if no budget set)&#10;        key = (category, subcategory)&#10;        estimate = budget_targets.get(key, 0)&#10;        table.setItem(i, 1, QTableWidgetItem(f&quot;${estimate:,.2f}&quot;))&#10;        &#10;        # Get actual expenses&#10;        jeff_actual = actual_expenses.get(key, {}).get('Jeff', 0)&#10;        vanessa_actual = actual_expenses.get(key, {}).get('Vanessa', 0)&#10;        total_actual = jeff_actual + vanessa_actual&#10;        &#10;        # Jeff's expenses&#10;        jeff_item = QTableWidgetItem(f&quot;${jeff_actual:,.2f}&quot;)&#10;        if jeff_actual &gt; 0:&#10;            jeff_item.setForeground(QColor(200, 50, 50))  # Red for expenses&#10;        table.setItem(i, 2, jeff_item)&#10;        &#10;        # Vanessa's expenses&#10;        vanessa_item = QTableWidgetItem(f&quot;${vanessa_actual:,.2f}&quot;)&#10;        if vanessa_actual &gt; 0:&#10;            vanessa_item.setForeground(QColor(200, 50, 50))  # Red for expenses&#10;        table.setItem(i, 3, vanessa_item)&#10;        &#10;        # Total actual&#10;        total_item = QTableWidgetItem(f&quot;${total_actual:,.2f}&quot;)&#10;        if total_actual &gt; 0:&#10;            total_item.setForeground(QColor(200, 50, 50))  # Red for expenses&#10;            total_item.setFont(QFont(&quot;Arial&quot;, -1, QFont.Weight.Bold))&#10;        table.setItem(i, 4, total_item)&#10;        &#10;        # Variance (Estimate - Actual)&#10;        variance = estimate - total_actual&#10;        variance_item = QTableWidgetItem(f&quot;${variance:,.2f}&quot;)&#10;        if variance &lt; 0:&#10;            variance_item.setForeground(QColor(200, 50, 50))  # Red for over budget&#10;            variance_item.setFont(QFont(&quot;Arial&quot;, -1, QFont.Weight.Bold))&#10;        else:&#10;            variance_item.setForeground(QColor(50, 150, 50))  # Green for under budget&#10;        table.setItem(i, 5, variance_item)&#10;        &#10;        # Add to category totals&#10;        category_totals['estimate'] += estimate&#10;        category_totals['jeff'] += jeff_actual&#10;        category_totals['vanessa'] += vanessa_actual&#10;        category_totals['actual'] += total_actual&#10;        category_totals['variance'] += variance&#10;    &#10;    # Add totals row&#10;    totals_row = table.rowCount()&#10;    table.insertRow(totals_row)&#10;    &#10;    # Style totals row&#10;    total_font = QFont(&quot;Arial&quot;, -1, QFont.Weight.Bold)&#10;    &#10;    total_label = QTableWidgetItem(&quot;TOTAL&quot;)&#10;    total_label.setFont(total_font)&#10;    total_label.setBackground(QColor(230, 230, 230))&#10;    table.setItem(totals_row, 0, total_label)&#10;    &#10;    estimate_total = QTableWidgetItem(f&quot;${category_totals['estimate']:,.2f}&quot;)&#10;    estimate_total.setFont(total_font)&#10;    estimate_total.setBackground(QColor(230, 230, 230))&#10;    table.setItem(totals_row, 1, estimate_total)&#10;    &#10;    jeff_total = QTableWidgetItem(f&quot;${category_totals['jeff']:,.2f}&quot;)&#10;    jeff_total.setFont(total_font)&#10;    jeff_total.setBackground(QColor(230, 230, 230))&#10;    jeff_total.setForeground(QColor(200, 50, 50))&#10;    table.setItem(totals_row, 2, jeff_total)&#10;    &#10;    vanessa_total = QTableWidgetItem(f&quot;${category_totals['vanessa']:,.2f}&quot;)&#10;    vanessa_total.setFont(total_font)&#10;    vanessa_total.setBackground(QColor(230, 230, 230))&#10;    vanessa_total.setForeground(QColor(200, 50, 50))&#10;    table.setItem(totals_row, 3, vanessa_total)&#10;    &#10;    actual_total = QTableWidgetItem(f&quot;${category_totals['actual']:,.2f}&quot;)&#10;    actual_total.setFont(total_font)&#10;    actual_total.setBackground(QColor(230, 230, 230))&#10;    actual_total.setForeground(QColor(200, 50, 50))&#10;    table.setItem(totals_row, 4, actual_total)&#10;    &#10;    variance_total = QTableWidgetItem(f&quot;${category_totals['variance']:,.2f}&quot;)&#10;    variance_total.setFont(total_font)&#10;    variance_total.setBackground(QColor(230, 230, 230))&#10;    if category_totals['variance'] &lt; 0:&#10;        variance_total.setForeground(QColor(200, 50, 50))&#10;    else:&#10;        variance_total.setForeground(QColor(50, 150, 50))&#10;    table.setItem(totals_row, 5, variance_total)&#10;    &#10;    # Set table height based on content&#10;    table.resizeRowsToContents()&#10;    table_height = table.verticalHeader().length() + table.horizontalHeader().height() + 20&#10;    table.setMaximumHeight(min(table_height, 300))  # Cap at 300px&#10;    table.setMinimumHeight(min(table_height, 150))  # Minimum 150px&#10;    &#10;    category_layout.addWidget(table)&#10;    &#10;    # Store table reference&#10;    self.category_tables[category] = table&#10;    &#10;    # Add to main layout&#10;    self.categories_layout.addWidget(category_group)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/database/category_manager.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/database/category_manager.py" />
              <option name="originalContent" value="&quot;&quot;&quot;&#10;Category Manager for Budget Tracker&#10;Handles loading, managing, and updating categories and subcategories&#10;&quot;&quot;&quot;&#10;&#10;import csv&#10;import os&#10;import sqlite3&#10;from typing import Dict, List, Optional, Set&#10;from database.connection import get_db_connection&#10;&#10;class CategoryManager:&#10;    &quot;&quot;&quot;Centralized manager for categories and subcategories&quot;&quot;&quot;&#10;&#10;    def __init__(self):&#10;        self._categories_data = {}&#10;        self._load_categories()&#10;        self._ensure_categories_table()&#10;        self._sync_with_database()&#10;&#10;    def _load_categories(self) -&gt; None:&#10;        &quot;&quot;&quot;Load categories from the categories.csv file&quot;&quot;&quot;&#10;        # Try to find categories.csv in common locations&#10;        possible_paths = [&#10;            '/Users/jeffreywooster/Documents/Development/6_Budget_Master/categories.csv',&#10;            os.path.join(os.path.dirname(__file__), '..', 'categories.csv'),&#10;            os.path.join(os.path.dirname(__file__), '..', '..', 'categories.csv'),&#10;            'categories.csv'&#10;        ]&#10;&#10;        categories_file = None&#10;        for path in possible_paths:&#10;            if os.path.exists(path):&#10;                categories_file = path&#10;                break&#10;&#10;        if categories_file:&#10;            try:&#10;                with open(categories_file, 'r', encoding='utf-8') as file:&#10;                    reader = csv.DictReader(file)&#10;                    for row in reader:&#10;                        category = row.get('Category', '').strip()&#10;                        subcategory = row.get('Sub Category', '').strip()&#10;&#10;                        if category and subcategory:&#10;                            if category not in self._categories_data:&#10;                                self._categories_data[category] = []&#10;                            if subcategory not in self._categories_data[category]:&#10;                                self._categories_data[category].append(subcategory)&#10;&#10;                print(f&quot;Loaded {len(self._categories_data)} categories from {categories_file}&quot;)&#10;&#10;            except Exception as e:&#10;                print(f&quot;Error loading categories from CSV: {e}&quot;)&#10;                self._load_default_categories()&#10;        else:&#10;            print(&quot;Categories.csv not found, using default categories&quot;)&#10;            self._load_default_categories()&#10;&#10;    def _load_default_categories(self) -&gt; None:&#10;        &quot;&quot;&quot;Load default categories as fallback&quot;&quot;&quot;&#10;        self._categories_data = {&#10;            'Housing': ['Mortgage', 'HOA', 'Property Taxes', 'Reserves'],&#10;            'Utilities': ['Electric', 'Gas', 'Internet', 'Phone', 'Insurance'],&#10;            'Food': ['Food (Groceries)', 'Food (Take Out)', 'Food (Dining Out)'],&#10;            'Healthcare': ['Prescriptions', 'Doctor Visits', 'Co-Pay'],&#10;            'Vehicles': ['Gas', 'Insurance', 'Repairs', 'Parking'],&#10;            'Other': ['Entertainment', 'Clothes', 'Other']&#10;        }&#10;&#10;    def _ensure_categories_table(self) -&gt; None:&#10;        &quot;&quot;&quot;Ensure the categories table exists in the database&quot;&quot;&quot;&#10;        try:&#10;            with get_db_connection() as db:&#10;                db.execute('''&#10;                    CREATE TABLE IF NOT EXISTS categories (&#10;                        id INTEGER PRIMARY KEY AUTOINCREMENT,&#10;                        category TEXT NOT NULL,&#10;                        subcategory TEXT NOT NULL,&#10;                        created_date DATE DEFAULT CURRENT_DATE,&#10;                        UNIQUE(category, subcategory)&#10;                    )&#10;                ''')&#10;                db.commit()&#10;        except Exception as e:&#10;            print(f&quot;Error creating categories table: {e}&quot;)&#10;&#10;    def _sync_with_database(self) -&gt; None:&#10;        &quot;&quot;&quot;Sync categories with database and load any custom categories&quot;&quot;&quot;&#10;        try:&#10;            with get_db_connection() as db:&#10;                # First, insert all CSV categories into database if they don't exist&#10;                for category, subcategories in self._categories_data.items():&#10;                    for subcategory in subcategories:&#10;                        try:&#10;                            db.execute('''&#10;                                INSERT OR IGNORE INTO categories (category, subcategory)&#10;                                VALUES (?, ?)&#10;                            ''', (category, subcategory))&#10;                        except Exception as e:&#10;                            print(f&quot;Error inserting category {category}/{subcategory}: {e}&quot;)&#10;&#10;                # Then load any additional categories from database&#10;                db_categories = db.execute('''&#10;                    SELECT category, subcategory FROM categories&#10;                    ORDER BY category, subcategory&#10;                ''').fetchall()&#10;&#10;                for row in db_categories:&#10;                    category = row['category']&#10;                    subcategory = row['subcategory']&#10;&#10;                    if category not in self._categories_data:&#10;                        self._categories_data[category] = []&#10;                    if subcategory not in self._categories_data[category]:&#10;                        self._categories_data[category].append(subcategory)&#10;&#10;                db.commit()&#10;&#10;        except Exception as e:&#10;            print(f&quot;Error syncing with database: {e}&quot;)&#10;&#10;    def get_categories(self) -&gt; Dict[str, List[str]]:&#10;        &quot;&quot;&quot;Get all categories and subcategories&quot;&quot;&quot;&#10;        return self._categories_data.copy()&#10;&#10;    def get_category_names(self) -&gt; List[str]:&#10;        &quot;&quot;&quot;Get list of all category names&quot;&quot;&quot;&#10;        return sorted(self._categories_data.keys())&#10;&#10;    def get_subcategories(self, category: str) -&gt; List[str]:&#10;        &quot;&quot;&quot;Get subcategories for a specific category&quot;&quot;&quot;&#10;        return self._categories_data.get(category, []).copy()&#10;&#10;    def add_category(self, category: str) -&gt; bool:&#10;        &quot;&quot;&quot;Add a new category&quot;&quot;&quot;&#10;        if not category or category in self._categories_data:&#10;            return False&#10;&#10;        try:&#10;            with get_db_connection() as db:&#10;                # Add category with a default subcategory&#10;                default_subcategory = f&quot;{category} (General)&quot;&#10;                db.execute('''&#10;                    INSERT INTO categories (category, subcategory)&#10;                    VALUES (?, ?)&#10;                ''', (category, default_subcategory))&#10;                db.commit()&#10;&#10;                self._categories_data[category] = [default_subcategory]&#10;                return True&#10;&#10;        except Exception as e:&#10;            print(f&quot;Error adding category {category}: {e}&quot;)&#10;            return False&#10;&#10;    def add_subcategory(self, category: str, subcategory: str) -&gt; bool:&#10;        &quot;&quot;&quot;Add a new subcategory to an existing category&quot;&quot;&quot;&#10;        if not category or not subcategory:&#10;            return False&#10;&#10;        # Create category if it doesn't exist&#10;        if category not in self._categories_data:&#10;            self._categories_data[category] = []&#10;&#10;        # Check if subcategory already exists&#10;        if subcategory in self._categories_data[category]:&#10;            return False&#10;&#10;        try:&#10;            with get_db_connection() as db:&#10;                db.execute('''&#10;                    INSERT INTO categories (category, subcategory)&#10;                    VALUES (?, ?)&#10;                ''', (category, subcategory))&#10;                db.commit()&#10;&#10;                self._categories_data[category].append(subcategory)&#10;                return True&#10;&#10;        except Exception as e:&#10;            print(f&quot;Error adding subcategory {category}/{subcategory}: {e}&quot;)&#10;            return False&#10;&#10;    def remove_subcategory(self, category: str, subcategory: str) -&gt; bool:&#10;        &quot;&quot;&quot;Remove a subcategory (only if not used in expenses)&quot;&quot;&quot;&#10;        if category not in self._categories_data or subcategory not in self._categories_data[category]:&#10;            return False&#10;&#10;        try:&#10;            with get_db_connection() as db:&#10;                # Check if subcategory is used in expenses&#10;                usage_count = db.execute('''&#10;                    SELECT COUNT(*) as count FROM expenses&#10;                    WHERE category = ? AND subcategory = ?&#10;                ''', (category, subcategory)).fetchone()&#10;&#10;                if usage_count and usage_count['count'] &gt; 0:&#10;                    print(f&quot;Cannot remove subcategory {category}/{subcategory} - it's used in {usage_count['count']} expenses&quot;)&#10;                    return False&#10;&#10;                # Remove from database&#10;                db.execute('''&#10;                    DELETE FROM categories&#10;                    WHERE category = ? AND subcategory = ?&#10;                ''', (category, subcategory))&#10;                db.commit()&#10;&#10;                # Remove from memory&#10;                self._categories_data[category].remove(subcategory)&#10;&#10;                # Remove category if it has no subcategories&#10;                if not self._categories_data[category]:&#10;                    del self._categories_data[category]&#10;&#10;                return True&#10;&#10;        except Exception as e:&#10;            print(f&quot;Error removing subcategory {category}/{subcategory}: {e}&quot;)&#10;            return False&#10;&#10;    def category_exists(self, category: str) -&gt; bool:&#10;        &quot;&quot;&quot;Check if a category exists&quot;&quot;&quot;&#10;        return category in self._categories_data&#10;&#10;    def subcategory_exists(self, category: str, subcategory: str) -&gt; bool:&#10;        &quot;&quot;&quot;Check if a subcategory exists in a category&quot;&quot;&quot;&#10;        return category in self._categories_data and subcategory in self._categories_data[category]&#10;&#10;    def get_all_subcategories(self) -&gt; Set[str]:&#10;        &quot;&quot;&quot;Get all subcategories across all categories&quot;&quot;&quot;&#10;        all_subcategories = set()&#10;        for subcategories in self._categories_data.values():&#10;            all_subcategories.update(subcategories)&#10;        return all_subcategories&#10;&#10;    def search_categories(self, search_term: str) -&gt; Dict[str, List[str]]:&#10;        &quot;&quot;&quot;Search for categories and subcategories containing the search term&quot;&quot;&quot;&#10;        results = {}&#10;        search_lower = search_term.lower()&#10;&#10;        for category, subcategories in self._categories_data.items():&#10;            category_matches = search_lower in category.lower()&#10;            matching_subcategories = [&#10;                sub for sub in subcategories&#10;                if search_lower in sub.lower()&#10;            ]&#10;&#10;            if category_matches or matching_subcategories:&#10;                if category_matches:&#10;                    results[category] = subcategories.copy()&#10;                else:&#10;                    results[category] = matching_subcategories&#10;&#10;        return results&#10;&#10;    def refresh(self) -&gt; None:&#10;        &quot;&quot;&quot;Refresh categories from CSV and database&quot;&quot;&quot;&#10;        self._categories_data.clear()&#10;        self._load_categories()&#10;        self._sync_with_database()&#10;&#10;# Global instance&#10;_category_manager = None&#10;&#10;def get_category_manager() -&gt; CategoryManager:&#10;    &quot;&quot;&quot;Get the global category manager instance&quot;&quot;&quot;&#10;    global _category_manager&#10;    if _category_manager is None:&#10;        _category_manager = CategoryManager()&#10;    return _category_manager&#10;&#10;" />
              <option name="updatedContent" value="&quot;&quot;&quot;&#10;Category Manager for Budget Tracker&#10;Handles loading, managing, and updating categories and subcategories&#10;&quot;&quot;&quot;&#10;&#10;import csv&#10;import os&#10;import sqlite3&#10;from typing import Dict, List, Optional, Set&#10;from database.db_manager import DatabaseManager&#10;&#10;class CategoryManager:&#10;    &quot;&quot;&quot;Centralized manager for categories and subcategories&quot;&quot;&quot;&#10;&#10;    def __init__(self):&#10;        self._categories_data = {}&#10;        self._load_categories()&#10;        self._ensure_categories_table()&#10;        self._sync_with_database()&#10;&#10;    def _load_categories(self) -&gt; None:&#10;        &quot;&quot;&quot;Load categories from the categories.csv file with proper encoding handling&quot;&quot;&quot;&#10;        # Try to find categories.csv in the current directory first&#10;        possible_paths = [&#10;            os.path.join(os.path.dirname(__file__), '..', 'categories.csv'),&#10;            'categories.csv',&#10;            '/Users/jeffreywooster/Documents/Development/6_Budget_Master/categories.csv',&#10;            os.path.join(os.path.dirname(__file__), '..', '..', 'categories.csv')&#10;        ]&#10;&#10;        categories_file = None&#10;        for path in possible_paths:&#10;            if os.path.exists(path):&#10;                categories_file = path&#10;                break&#10;&#10;        if categories_file:&#10;            try:&#10;                # Try different encodings to handle potential encoding issues&#10;                encodings = ['utf-8', 'utf-8-sig', 'latin1', 'cp1252']&#10;&#10;                for encoding in encodings:&#10;                    try:&#10;                        with open(categories_file, 'r', encoding=encoding) as file:&#10;                            reader = csv.DictReader(file)&#10;&#10;                            # Clear existing data&#10;                            self._categories_data = {}&#10;&#10;                            for row in reader:&#10;                                category = row.get('Category', '').strip()&#10;                                subcategory = row.get('Sub Category', '').strip()&#10;&#10;                                if category and subcategory:&#10;                                    if category not in self._categories_data:&#10;                                        self._categories_data[category] = []&#10;                                    if subcategory not in self._categories_data[category]:&#10;                                        self._categories_data[category].append(subcategory)&#10;&#10;                        print(f&quot;Loaded {len(self._categories_data)} categories from {categories_file} using {encoding} encoding&quot;)&#10;                        return  # Success, exit the function&#10;&#10;                    except UnicodeDecodeError:&#10;                        continue  # Try next encoding&#10;&#10;                # If we get here, all encodings failed&#10;                raise Exception(&quot;Could not decode file with any supported encoding&quot;)&#10;&#10;            except Exception as e:&#10;                print(f&quot;Error loading categories from CSV: {e}&quot;)&#10;                self._load_default_categories()&#10;        else:&#10;            print(&quot;Categories.csv not found, using default categories&quot;)&#10;            self._load_default_categories()&#10;&#10;    def _load_default_categories(self) -&gt; None:&#10;        &quot;&quot;&quot;Load default categories as fallback&quot;&quot;&quot;&#10;        self._categories_data = {&#10;            'Housing': ['Mortgage', 'HOA', 'Property Taxes', 'Reserves'],&#10;            'Utilities': ['Electric', 'Gas', 'Internet', 'Phone', 'Insurance'],&#10;            'Food': ['Food (Groceries)', 'Food (Take Out)', 'Food (Dining Out)'],&#10;            'Healthcare': ['Prescriptions', 'Doctor Visits', 'Co-Pay'],&#10;            'Vehicles': ['Gas', 'Insurance', 'Repairs', 'Parking'],&#10;            'Other': ['Entertainment', 'Clothes', 'Other'],&#10;            'Income': [&quot;Jeff's Income&quot;, &quot;Vanessa's Income&quot;, &quot;Bonus&quot;, &quot;Other Income&quot;]&#10;        }&#10;&#10;    def _ensure_categories_table(self) -&gt; None:&#10;        &quot;&quot;&quot;Ensure the categories table exists in the database&quot;&quot;&quot;&#10;        try:&#10;            with DatabaseManager() as db:&#10;                db.execute('''&#10;                    CREATE TABLE IF NOT EXISTS categories (&#10;                        id INTEGER PRIMARY KEY AUTOINCREMENT,&#10;                        category TEXT NOT NULL,&#10;                        subcategory TEXT NOT NULL,&#10;                        created_date DATE DEFAULT CURRENT_DATE,&#10;                        UNIQUE(category, subcategory)&#10;                    )&#10;                ''')&#10;        except Exception as e:&#10;            print(f&quot;Error creating categories table: {e}&quot;)&#10;&#10;    def _sync_with_database(self) -&gt; None:&#10;        &quot;&quot;&quot;Sync categories with database and load any custom categories&quot;&quot;&quot;&#10;        try:&#10;            with DatabaseManager() as db:&#10;                # First, insert all CSV categories into database if they don't exist&#10;                for category, subcategories in self._categories_data.items():&#10;                    for subcategory in subcategories:&#10;                        try:&#10;                            db.execute('''&#10;                                INSERT OR IGNORE INTO categories (category, subcategory)&#10;                                VALUES (?, ?)&#10;                            ''', (category, subcategory))&#10;                        except Exception as e:&#10;                            print(f&quot;Error inserting category {category}/{subcategory}: {e}&quot;)&#10;&#10;                # Then load any additional categories from database&#10;                db_categories = db.execute('''&#10;                    SELECT category, subcategory FROM categories&#10;                    ORDER BY category, subcategory&#10;                ''').fetchall()&#10;&#10;                for row in db_categories:&#10;                    category = row['category']&#10;                    subcategory = row['subcategory']&#10;&#10;                    if category not in self._categories_data:&#10;                        self._categories_data[category] = []&#10;                    if subcategory not in self._categories_data[category]:&#10;                        self._categories_data[category].append(subcategory)&#10;&#10;        except Exception as e:&#10;            print(f&quot;Error syncing with database: {e}&quot;)&#10;&#10;    def get_categories(self) -&gt; Dict[str, List[str]]:&#10;        &quot;&quot;&quot;Get all categories and subcategories&quot;&quot;&quot;&#10;        return self._categories_data.copy()&#10;&#10;    def get_category_names(self) -&gt; List[str]:&#10;        &quot;&quot;&quot;Get list of all category names&quot;&quot;&quot;&#10;        return sorted(self._categories_data.keys())&#10;&#10;    def get_subcategories(self, category: str) -&gt; List[str]:&#10;        &quot;&quot;&quot;Get subcategories for a specific category&quot;&quot;&quot;&#10;        return self._categories_data.get(category, []).copy()&#10;&#10;    def add_category(self, category: str) -&gt; bool:&#10;        &quot;&quot;&quot;Add a new category&quot;&quot;&quot;&#10;        if not category or category in self._categories_data:&#10;            return False&#10;&#10;        try:&#10;            with DatabaseManager() as db:&#10;                # Add category with a default subcategory&#10;                default_subcategory = f&quot;{category} (General)&quot;&#10;                db.execute('''&#10;                    INSERT INTO categories (category, subcategory)&#10;                    VALUES (?, ?)&#10;                ''', (category, default_subcategory))&#10;&#10;                self._categories_data[category] = [default_subcategory]&#10;                return True&#10;&#10;        except Exception as e:&#10;            print(f&quot;Error adding category {category}: {e}&quot;)&#10;            return False&#10;&#10;    def add_subcategory(self, category: str, subcategory: str) -&gt; bool:&#10;        &quot;&quot;&quot;Add a new subcategory to an existing category&quot;&quot;&quot;&#10;        if not category or not subcategory:&#10;            return False&#10;&#10;        # Create category if it doesn't exist&#10;        if category not in self._categories_data:&#10;            self._categories_data[category] = []&#10;&#10;        # Check if subcategory already exists&#10;        if subcategory in self._categories_data[category]:&#10;            return False&#10;&#10;        try:&#10;            with DatabaseManager() as db:&#10;                db.execute('''&#10;                    INSERT INTO categories (category, subcategory)&#10;                    VALUES (?, ?)&#10;                ''', (category, subcategory))&#10;&#10;                self._categories_data[category].append(subcategory)&#10;                return True&#10;&#10;        except Exception as e:&#10;            print(f&quot;Error adding subcategory {category}/{subcategory}: {e}&quot;)&#10;            return False&#10;&#10;    def remove_subcategory(self, category: str, subcategory: str) -&gt; bool:&#10;        &quot;&quot;&quot;Remove a subcategory (only if not used in expenses)&quot;&quot;&quot;&#10;        if category not in self._categories_data or subcategory not in self._categories_data[category]:&#10;            return False&#10;&#10;        try:&#10;            with DatabaseManager() as db:&#10;                # Check if subcategory is used in expenses&#10;                usage_count = db.execute('''&#10;                    SELECT COUNT(*) as count FROM expenses&#10;                    WHERE category = ? AND subcategory = ?&#10;                ''', (category, subcategory)).fetchone()&#10;&#10;                if usage_count and usage_count['count'] &gt; 0:&#10;                    print(f&quot;Cannot remove subcategory {category}/{subcategory}: still in use&quot;)&#10;                    return False&#10;&#10;                # Remove from database&#10;                db.execute('''&#10;                    DELETE FROM categories &#10;                    WHERE category = ? AND subcategory = ?&#10;                ''', (category, subcategory))&#10;&#10;                # Remove from local data&#10;                self._categories_data[category].remove(subcategory)&#10;&#10;                # Remove category if it has no subcategories&#10;                if not self._categories_data[category]:&#10;                    del self._categories_data[category]&#10;&#10;                return True&#10;&#10;        except Exception as e:&#10;            print(f&quot;Error removing subcategory {category}/{subcategory}: {e}&quot;)&#10;            return False&#10;&#10;    def refresh_from_database(self) -&gt; None:&#10;        &quot;&quot;&quot;Refresh categories from database&quot;&quot;&quot;&#10;        self._categories_data = {}&#10;        self._sync_with_database()&#10;&#10;    def refresh(self) -&gt; None:&#10;        &quot;&quot;&quot;Refresh categories from database (alias for refresh_from_database)&quot;&quot;&quot;&#10;        self.refresh_from_database()&#10;&#10;    def is_valid_category(self, category: str, subcategory: str) -&gt; bool:&#10;        &quot;&quot;&quot;Check if a category/subcategory combination is valid&quot;&quot;&quot;&#10;        return (category in self._categories_data and&#10;                subcategory in self._categories_data[category])&#10;&#10;    def category_exists(self, category: str) -&gt; bool:&#10;        &quot;&quot;&quot;Check if a category exists&quot;&quot;&quot;&#10;        return category in self._categories_data&#10;&#10;    def subcategory_exists(self, category: str, subcategory: str) -&gt; bool:&#10;        &quot;&quot;&quot;Check if a subcategory exists within a category&quot;&quot;&quot;&#10;        return (category in self._categories_data and &#10;                subcategory in self._categories_data[category])&#10;&#10;# Global instance&#10;_category_manager = CategoryManager()&#10;&#10;def get_category_manager() -&gt; CategoryManager:&#10;    &quot;&quot;&quot;Get the global category manager instance&quot;&quot;&quot;&#10;    return _category_manager" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/database/models.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/database/models.py" />
              <option name="originalContent" value="&quot;&quot;&quot;&#10;Database models and operations&#10;&quot;&quot;&quot;&#10;&#10;from datetime import datetime, date&#10;&#10;class IncomeModel:&#10;    &quot;&quot;&quot;Model for income operations&quot;&quot;&quot;&#10;    &#10;    @staticmethod&#10;    def add(db, date_str, person, amount, source, notes):&#10;        &quot;&quot;&quot;Add income entry&quot;&quot;&quot;&#10;        db.execute('''&#10;            INSERT INTO income (date, person, amount, source, notes)&#10;            VALUES (?, ?, ?, ?, ?)&#10;        ''', (date_str, person, amount, source, notes))&#10;        db.commit()&#10;        &#10;    @staticmethod&#10;    def get_all(db, limit=50):&#10;        &quot;&quot;&quot;Get all income entries&quot;&quot;&quot;&#10;        return db.execute('''&#10;            SELECT * FROM income&#10;            ORDER BY date DESC&#10;            LIMIT ?&#10;        ''', (limit,)).fetchall()&#10;        &#10;    @staticmethod&#10;    def get_by_month(db, month_start, month_end):&#10;        &quot;&quot;&quot;Get income for a specific month&quot;&quot;&quot;&#10;        return db.execute('''&#10;            SELECT * FROM income&#10;            WHERE date &gt;= ? AND date &lt;= ?&#10;            ORDER BY date DESC&#10;        ''', (month_start, month_end)).fetchall()&#10;        &#10;    @staticmethod&#10;    def get_total_by_month(db, month_start, month_end):&#10;        &quot;&quot;&quot;Get total income for a month&quot;&quot;&quot;&#10;        result = db.execute('''&#10;            SELECT COALESCE(SUM(amount), 0) as total&#10;            FROM income&#10;            WHERE date &gt;= ? AND date &lt;= ?&#10;        ''', (month_start, month_end)).fetchone()&#10;        return result['total'] if result else 0&#10;        &#10;    @staticmethod&#10;    def delete(db, income_id):&#10;        &quot;&quot;&quot;Delete income entry&quot;&quot;&quot;&#10;        db.execute('DELETE FROM income WHERE id = ?', (income_id,))&#10;        db.commit()&#10;&#10;class ExpenseModel:&#10;    &quot;&quot;&quot;Model for expense operations&quot;&quot;&quot;&#10;    &#10;    @staticmethod&#10;    def add(db, date_str, person, amount, category, subcategory, description, payment_method):&#10;        &quot;&quot;&quot;Add expense entry&quot;&quot;&quot;&#10;        db.execute('''&#10;            INSERT INTO expenses (date, person, amount, category, subcategory, description, payment_method)&#10;            VALUES (?, ?, ?, ?, ?, ?, ?)&#10;        ''', (date_str, person, amount, category, subcategory, description, payment_method))&#10;        db.commit()&#10;        &#10;    @staticmethod&#10;    def get_all(db, limit=50):&#10;        &quot;&quot;&quot;Get all expense entries&quot;&quot;&quot;&#10;        return db.execute('''&#10;            SELECT * FROM expenses&#10;            ORDER BY date DESC&#10;            LIMIT ?&#10;        ''', (limit,)).fetchall()&#10;        &#10;    @staticmethod&#10;    def get_by_month(db, month_start, month_end):&#10;        &quot;&quot;&quot;Get expenses for a specific month&quot;&quot;&quot;&#10;        return db.execute('''&#10;            SELECT * FROM expenses&#10;            WHERE date &gt;= ? AND date &lt;= ?&#10;            ORDER BY date DESC&#10;        ''', (month_start, month_end)).fetchall()&#10;        &#10;    @staticmethod&#10;    def get_total_by_month(db, month_start, month_end):&#10;        &quot;&quot;&quot;Get total expenses for a month&quot;&quot;&quot;&#10;        result = db.execute('''&#10;            SELECT COALESCE(SUM(amount), 0) as total&#10;            FROM expenses&#10;            WHERE date &gt;= ? AND date &lt;= ?&#10;        ''', (month_start, month_end)).fetchone()&#10;        return result['total'] if result else 0&#10;        &#10;    @staticmethod&#10;    def get_by_category(db, month_start, month_end):&#10;        &quot;&quot;&quot;Get expenses grouped by category&quot;&quot;&quot;&#10;        return db.execute('''&#10;            SELECT category, subcategory, SUM(amount) as total&#10;            FROM expenses&#10;            WHERE date &gt;= ? AND date &lt;= ?&#10;            GROUP BY category, subcategory&#10;            ORDER BY category, subcategory&#10;        ''', (month_start, month_end)).fetchall()&#10;&#10;" />
              <option name="updatedContent" value="&quot;&quot;&quot;&#10;Database models and operations&#10;&quot;&quot;&quot;&#10;&#10;from datetime import datetime, date&#10;&#10;class IncomeModel:&#10;    &quot;&quot;&quot;Model for income operations&quot;&quot;&quot;&#10;    &#10;    @staticmethod&#10;    def add(db, date_str, person, amount, source, notes):&#10;        &quot;&quot;&quot;Add income entry&quot;&quot;&quot;&#10;        db.execute('''&#10;            INSERT INTO income (date, person, amount, source, notes)&#10;            VALUES (?, ?, ?, ?, ?)&#10;        ''', (date_str, person, amount, source, notes))&#10;        db.commit()&#10;        &#10;    @staticmethod&#10;    def get_all(db, limit=50):&#10;        &quot;&quot;&quot;Get all income entries&quot;&quot;&quot;&#10;        return db.execute('''&#10;            SELECT * FROM income&#10;            ORDER BY date DESC&#10;            LIMIT ?&#10;        ''', (limit,)).fetchall()&#10;        &#10;    @staticmethod&#10;    def get_by_month(db, month_start, month_end):&#10;        &quot;&quot;&quot;Get income for a specific month&quot;&quot;&quot;&#10;        return db.execute('''&#10;            SELECT * FROM income&#10;            WHERE date &gt;= ? AND date &lt;= ?&#10;            ORDER BY date DESC&#10;        ''', (month_start, month_end)).fetchall()&#10;        &#10;    @staticmethod&#10;    def get_total_by_month(db, month_start, month_end):&#10;        &quot;&quot;&quot;Get total income for a month&quot;&quot;&quot;&#10;        result = db.execute('''&#10;            SELECT COALESCE(SUM(amount), 0) as total&#10;            FROM income&#10;            WHERE date &gt;= ? AND date &lt;= ?&#10;        ''', (month_start, month_end)).fetchone()&#10;        return result['total'] if result else 0&#10;        &#10;    @staticmethod&#10;    def delete(db, income_id):&#10;        &quot;&quot;&quot;Delete income entry&quot;&quot;&quot;&#10;        db.execute('DELETE FROM income WHERE id = ?', (income_id,))&#10;        db.commit()&#10;&#10;class ExpenseModel:&#10;    &quot;&quot;&quot;Model for expense operations&quot;&quot;&quot;&#10;    &#10;    @staticmethod&#10;    def add(db, date_str, person, amount, category, subcategory, description, payment_method, realized=False):&#10;        &quot;&quot;&quot;Add expense entry&quot;&quot;&quot;&#10;        db.execute('''&#10;            INSERT INTO expenses (date, person, amount, category, subcategory, description, payment_method, realized)&#10;            VALUES (?, ?, ?, ?, ?, ?, ?, ?)&#10;        ''', (date_str, person, amount, category, subcategory, description, payment_method, realized))&#10;        db.commit()&#10;        &#10;    @staticmethod&#10;    def get_all(db, limit=50):&#10;        &quot;&quot;&quot;Get all expense entries&quot;&quot;&quot;&#10;        return db.execute('''&#10;            SELECT * FROM expenses&#10;            ORDER BY date DESC&#10;            LIMIT ?&#10;        ''', (limit,)).fetchall()&#10;        &#10;    @staticmethod&#10;    def get_by_month(db, month_start, month_end):&#10;        &quot;&quot;&quot;Get expenses for a specific month&quot;&quot;&quot;&#10;        return db.execute('''&#10;            SELECT * FROM expenses&#10;            WHERE date &gt;= ? AND date &lt;= ?&#10;            ORDER BY date DESC&#10;        ''', (month_start, month_end)).fetchall()&#10;        &#10;    @staticmethod&#10;    def get_total_by_month(db, month_start, month_end):&#10;        &quot;&quot;&quot;Get total expenses for a month&quot;&quot;&quot;&#10;        result = db.execute('''&#10;            SELECT COALESCE(SUM(amount), 0) as total&#10;            FROM expenses&#10;            WHERE date &gt;= ? AND date &lt;= ?&#10;        ''', (month_start, month_end)).fetchone()&#10;        return result['total'] if result else 0&#10;        &#10;    @staticmethod&#10;    def get_by_category(db, month_start, month_end):&#10;        &quot;&quot;&quot;Get expenses grouped by category&quot;&quot;&quot;&#10;        return db.execute('''&#10;            SELECT category, subcategory, SUM(amount) as total&#10;            FROM expenses&#10;            WHERE date &gt;= ? AND date &lt;= ?&#10;            GROUP BY category, subcategory&#10;            ORDER BY category, subcategory&#10;        ''', (month_start, month_end)).fetchall()&#10;    &#10;    @staticmethod&#10;    def get_unrealized_by_person(db, month_start, month_end):&#10;        &quot;&quot;&quot;Get unrealized expenses by person for a specific month&quot;&quot;&quot;&#10;        return db.execute('''&#10;            SELECT person, COALESCE(SUM(amount), 0) as total&#10;            FROM expenses&#10;            WHERE date &gt;= ? AND date &lt;= ? AND realized = 0&#10;            GROUP BY person&#10;        ''', (month_start, month_end)).fetchall()&#10;    &#10;    @staticmethod&#10;    def get_unrealized_expenses(db, month_start, month_end):&#10;        &quot;&quot;&quot;Get all unrealized expenses for a specific month&quot;&quot;&quot;&#10;        return db.execute('''&#10;            SELECT * FROM expenses&#10;            WHERE date &gt;= ? AND date &lt;= ? AND realized = 0&#10;            ORDER BY person, date DESC&#10;        ''', (month_start, month_end)).fetchall()&#10;    &#10;    @staticmethod&#10;    def mark_as_realized(db, expense_id):&#10;        &quot;&quot;&quot;Mark an expense as realized&quot;&quot;&quot;&#10;        db.execute('UPDATE expenses SET realized = 1 WHERE id = ?', (expense_id,))&#10;        db.commit()&#10;    &#10;    @staticmethod&#10;    def mark_as_unrealized(db, expense_id):&#10;        &quot;&quot;&quot;Mark an expense as unrealized&quot;&quot;&quot;&#10;        db.execute('UPDATE expenses SET realized = 0 WHERE id = ?', (expense_id,))&#10;        db.commit()&#10;        &#10;    @staticmethod&#10;    def delete(db, expense_id):&#10;        &quot;&quot;&quot;Delete expense entry&quot;&quot;&quot;&#10;        db.execute('DELETE FROM expenses WHERE id = ?', (expense_id,))&#10;        db.commit()&#10;&#10;class NetWorthModel:&#10;    &quot;&quot;&quot;Model for net worth operations&quot;&quot;&quot;&#10;    &#10;    @staticmethod&#10;    def add_or_update(db, asset_type, asset_name, value, person):&#10;        &quot;&quot;&quot;Add or update asset&quot;&quot;&quot;&#10;        # Check if asset exists&#10;        existing = db.execute('''&#10;            SELECT id FROM net_worth&#10;            WHERE asset_name = ? AND date = date('now')&#10;        ''', (asset_name,)).fetchone()&#10;        &#10;        if existing:&#10;            db.execute('''&#10;                UPDATE net_worth&#10;                SET value = ?, asset_type = ?, person = ?&#10;                WHERE id = ?&#10;            ''', (value, asset_type, person, existing['id']))&#10;        else:&#10;            db.execute('''&#10;                INSERT INTO net_worth (date, asset_type, asset_name, value, person)&#10;                VALUES (date('now'), ?, ?, ?, ?)&#10;            ''', (asset_type, asset_name, value, person))&#10;        db.commit()&#10;        &#10;    @staticmethod&#10;    def get_current(db):&#10;        &quot;&quot;&quot;Get current assets&quot;&quot;&quot;&#10;        return db.execute('''&#10;            SELECT * FROM net_worth&#10;            WHERE date = (SELECT MAX(date) FROM net_worth)&#10;            ORDER BY value DESC&#10;        ''').fetchall()&#10;        &#10;    @staticmethod&#10;    def get_total(db):&#10;        &quot;&quot;&quot;Get total net worth&quot;&quot;&quot;&#10;        result = db.execute('''&#10;            SELECT COALESCE(SUM(value), 0) as total&#10;            FROM net_worth&#10;            WHERE date = (SELECT MAX(date) FROM net_worth)&#10;        ''').fetchone()&#10;        return result['total'] if result else 0&#10;        &#10;    @staticmethod&#10;    def delete(db, asset_name):&#10;        &quot;&quot;&quot;Delete asset&quot;&quot;&quot;&#10;        db.execute('DELETE FROM net_worth WHERE asset_name = ?', (asset_name,))&#10;        db.commit()&#10;&#10;class SavingsGoalModel:&#10;    &quot;&quot;&quot;Model for savings goal operations&quot;&quot;&quot;&#10;    &#10;    @staticmethod&#10;    def add(db, goal_name, target_amount, target_date, priority):&#10;        &quot;&quot;&quot;Add savings goal&quot;&quot;&quot;&#10;        db.execute('''&#10;            INSERT INTO savings_goals (goal_name, target_amount, target_date, priority)&#10;            VALUES (?, ?, ?, ?)&#10;        ''', (goal_name, target_amount, target_date, priority))&#10;        db.commit()&#10;        &#10;    @staticmethod&#10;    def get_all(db):&#10;        &quot;&quot;&quot;Get all savings goals&quot;&quot;&quot;&#10;        return db.execute('''&#10;            SELECT * FROM savings_goals&#10;            ORDER BY priority&#10;        ''').fetchall()&#10;        &#10;    @staticmethod&#10;    def update_amount(db, goal_id, amount):&#10;        &quot;&quot;&quot;Update goal current amount&quot;&quot;&quot;&#10;        db.execute('''&#10;            UPDATE savings_goals&#10;            SET current_amount = current_amount + ?&#10;            WHERE id = ?&#10;        ''', (amount, goal_id))&#10;        db.commit()&#10;        &#10;    @staticmethod&#10;    def delete(db, goal_id):&#10;        &quot;&quot;&quot;Delete savings goal&quot;&quot;&quot;&#10;        db.execute('DELETE FROM savings_goals WHERE id = ?', (goal_id,))&#10;        db.commit()" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gui/main_window.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gui/main_window.py" />
              <option name="originalContent" value="&quot;&quot;&quot;&#10;Main window for the budget application&#10;&quot;&quot;&quot;&#10;&#10;from PyQt6.QtWidgets import (&#10;    QMainWindow, QTabWidget, QWidget, QVBoxLayout,&#10;    QMenuBar, QMenu, QStatusBar, QMessageBox&#10;)&#10;from PyQt6.QtCore import Qt&#10;from PyQt6.QtGui import QAction, QIcon&#10;&#10;from gui.tabs.overview_tab import OverviewTab&#10;from gui.tabs.net_worth_tab import NetWorthTab&#10;from gui.tabs.budget_tab import BudgetTab&#10;from gui.tabs.presentation_tab import PresentationTab&#10;from gui.tabs.savings_tab import SavingsTab&#10;from gui.tabs.trends_tab import TrendsTab&#10;&#10;class MainWindow(QMainWindow):&#10;    def __init__(self):&#10;        super().__init__()&#10;        self.setWindowTitle(&quot;Budget Tracker - Jeff &amp; Vanessa&quot;)&#10;        self.setGeometry(100, 100, 1400, 800)&#10;        &#10;        # Set up central widget and layout&#10;        central_widget = QWidget()&#10;        self.setCentralWidget(central_widget)&#10;        layout = QVBoxLayout(central_widget)&#10;        &#10;        # Create tab widget&#10;        self.tabs = QTabWidget()&#10;        layout.addWidget(self.tabs)&#10;        &#10;        # Create and add tabs&#10;        self.overview_tab = OverviewTab()&#10;        self.net_worth_tab = NetWorthTab()&#10;        self.budget_tab = BudgetTab()&#10;        self.presentation_tab = PresentationTab()&#10;        self.savings_tab = SavingsTab()&#10;        self.trends_tab = TrendsTab()&#10;        &#10;        self.tabs.addTab(self.overview_tab, &quot; Budget Overview&quot;)&#10;        self.tabs.addTab(self.net_worth_tab, &quot; Net Worth&quot;)&#10;        self.tabs.addTab(self.budget_tab, &quot; Budget&quot;)&#10;        self.tabs.addTab(self.presentation_tab, &quot; Monthly Presentation&quot;)&#10;        self.tabs.addTab(self.savings_tab, &quot; Savings Goals&quot;)&#10;        self.tabs.addTab(self.trends_tab, &quot; Trends&quot;)&#10;        &#10;        # Connect tab change signal&#10;        self.tabs.currentChanged.connect(self.on_tab_changed)&#10;        &#10;        # Create menu bar&#10;        self.create_menu_bar()&#10;        &#10;        # Create status bar&#10;        self.status_bar = QStatusBar()&#10;        self.setStatusBar(self.status_bar)&#10;        self.status_bar.showMessage(&quot;Ready&quot;)&#10;        &#10;        # Apply stylesheet for professional look&#10;        self.setStyleSheet(&quot;&quot;&quot;&#10;            QMainWindow {&#10;                background-color: #2b2b2b;&#10;            }&#10;            QTabWidget::pane {&#10;                border: 1px solid #444;&#10;                background-color: #2b2b2b;&#10;            }&#10;            QTabBar::tab {&#10;                background-color: #3c3c3c;&#10;                color: white;&#10;                padding: 10px 15px;&#10;                margin-right: 2px;&#10;            }&#10;            QTabBar::tab:selected {&#10;                background-color: #2a82da;&#10;            }&#10;            QTabBar::tab:hover {&#10;                background-color: #4c4c4c;&#10;            }&#10;        &quot;&quot;&quot;)&#10;        &#10;    def create_menu_bar(self):&#10;        &quot;&quot;&quot;Create the application menu bar&quot;&quot;&quot;&#10;        menubar = self.menuBar()&#10;        &#10;        # File menu&#10;        file_menu = menubar.addMenu(&quot;&amp;File&quot;)&#10;        &#10;        export_action = QAction(&quot;&amp;Export Data&quot;, self)&#10;        export_action.setShortcut(&quot;Ctrl+E&quot;)&#10;        export_action.triggered.connect(self.export_data)&#10;        file_menu.addAction(export_action)&#10;        &#10;        file_menu.addSeparator()&#10;        &#10;        exit_action = QAction(&quot;E&amp;xit&quot;, self)&#10;        exit_action.setShortcut(&quot;Ctrl+Q&quot;)&#10;        exit_action.triggered.connect(self.close)&#10;        file_menu.addAction(exit_action)&#10;        &#10;        # Edit menu&#10;        edit_menu = menubar.addMenu(&quot;&amp;Edit&quot;)&#10;        &#10;        preferences_action = QAction(&quot;&amp;Preferences&quot;, self)&#10;        preferences_action.setShortcut(&quot;Ctrl+,&quot;)&#10;        preferences_action.triggered.connect(self.show_preferences)&#10;        edit_menu.addAction(preferences_action)&#10;        &#10;        # View menu&#10;        view_menu = menubar.addMenu(&quot;&amp;View&quot;)&#10;        &#10;        refresh_action = QAction(&quot;&amp;Refresh&quot;, self)&#10;        refresh_action.setShortcut(&quot;F5&quot;)&#10;        refresh_action.triggered.connect(self.refresh_data)&#10;        view_menu.addAction(refresh_action)&#10;        &#10;        # Help menu&#10;        help_menu = menubar.addMenu(&quot;&amp;Help&quot;)&#10;        &#10;        about_action = QAction(&quot;&amp;About&quot;, self)&#10;        about_action.triggered.connect(self.show_about)&#10;        help_menu.addAction(about_action)&#10;        &#10;    def on_tab_changed(self, index):&#10;        &quot;&quot;&quot;Handle tab change events&quot;&quot;&quot;&#10;        # Refresh data in the newly selected tab&#10;        current_tab = self.tabs.currentWidget()&#10;        if hasattr(current_tab, 'refresh_data'):&#10;            current_tab.refresh_data()&#10;            &#10;    def export_data(self):&#10;        &quot;&quot;&quot;Export data to file&quot;&quot;&quot;&#10;        QMessageBox.information(self, &quot;Export&quot;, &quot;Export functionality will be implemented soon!&quot;)&#10;        &#10;    def show_preferences(self):&#10;        &quot;&quot;&quot;Show preferences dialog&quot;&quot;&quot;&#10;        QMessageBox.information(self, &quot;Preferences&quot;, &quot;Preferences dialog will be implemented soon!&quot;)&#10;        &#10;    def refresh_data(self):&#10;        &quot;&quot;&quot;Refresh current tab data&quot;&quot;&quot;&#10;        current_tab = self.tabs.currentWidget()&#10;        if hasattr(current_tab, 'refresh_data'):&#10;            current_tab.refresh_data()&#10;            self.status_bar.showMessage(&quot;Data refreshed&quot;, 2000)&#10;            &#10;    def show_about(self):&#10;        &quot;&quot;&quot;Show about dialog&quot;&quot;&quot;&#10;        QMessageBox.about(&#10;            self,&#10;            &quot;About Budget Tracker&quot;,&#10;            &quot;Budget Tracker v1.0\n\n&quot;&#10;            &quot;A comprehensive budget management application\n&quot;&#10;            &quot;for Jeff &amp; Vanessa\n\n&quot;&#10;            &quot;© 2024 All rights reserved&quot;&#10;        )" />
              <option name="updatedContent" value="&quot;&quot;&quot;&#10;Main window for the budget application&#10;&quot;&quot;&quot;&#10;&#10;from PyQt6.QtWidgets import (&#10;    QMainWindow, QTabWidget, QWidget, QVBoxLayout,&#10;    QMenuBar, QMenu, QStatusBar, QMessageBox&#10;)&#10;from PyQt6.QtCore import Qt&#10;from PyQt6.QtGui import QAction, QIcon&#10;&#10;from gui.tabs.overview_tab import OverviewTab&#10;from gui.tabs.net_worth_tab import NetWorthTab&#10;from gui.tabs.budget_tab import BudgetTab&#10;from gui.tabs.presentation_tab import PresentationTab&#10;from gui.tabs.savings_tab import SavingsTab&#10;from gui.tabs.trends_tab import TrendsTab&#10;from gui.utils.styles import get_app_stylesheet&#10;&#10;class MainWindow(QMainWindow):&#10;    def __init__(self):&#10;        super().__init__()&#10;        self.setWindowTitle(&quot;Budget Tracker - Jeff &amp; Vanessa&quot;)&#10;        self.setGeometry(100, 100, 1400, 800)&#10;        &#10;        # Set up central widget and layout&#10;        central_widget = QWidget()&#10;        self.setCentralWidget(central_widget)&#10;        layout = QVBoxLayout(central_widget)&#10;        &#10;        # Create tab widget&#10;        self.tabs = QTabWidget()&#10;        layout.addWidget(self.tabs)&#10;        &#10;        # Create and add tabs&#10;        self.overview_tab = OverviewTab()&#10;        self.net_worth_tab = NetWorthTab()&#10;        self.budget_tab = BudgetTab()&#10;        self.presentation_tab = PresentationTab()&#10;        self.savings_tab = SavingsTab()&#10;        self.trends_tab = TrendsTab()&#10;        &#10;        self.tabs.addTab(self.overview_tab, &quot; Budget Overview&quot;)&#10;        self.tabs.addTab(self.net_worth_tab, &quot; Net Worth&quot;)&#10;        self.tabs.addTab(self.budget_tab, &quot; Budget&quot;)&#10;        self.tabs.addTab(self.presentation_tab, &quot; Monthly Presentation&quot;)&#10;        self.tabs.addTab(self.savings_tab, &quot; Savings Goals&quot;)&#10;        self.tabs.addTab(self.trends_tab, &quot; Trends&quot;)&#10;        &#10;        # Connect tab change signal&#10;        self.tabs.currentChanged.connect(self.on_tab_changed)&#10;        &#10;        # Create menu bar&#10;        self.create_menu_bar()&#10;        &#10;        # Create status bar&#10;        self.status_bar = QStatusBar()&#10;        self.setStatusBar(self.status_bar)&#10;        self.status_bar.showMessage(&quot;Ready&quot;)&#10;        &#10;        # Apply the proper light theme stylesheet&#10;        self.setStyleSheet(get_app_stylesheet())&#10;        &#10;    def create_menu_bar(self):&#10;        &quot;&quot;&quot;Create the application menu bar&quot;&quot;&quot;&#10;        menubar = self.menuBar()&#10;        &#10;        # File menu&#10;        file_menu = menubar.addMenu(&quot;&amp;File&quot;)&#10;        &#10;        export_action = QAction(&quot;&amp;Export Data&quot;, self)&#10;        export_action.setShortcut(&quot;Ctrl+E&quot;)&#10;        export_action.triggered.connect(self.export_data)&#10;        file_menu.addAction(export_action)&#10;        &#10;        file_menu.addSeparator()&#10;        &#10;        exit_action = QAction(&quot;E&amp;xit&quot;, self)&#10;        exit_action.setShortcut(&quot;Ctrl+Q&quot;)&#10;        exit_action.triggered.connect(self.close)&#10;        file_menu.addAction(exit_action)&#10;        &#10;        # Edit menu&#10;        edit_menu = menubar.addMenu(&quot;&amp;Edit&quot;)&#10;        &#10;        preferences_action = QAction(&quot;&amp;Preferences&quot;, self)&#10;        preferences_action.setShortcut(&quot;Ctrl+,&quot;)&#10;        preferences_action.triggered.connect(self.show_preferences)&#10;        edit_menu.addAction(preferences_action)&#10;        &#10;        # View menu&#10;        view_menu = menubar.addMenu(&quot;&amp;View&quot;)&#10;        &#10;        refresh_action = QAction(&quot;&amp;Refresh&quot;, self)&#10;        refresh_action.setShortcut(&quot;F5&quot;)&#10;        refresh_action.triggered.connect(self.refresh_data)&#10;        view_menu.addAction(refresh_action)&#10;        &#10;        # Help menu&#10;        help_menu = menubar.addMenu(&quot;&amp;Help&quot;)&#10;        &#10;        about_action = QAction(&quot;&amp;About&quot;, self)&#10;        about_action.triggered.connect(self.show_about)&#10;        help_menu.addAction(about_action)&#10;        &#10;    def on_tab_changed(self, index):&#10;        &quot;&quot;&quot;Handle tab change events&quot;&quot;&quot;&#10;        # Refresh data in the newly selected tab&#10;        current_tab = self.tabs.currentWidget()&#10;        if hasattr(current_tab, 'refresh_data'):&#10;            current_tab.refresh_data()&#10;            &#10;    def export_data(self):&#10;        &quot;&quot;&quot;Export data to file&quot;&quot;&quot;&#10;        QMessageBox.information(self, &quot;Export&quot;, &quot;Export functionality will be implemented soon!&quot;)&#10;        &#10;    def show_preferences(self):&#10;        &quot;&quot;&quot;Show preferences dialog&quot;&quot;&quot;&#10;        QMessageBox.information(self, &quot;Preferences&quot;, &quot;Preferences dialog will be implemented soon!&quot;)&#10;        &#10;    def refresh_data(self):&#10;        &quot;&quot;&quot;Refresh current tab data&quot;&quot;&quot;&#10;        current_tab = self.tabs.currentWidget()&#10;        if hasattr(current_tab, 'refresh_data'):&#10;            current_tab.refresh_data()&#10;            self.status_bar.showMessage(&quot;Data refreshed&quot;, 2000)&#10;            &#10;    def show_about(self):&#10;        &quot;&quot;&quot;Show about dialog&quot;&quot;&quot;&#10;        QMessageBox.about(&#10;            self,&#10;            &quot;About Budget Tracker&quot;,&#10;            &quot;Budget Tracker v1.0\n\n&quot;&#10;            &quot;A comprehensive budget management application\n&quot;&#10;            &quot;for Jeff &amp; Vanessa\n\n&quot;&#10;            &quot;© 2024 All rights reserved&quot;&#10;        )" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gui/tabs/overview_tab.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gui/tabs/overview_tab.py" />
              <option name="originalContent" value="&quot;&quot;&quot;&#10;Budget Overview Tab - Synopsis of spending and income for the month&#10;&quot;&quot;&quot;&#10;&#10;from PyQt6.QtWidgets import (&#10;    QWidget, QVBoxLayout, QHBoxLayout, QLabel, QPushButton,&#10;    QGroupBox, QGridLayout, QComboBox, QFrame&#10;)&#10;from PyQt6.QtCore import Qt, QDate&#10;from PyQt6.QtGui import QFont&#10;from datetime import datetime&#10;from database.db_manager import DatabaseManager&#10;&#10;class OverviewTab(QWidget):&#10;    def __init__(self):&#10;        super().__init__()&#10;        self.db = DatabaseManager()&#10;        self.refresh_data()&#10;        &#10;    def init_ui(self):&#10;        &quot;&quot;&quot;Initialize the UI&quot;&quot;&quot;&#10;        layout = QVBoxLayout()&#10;        &#10;        # Header with month selector&#10;        header_layout = QHBoxLayout()&#10;        &#10;        title = QLabel(&quot;Budget Overview&quot;)&#10;        title.setFont(QFont(&quot;Arial&quot;, 18, QFont.Weight.Bold))&#10;        header_layout.addWidget(title)&#10;        &#10;        header_layout.addStretch()&#10;        &#10;        # Month/Year selector&#10;        self.month_combo = QComboBox()&#10;        self.month_combo.addItems([&#10;            &quot;January&quot;, &quot;February&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;, &quot;June&quot;,&#10;            &quot;July&quot;, &quot;August&quot;, &quot;September&quot;, &quot;October&quot;, &quot;November&quot;, &quot;December&quot;&#10;        ])&#10;        self.month_combo.setCurrentIndex(datetime.now().month - 1)&#10;        self.month_combo.currentIndexChanged.connect(self.refresh_data)&#10;        &#10;        self.year_combo = QComboBox()&#10;        current_year = datetime.now().year&#10;        self.year_combo.addItems([str(year) for year in range(current_year - 2, current_year + 2)])&#10;        self.year_combo.setCurrentText(str(current_year))&#10;        self.year_combo.currentIndexChanged.connect(self.refresh_data)&#10;        &#10;        header_layout.addWidget(QLabel(&quot;Month:&quot;))&#10;        header_layout.addWidget(self.month_combo)&#10;        header_layout.addWidget(QLabel(&quot;Year:&quot;))&#10;        header_layout.addWidget(self.year_combo)&#10;        &#10;        refresh_btn = QPushButton(&quot;Refresh&quot;)&#10;        refresh_btn.clicked.connect(self.refresh_data)&#10;        header_layout.addWidget(refresh_btn)&#10;        &#10;        layout.addLayout(header_layout)&#10;        &#10;        # Add separator&#10;        separator = QFrame()&#10;        separator.setFrameShape(QFrame.Shape.HLine)&#10;        separator.setFrameShadow(QFrame.Shadow.Sunken)&#10;        layout.addWidget(separator)&#10;        &#10;        # Main content area with summary cards&#10;        content_layout = QGridLayout()&#10;        &#10;        # Income Summary Card&#10;        self.income_group = self.create_summary_card(&quot; Income&quot;, [&#10;            (&quot;Jeff's Income:&quot;, &quot;$0.00&quot;),&#10;            (&quot;Vanessa's Income:&quot;, &quot;$0.00&quot;),&#10;            (&quot;Total Income:&quot;, &quot;$0.00&quot;)&#10;        ])&#10;        content_layout.addWidget(self.income_group, 0, 0)&#10;        &#10;        # Expense Summary Card&#10;        self.expense_group = self.create_summary_card(&quot; Expenses&quot;, [&#10;            (&quot;Jeff's Expenses:&quot;, &quot;$0.00&quot;),&#10;            (&quot;Vanessa's Expenses:&quot;, &quot;$0.00&quot;),&#10;            (&quot;Total Expenses:&quot;, &quot;$0.00&quot;)&#10;        ])&#10;        content_layout.addWidget(self.expense_group, 0, 1)&#10;        &#10;        # Net Summary Card&#10;        self.net_group = self.create_summary_card(&quot; Net Results&quot;, [&#10;            (&quot;Net Income:&quot;, &quot;$0.00&quot;),&#10;            (&quot;Savings Rate:&quot;, &quot;0%&quot;),&#10;            (&quot;Available for Savings:&quot;, &quot;$0.00&quot;)&#10;        ])&#10;        content_layout.addWidget(self.net_group, 1, 0)&#10;        &#10;        # Top Categories Card&#10;        self.categories_group = self.create_summary_card(&quot;️ Top Categories&quot;, [&#10;            (&quot;1.&quot;, &quot;&quot;),&#10;            (&quot;2.&quot;, &quot;&quot;),&#10;            (&quot;3.&quot;, &quot;&quot;),&#10;            (&quot;4.&quot;, &quot;&quot;),&#10;            (&quot;5.&quot;, &quot;&quot;)&#10;        ])&#10;        content_layout.addWidget(self.categories_group, 1, 1)&#10;        &#10;        # Budget Health Card&#10;        self.budget_health_group = self.create_summary_card(&quot;❤️ Budget Health&quot;, [&#10;            (&quot;On Track:&quot;, &quot;0&quot;),&#10;            (&quot;Over Budget:&quot;, &quot;0&quot;),&#10;            (&quot;Under Budget:&quot;, &quot;0&quot;),&#10;            (&quot;Health Score:&quot;, &quot;0%&quot;)&#10;        ])&#10;        content_layout.addWidget(self.budget_health_group, 2, 0)&#10;        &#10;        # Quick Stats Card&#10;        self.stats_group = self.create_summary_card(&quot; Quick Stats&quot;, [&#10;            (&quot;Days in Month:&quot;, &quot;30&quot;),&#10;            (&quot;Daily Average:&quot;, &quot;$0.00&quot;),&#10;            (&quot;Projected Monthly:&quot;, &quot;$0.00&quot;),&#10;            (&quot;Days Remaining:&quot;, &quot;0&quot;)&#10;        ])&#10;        content_layout.addWidget(self.stats_group, 2, 1)&#10;        &#10;        layout.addLayout(content_layout)&#10;        layout.addStretch()&#10;        &#10;        self.setLayout(layout)&#10;        &#10;    def create_summary_card(self, title, items):&#10;        &quot;&quot;&quot;Create a summary card widget&quot;&quot;&quot;&#10;        group = QGroupBox(title)&#10;        group.setStyleSheet(&quot;&quot;&quot;&#10;            QGroupBox {&#10;                font-size: 14px;&#10;                font-weight: bold;&#10;                border: 2px solid #555;&#10;                border-radius: 5px;&#10;                margin-top: 10px;&#10;                padding-top: 10px;&#10;            }&#10;            QGroupBox::title {&#10;                subcontrol-origin: margin;&#10;                left: 10px;&#10;                padding: 0 5px 0 5px;&#10;            }&#10;        &quot;&quot;&quot;)&#10;        &#10;        layout = QGridLayout()&#10;        &#10;        self.labels = {}&#10;        self.labels = {}&#10;        for i, (label_text, value_text) in enumerate(items):&#10;            label = QLabel(label_text)&#10;            label.setStyleSheet(&quot;font-weight: normal;&quot;)&#10;            value = QLabel(value_text)&#10;            value.setStyleSheet(&quot;font-weight: bold; color: #2a82da;&quot;)&#10;            value.setAlignment(Qt.AlignmentFlag.AlignRight)&#10;            &#10;            layout.addWidget(label, i, 0)&#10;            layout.addWidget(value, i, 1)&#10;            &#10;            # Store reference to value labels for updating&#10;            key = f&quot;{title}_{label_text}&quot;&#10;            self.labels[key] = value&#10;            &#10;        group.setLayout(layout)&#10;        return group&#10;        &#10;    def refresh_data(self):&#10;        &quot;&quot;&quot;Refresh the overview data&quot;&quot;&quot;&#10;        try:&#10;            month = self.month_combo.currentIndex() + 1&#10;            year = int(self.year_combo.currentText())&#10;            &#10;            # Get monthly summary from database&#10;            summary = self.db.get_monthly_summary(year, month)&#10;            &#10;            # Update Income Card&#10;            jeff_income = summary['income'].get('Jeff', 0)&#10;            vanessa_income = summary['income'].get('Vanessa', 0)&#10;            total_income = jeff_income + vanessa_income&#10;            &#10;            self.labels[&quot; Income_Jeff's Income:&quot;].setText(f&quot;${jeff_income:,.2f}&quot;)&#10;            self.labels[&quot; Income_Vanessa's Income:&quot;].setText(f&quot;${vanessa_income:,.2f}&quot;)&#10;            self.labels[&quot; Income_Total Income:&quot;].setText(f&quot;${total_income:,.2f}&quot;)&#10;            &#10;            # Update Expense Card&#10;            jeff_expenses = summary['expenses'].get('Jeff', 0)&#10;            vanessa_expenses = summary['expenses'].get('Vanessa', 0)&#10;            total_expenses = jeff_expenses + vanessa_expenses&#10;            &#10;            self.labels[&quot; Expenses_Jeff's Expenses:&quot;].setText(f&quot;${jeff_expenses:,.2f}&quot;)&#10;            self.labels[&quot; Expenses_Vanessa's Expenses:&quot;].setText(f&quot;${vanessa_expenses:,.2f}&quot;)&#10;            self.labels[&quot; Expenses_Total Expenses:&quot;].setText(f&quot;${total_expenses:,.2f}&quot;)&#10;            &#10;            # Update Net Results Card&#10;            net_income = total_income - total_expenses&#10;            savings_rate = (net_income / total_income * 100) if total_income &gt; 0 else 0&#10;            &#10;            self.labels[&quot; Net Results_Net Income:&quot;].setText(f&quot;${net_income:,.2f}&quot;)&#10;            self.labels[&quot; Net Results_Savings Rate:&quot;].setText(f&quot;{savings_rate:.1f}%&quot;)&#10;            self.labels[&quot; Net Results_Available for Savings:&quot;].setText(f&quot;${net_income:,.2f}&quot;)&#10;            &#10;            # Update Top Categories&#10;            top_categories = sorted(summary['by_category'], key=lambda x: x['total'], reverse=True)[:5]&#10;            for i in range(5):&#10;                label_key = f&quot;️ Top Categories_{i+1}.&quot;&#10;                if i &lt; len(top_categories):&#10;                    cat = top_categories[i]&#10;                    self.labels[label_key].setText(f&quot;{cat['category']}: ${cat['total']:,.2f}&quot;)&#10;                else:&#10;                    self.labels[label_key].setText(&quot;&quot;)&#10;            &#10;            # Update Quick Stats&#10;            from calendar import monthrange&#10;            days_in_month = monthrange(year, month)[1]&#10;            current_day = datetime.now().day if datetime.now().month == month and datetime.now().year == year else days_in_month&#10;            daily_avg = total_expenses / current_day if current_day &gt; 0 else 0&#10;            projected = daily_avg * days_in_month&#10;            days_remaining = max(0, days_in_month - current_day)&#10;            &#10;            self.labels[&quot; Quick Stats_Days in Month:&quot;].setText(str(days_in_month))&#10;            self.labels[&quot; Quick Stats_Daily Average:&quot;].setText(f&quot;${daily_avg:,.2f}&quot;)&#10;            self.labels[&quot; Quick Stats_Projected Monthly:&quot;].setText(f&quot;${projected:,.2f}&quot;)&#10;            self.labels[&quot; Quick Stats_Days Remaining:&quot;].setText(str(days_remaining))&#10;            &#10;        except Exception as e:&#10;            print(f&quot;Error refreshing overview data: {e}&quot;)" />
              <option name="updatedContent" value="&quot;&quot;&quot;&#10;Budget Overview Tab - Synopsis of spending and income for the month&#10;&quot;&quot;&quot;&#10;&#10;from PyQt6.QtWidgets import (&#10;    QWidget, QVBoxLayout, QHBoxLayout, QLabel, QPushButton,&#10;    QGroupBox, QGridLayout, QComboBox, QFrame&#10;)&#10;from PyQt6.QtCore import Qt, QDate&#10;from PyQt6.QtGui import QFont&#10;from datetime import datetime&#10;from database.db_manager import DatabaseManager&#10;&#10;class OverviewTab(QWidget):&#10;    def __init__(self):&#10;        super().__init__()&#10;        self.db = DatabaseManager()&#10;        self.labels = {}  # Initialize labels dictionary&#10;        self.init_ui()&#10;        self.refresh_data()&#10;        &#10;    def init_ui(self):&#10;        &quot;&quot;&quot;Initialize the UI&quot;&quot;&quot;&#10;        layout = QVBoxLayout()&#10;        &#10;        # Header with month selector&#10;        header_layout = QHBoxLayout()&#10;        &#10;        title = QLabel(&quot;Budget Overview&quot;)&#10;        title.setFont(QFont(&quot;Arial&quot;, 18, QFont.Weight.Bold))&#10;        header_layout.addWidget(title)&#10;        &#10;        header_layout.addStretch()&#10;        &#10;        # Month/Year selector&#10;        self.month_combo = QComboBox()&#10;        self.month_combo.addItems([&#10;            &quot;January&quot;, &quot;February&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;, &quot;June&quot;,&#10;            &quot;July&quot;, &quot;August&quot;, &quot;September&quot;, &quot;October&quot;, &quot;November&quot;, &quot;December&quot;&#10;        ])&#10;        self.month_combo.setCurrentIndex(datetime.now().month - 1)&#10;        self.month_combo.currentIndexChanged.connect(self.refresh_data)&#10;        &#10;        self.year_combo = QComboBox()&#10;        current_year = datetime.now().year&#10;        self.year_combo.addItems([str(year) for year in range(current_year - 2, current_year + 2)])&#10;        self.year_combo.setCurrentText(str(current_year))&#10;        self.year_combo.currentIndexChanged.connect(self.refresh_data)&#10;        &#10;        header_layout.addWidget(QLabel(&quot;Month:&quot;))&#10;        header_layout.addWidget(self.month_combo)&#10;        header_layout.addWidget(QLabel(&quot;Year:&quot;))&#10;        header_layout.addWidget(self.year_combo)&#10;        &#10;        refresh_btn = QPushButton(&quot;Refresh&quot;)&#10;        refresh_btn.clicked.connect(self.refresh_data)&#10;        header_layout.addWidget(refresh_btn)&#10;        &#10;        layout.addLayout(header_layout)&#10;        &#10;        # Add separator&#10;        separator = QFrame()&#10;        separator.setFrameShape(QFrame.Shape.HLine)&#10;        separator.setFrameShadow(QFrame.Shadow.Sunken)&#10;        layout.addWidget(separator)&#10;        &#10;        # Main content area with summary cards&#10;        content_layout = QGridLayout()&#10;        &#10;        # Income Summary Card&#10;        self.income_group = self.create_summary_card(&quot; Income&quot;, [&#10;            (&quot;Jeff's Income:&quot;, &quot;$0.00&quot;),&#10;            (&quot;Vanessa's Income:&quot;, &quot;$0.00&quot;),&#10;            (&quot;Total Income:&quot;, &quot;$0.00&quot;)&#10;        ])&#10;        content_layout.addWidget(self.income_group, 0, 0)&#10;        &#10;        # Expense Summary Card&#10;        self.expense_group = self.create_summary_card(&quot; Expenses&quot;, [&#10;            (&quot;Jeff's Expenses:&quot;, &quot;$0.00&quot;),&#10;            (&quot;Vanessa's Expenses:&quot;, &quot;$0.00&quot;),&#10;            (&quot;Total Expenses:&quot;, &quot;$0.00&quot;)&#10;        ])&#10;        content_layout.addWidget(self.expense_group, 0, 1)&#10;        &#10;        # Net Summary Card&#10;        self.net_group = self.create_summary_card(&quot; Net Results&quot;, [&#10;            (&quot;Net Income:&quot;, &quot;$0.00&quot;),&#10;            (&quot;Savings Rate:&quot;, &quot;0%&quot;),&#10;            (&quot;Available for Savings:&quot;, &quot;$0.00&quot;)&#10;        ])&#10;        content_layout.addWidget(self.net_group, 1, 0)&#10;        &#10;        # Top Categories Card&#10;        self.categories_group = self.create_summary_card(&quot;️ Top Categories&quot;, [&#10;            (&quot;1.&quot;, &quot;&quot;),&#10;            (&quot;2.&quot;, &quot;&quot;),&#10;            (&quot;3.&quot;, &quot;&quot;),&#10;            (&quot;4.&quot;, &quot;&quot;),&#10;            (&quot;5.&quot;, &quot;&quot;)&#10;        ])&#10;        content_layout.addWidget(self.categories_group, 1, 1)&#10;        &#10;        # Budget Health Card&#10;        self.budget_health_group = self.create_summary_card(&quot;❤️ Budget Health&quot;, [&#10;            (&quot;On Track:&quot;, &quot;0&quot;),&#10;            (&quot;Over Budget:&quot;, &quot;0&quot;),&#10;            (&quot;Under Budget:&quot;, &quot;0&quot;),&#10;            (&quot;Health Score:&quot;, &quot;0%&quot;)&#10;        ])&#10;        content_layout.addWidget(self.budget_health_group, 2, 0)&#10;        &#10;        # Quick Stats Card&#10;        self.stats_group = self.create_summary_card(&quot; Quick Stats&quot;, [&#10;            (&quot;Days in Month:&quot;, &quot;30&quot;),&#10;            (&quot;Daily Average:&quot;, &quot;$0.00&quot;),&#10;            (&quot;Projected Monthly:&quot;, &quot;$0.00&quot;),&#10;            (&quot;Days Remaining:&quot;, &quot;0&quot;)&#10;        ])&#10;        content_layout.addWidget(self.stats_group, 2, 1)&#10;        &#10;        layout.addLayout(content_layout)&#10;        layout.addStretch()&#10;        &#10;        self.setLayout(layout)&#10;        &#10;    def create_summary_card(self, title, items):&#10;        &quot;&quot;&quot;Create a summary card widget&quot;&quot;&quot;&#10;        group = QGroupBox(title)&#10;        group.setStyleSheet(&quot;&quot;&quot;&#10;            QGroupBox {&#10;                font-size: 14px;&#10;                font-weight: bold;&#10;                border: 2px solid #555;&#10;                border-radius: 5px;&#10;                margin-top: 10px;&#10;                padding-top: 10px;&#10;            }&#10;            QGroupBox::title {&#10;                subcontrol-origin: margin;&#10;                left: 10px;&#10;                padding: 0 5px 0 5px;&#10;            }&#10;        &quot;&quot;&quot;)&#10;        &#10;        layout = QGridLayout()&#10;        &#10;        for i, (label_text, value_text) in enumerate(items):&#10;            label = QLabel(label_text)&#10;            label.setStyleSheet(&quot;font-weight: normal;&quot;)&#10;            value = QLabel(value_text)&#10;            value.setStyleSheet(&quot;font-weight: bold; color: #2a82da;&quot;)&#10;            value.setAlignment(Qt.AlignmentFlag.AlignRight)&#10;            &#10;            layout.addWidget(label, i, 0)&#10;            layout.addWidget(value, i, 1)&#10;            &#10;            # Store reference to value labels for updating with consistent key format&#10;            key = f&quot;{title}_{label_text}&quot;&#10;            self.labels[key] = value&#10;            &#10;        group.setLayout(layout)&#10;        return group&#10;        &#10;    def refresh_data(self):&#10;        &quot;&quot;&quot;Refresh the overview data&quot;&quot;&quot;&#10;        try:&#10;            month = self.month_combo.currentIndex() + 1&#10;            year = int(self.year_combo.currentText())&#10;            &#10;            # Get monthly summary from database&#10;            summary = self.db.get_monthly_summary(year, month)&#10;            &#10;            # Update Income Card - use safe label access&#10;            jeff_income = summary['income'].get('Jeff', 0)&#10;            vanessa_income = summary['income'].get('Vanessa', 0)&#10;            total_income = jeff_income + vanessa_income&#10;            &#10;            self._update_label(&quot; Income&quot;, &quot;Jeff's Income:&quot;, f&quot;${jeff_income:,.2f}&quot;)&#10;            self._update_label(&quot; Income&quot;, &quot;Vanessa's Income:&quot;, f&quot;${vanessa_income:,.2f}&quot;)&#10;            self._update_label(&quot; Income&quot;, &quot;Total Income:&quot;, f&quot;${total_income:,.2f}&quot;)&#10;            &#10;            # Update Expense Card&#10;            jeff_expenses = summary['expenses'].get('Jeff', 0)&#10;            vanessa_expenses = summary['expenses'].get('Vanessa', 0)&#10;            total_expenses = jeff_expenses + vanessa_expenses&#10;            &#10;            self._update_label(&quot; Expenses&quot;, &quot;Jeff's Expenses:&quot;, f&quot;${jeff_expenses:,.2f}&quot;)&#10;            self._update_label(&quot; Expenses&quot;, &quot;Vanessa's Expenses:&quot;, f&quot;${vanessa_expenses:,.2f}&quot;)&#10;            self._update_label(&quot; Expenses&quot;, &quot;Total Expenses:&quot;, f&quot;${total_expenses:,.2f}&quot;)&#10;            &#10;            # Update Net Results Card&#10;            net_income = total_income - total_expenses&#10;            savings_rate = (net_income / total_income * 100) if total_income &gt; 0 else 0&#10;            &#10;            self._update_label(&quot; Net Results&quot;, &quot;Net Income:&quot;, f&quot;${net_income:,.2f}&quot;)&#10;            self._update_label(&quot; Net Results&quot;, &quot;Savings Rate:&quot;, f&quot;{savings_rate:.1f}%&quot;)&#10;            self._update_label(&quot; Net Results&quot;, &quot;Available for Savings:&quot;, f&quot;${net_income:,.2f}&quot;)&#10;            &#10;            # Update Top Categories&#10;            top_categories = sorted(summary['by_category'], key=lambda x: x['total'], reverse=True)[:5]&#10;            for i in range(5):&#10;                label_key = f&quot;{i+1}.&quot;&#10;                if i &lt; len(top_categories):&#10;                    cat = top_categories[i]&#10;                    self._update_label(&quot;️ Top Categories&quot;, label_key, f&quot;{cat['category']}: ${cat['total']:,.2f}&quot;)&#10;                else:&#10;                    self._update_label(&quot;️ Top Categories&quot;, label_key, &quot;&quot;)&#10;            &#10;            # Update Quick Stats&#10;            from calendar import monthrange&#10;            days_in_month = monthrange(year, month)[1]&#10;            current_day = datetime.now().day if datetime.now().month == month and datetime.now().year == year else days_in_month&#10;            daily_avg = total_expenses / current_day if current_day &gt; 0 else 0&#10;            projected = daily_avg * days_in_month&#10;            days_remaining = max(0, days_in_month - current_day)&#10;            &#10;            self._update_label(&quot; Quick Stats&quot;, &quot;Days in Month:&quot;, str(days_in_month))&#10;            self._update_label(&quot; Quick Stats&quot;, &quot;Daily Average:&quot;, f&quot;${daily_avg:,.2f}&quot;)&#10;            self._update_label(&quot; Quick Stats&quot;, &quot;Projected Monthly:&quot;, f&quot;${projected:,.2f}&quot;)&#10;            self._update_label(&quot; Quick Stats&quot;, &quot;Days Remaining:&quot;, str(days_remaining))&#10;            &#10;        except Exception as e:&#10;            print(f&quot;Error refreshing overview data: {e}&quot;)&#10;            import traceback&#10;            traceback.print_exc()&#10;    &#10;    def _update_label(self, card_title, label_text, value):&#10;        &quot;&quot;&quot;Safely update a label value&quot;&quot;&quot;&#10;        key = f&quot;{card_title}_{label_text}&quot;&#10;        if key in self.labels:&#10;            self.labels[key].setText(value)&#10;        else:&#10;            print(f&quot;Warning: Label key '{key}' not found&quot;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gui/tabs/presentation_tab.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gui/tabs/presentation_tab.py" />
              <option name="originalContent" value="&quot;&quot;&quot;&#10;Monthly Presentation Tab&#10;Shows monthly spending breakdown by category and unrealized expenses tracking&#10;&quot;&quot;&quot;&#10;&#10;from PyQt6.QtWidgets import *&#10;from PyQt6.QtCore import *&#10;from PyQt6.QtGui import *&#10;from PyQt6.QtCharts import *&#10;&#10;from database.models import IncomeModel, ExpenseModel&#10;from database.category_manager import get_category_manager&#10;&#10;class PresentationTab(QWidget):&#10;    &quot;&quot;&quot;Monthly presentation tab with subtabs&quot;&quot;&quot;&#10;&#10;    def __init__(self, db):&#10;        super().__init__()&#10;        self.db = db&#10;        self.category_manager = get_category_manager()&#10;        self.setup_ui()&#10;        self.refresh_data()&#10;&#10;    def setup_ui(self):&#10;        &quot;&quot;&quot;Set up the UI with tab widget&quot;&quot;&quot;&#10;        layout = QVBoxLayout(self)&#10;&#10;        # Title&#10;        title = QLabel(&quot;Monthly Presentation&quot;)&#10;        title.setStyleSheet(&quot;font-size: 24px; font-weight: bold; color: #333;&quot;)&#10;        layout.addWidget(title)&#10;        &#10;        # Month selector (shared across all tabs)&#10;        month_layout = QHBoxLayout()&#10;        month_layout.addWidget(QLabel(&quot;Select Month:&quot;))&#10;        self.month_selector = QDateEdit()&#10;        self.month_selector.setDisplayFormat(&quot;MMMM yyyy&quot;)&#10;        self.month_selector.setDate(QDate.currentDate())&#10;        self.month_selector.setCalendarPopup(True)&#10;        self.month_selector.dateChanged.connect(self.refresh_data)&#10;        month_layout.addWidget(self.month_selector)&#10;        month_layout.addStretch()&#10;        layout.addLayout(month_layout)&#10;        &#10;        # Create tab widget&#10;        self.tab_widget = QTabWidget()&#10;&#10;        # Overview tab (existing functionality)&#10;        overview_tab = QWidget()&#10;        self.setup_overview_tab(overview_tab)&#10;        self.tab_widget.addTab(overview_tab, &quot;Overview&quot;)&#10;&#10;        # Unrealized expenses tab (new functionality)&#10;        unrealized_tab = QWidget()&#10;        self.setup_unrealized_tab(unrealized_tab)&#10;        self.tab_widget.addTab(unrealized_tab, &quot;Unrealized Expenses&quot;)&#10;&#10;        layout.addWidget(self.tab_widget)&#10;&#10;    def setup_overview_tab(self, tab):&#10;        &quot;&quot;&quot;Set up the overview tab with existing functionality&quot;&quot;&quot;&#10;        layout = QVBoxLayout(tab)&#10;&#10;        # Summary section&#10;        summary_layout = QHBoxLayout()&#10;&#10;        # Income summary&#10;        income_group = QGroupBox(&quot;Income Summary&quot;)&#10;        income_layout = QVBoxLayout()&#10;        self.jeff_income_label = QLabel(&quot;Jeff: $0.00&quot;)&#10;        self.vanessa_income_label = QLabel(&quot;Vanessa: $0.00&quot;)&#10;        self.total_income_label = QLabel(&quot;Total: $0.00&quot;)&#10;        self.total_income_label.setStyleSheet(&quot;font-weight: bold;&quot;)&#10;        income_layout.addWidget(self.jeff_income_label)&#10;        income_layout.addWidget(self.vanessa_income_label)&#10;        income_layout.addWidget(self.total_income_label)&#10;        income_group.setLayout(income_layout)&#10;        summary_layout.addWidget(income_group)&#10;&#10;        # Expense summary&#10;        expense_group = QGroupBox(&quot;Expense Summary&quot;)&#10;        expense_layout = QVBoxLayout()&#10;        self.jeff_expense_label = QLabel(&quot;Jeff: $0.00&quot;)&#10;        self.vanessa_expense_label = QLabel(&quot;Vanessa: $0.00&quot;)&#10;        self.total_expense_label = QLabel(&quot;Total: $0.00&quot;)&#10;        self.total_expense_label.setStyleSheet(&quot;font-weight: bold;&quot;)&#10;        expense_layout.addWidget(self.jeff_expense_label)&#10;        expense_layout.addWidget(self.vanessa_expense_label)&#10;        expense_layout.addWidget(self.total_expense_label)&#10;        expense_group.setLayout(expense_layout)&#10;        summary_layout.addWidget(expense_group)&#10;&#10;        layout.addLayout(summary_layout)&#10;&#10;        # Category breakdown table&#10;        self.category_table = QTableWidget()&#10;        self.category_table.setColumnCount(5)&#10;        self.category_table.setHorizontalHeaderLabels([&#10;            &quot;Category&quot;, &quot;Subcategory&quot;, &quot;Budgeted&quot;, &quot;Actual&quot;, &quot;Variance&quot;&#10;        ])&#10;        self.category_table.horizontalHeader().setStretchLastSection(True)&#10;        layout.addWidget(self.category_table)&#10;&#10;        # Spending chart&#10;        self.chart_view = QChartView()&#10;        self.chart_view.setMinimumHeight(300)&#10;        layout.addWidget(self.chart_view)&#10;&#10;    def setup_unrealized_tab(self, tab):&#10;        &quot;&quot;&quot;Set up the unrealized expenses tab&quot;&quot;&quot;&#10;        layout = QVBoxLayout(tab)&#10;&#10;        # Instructions&#10;        instructions = QLabel(&quot;This shows expenses that haven't been taken out of the joint checking account yet.&quot;)&#10;        instructions.setWordWrap(True)&#10;        instructions.setStyleSheet(&quot;color: #666; margin-bottom: 10px;&quot;)&#10;        layout.addWidget(instructions)&#10;&#10;        # Summary section for unrealized expenses&#10;        summary_layout = QHBoxLayout()&#10;&#10;        # Unrealized expenses summary&#10;        unrealized_group = QGroupBox(&quot;Unrealized Expenses to Withdraw&quot;)&#10;        unrealized_layout = QVBoxLayout()&#10;        self.jeff_unrealized_label = QLabel(&quot;Jeff: $0.00&quot;)&#10;        self.vanessa_unrealized_label = QLabel(&quot;Vanessa: $0.00&quot;)&#10;        self.total_unrealized_label = QLabel(&quot;Total to Withdraw: $0.00&quot;)&#10;        self.total_unrealized_label.setStyleSheet(&quot;font-weight: bold; font-size: 14px; color: #d32f2f;&quot;)&#10;        unrealized_layout.addWidget(self.jeff_unrealized_label)&#10;        unrealized_layout.addWidget(self.vanessa_unrealized_label)&#10;        unrealized_layout.addWidget(QLabel(&quot;&quot;))  # Spacer&#10;        unrealized_layout.addWidget(self.total_unrealized_label)&#10;        unrealized_group.setLayout(unrealized_layout)&#10;        summary_layout.addWidget(unrealized_group)&#10;        summary_layout.addStretch()&#10;&#10;        layout.addLayout(summary_layout)&#10;&#10;        # Unrealized expenses table&#10;        self.unrealized_table = QTableWidget()&#10;        self.unrealized_table.setColumnCount(7)&#10;        self.unrealized_table.setHorizontalHeaderLabels([&#10;            &quot;Date&quot;, &quot;Person&quot;, &quot;Amount&quot;, &quot;Category&quot;, &quot;Subcategory&quot;, &quot;Description&quot;, &quot;Actions&quot;&#10;        ])&#10;        self.unrealized_table.horizontalHeader().setStretchLastSection(True)&#10;        self.unrealized_table.setAlternatingRowColors(True)&#10;        layout.addWidget(self.unrealized_table)&#10;&#10;    def refresh_data(self):&#10;        &quot;&quot;&quot;Refresh presentation data for all tabs&quot;&quot;&quot;&#10;        self.refresh_overview_data()&#10;        self.refresh_unrealized_data()&#10;&#10;    def refresh_overview_data(self):&#10;        &quot;&quot;&quot;Refresh data for the overview tab&quot;&quot;&quot;&#10;        # Get selected month range&#10;        selected_date = self.month_selector.date()&#10;        month_start = selected_date.toString(&quot;yyyy-MM-01&quot;)&#10;        month_end = selected_date.addMonths(1).addDays(-1).toString(&quot;yyyy-MM-dd&quot;)&#10;&#10;        # Get income by person&#10;        cursor = self.db.execute('''&#10;            SELECT person, COALESCE(SUM(amount), 0) as total&#10;            FROM income&#10;            WHERE date &gt;= ? AND date &lt;= ?&#10;            GROUP BY person&#10;        ''', (month_start, month_end))&#10;&#10;        income_by_person = {row['person']: row['total'] for row in cursor.fetchall()}&#10;        jeff_income = income_by_person.get('Jeff', 0)&#10;        vanessa_income = income_by_person.get('Vanessa', 0)&#10;        total_income = jeff_income + vanessa_income&#10;&#10;        self.jeff_income_label.setText(f&quot;Jeff: ${jeff_income:,.2f}&quot;)&#10;        self.vanessa_income_label.setText(f&quot;Vanessa: ${vanessa_income:,.2f}&quot;)&#10;        self.total_income_label.setText(f&quot;Total: ${total_income:,.2f}&quot;)&#10;&#10;        # Get expenses by person&#10;        cursor = self.db.execute('''&#10;            SELECT person, COALESCE(SUM(amount), 0) as total&#10;            FROM expenses&#10;            WHERE date &gt;= ? AND date &lt;= ?&#10;            GROUP BY person&#10;        ''', (month_start, month_end))&#10;        &#10;        expenses_by_person = {row['person']: row['total'] for row in cursor.fetchall()}&#10;        jeff_expenses = expenses_by_person.get('Jeff', 0)&#10;        vanessa_expenses = expenses_by_person.get('Vanessa', 0)&#10;        total_expenses = jeff_expenses + vanessa_expenses&#10;&#10;        self.jeff_expense_label.setText(f&quot;Jeff: ${jeff_expenses:,.2f}&quot;)&#10;        self.vanessa_expense_label.setText(f&quot;Vanessa: ${vanessa_expenses:,.2f}&quot;)&#10;        self.total_expense_label.setText(f&quot;Total: ${total_expenses:,.2f}&quot;)&#10;&#10;        # Update category table&#10;        categories = ExpenseModel.get_by_category(self.db, month_start, month_end)&#10;&#10;        self.category_table.setRowCount(len(categories))&#10;        for i, cat in enumerate(categories):&#10;            self.category_table.setItem(i, 0, QTableWidgetItem(cat['category']))&#10;            self.category_table.setItem(i, 1, QTableWidgetItem(cat['subcategory'] or &quot;&quot;))&#10;            self.category_table.setItem(i, 2, QTableWidgetItem(&quot;$0.00&quot;))  # Budgeted placeholder&#10;            self.category_table.setItem(i, 3, QTableWidgetItem(f&quot;${cat['total']:.2f}&quot;))&#10;&#10;            variance = 0 - cat['total']  # Since no budget set&#10;            variance_item = QTableWidgetItem(f&quot;${variance:.2f}&quot;)&#10;            if variance &lt; 0:&#10;                variance_item.setForeground(QColor(244, 67, 54))&#10;            else:&#10;                variance_item.setForeground(QColor(76, 175, 80))&#10;            self.category_table.setItem(i, 4, variance_item)&#10;&#10;        # Update chart&#10;        self.update_spending_chart(month_start, month_end)&#10;&#10;    def refresh_unrealized_data(self):&#10;        &quot;&quot;&quot;Refresh data for the unrealized expenses tab&quot;&quot;&quot;&#10;        # Get selected month range&#10;        selected_date = self.month_selector.date()&#10;        month_start = selected_date.toString(&quot;yyyy-MM-01&quot;)&#10;        month_end = selected_date.addMonths(1).addDays(-1).toString(&quot;yyyy-MM-dd&quot;)&#10;&#10;        # Get unrealized expenses by person&#10;        unrealized_by_person = ExpenseModel.get_unrealized_by_person(self.db, month_start, month_end)&#10;        unrealized_dict = {row['person']: row['total'] for row in unrealized_by_person}&#10;&#10;        jeff_unrealized = unrealized_dict.get('Jeff', 0)&#10;        vanessa_unrealized = unrealized_dict.get('Vanessa', 0)&#10;        total_unrealized = jeff_unrealized + vanessa_unrealized&#10;&#10;        self.jeff_unrealized_label.setText(f&quot;Jeff: ${jeff_unrealized:,.2f}&quot;)&#10;        self.vanessa_unrealized_label.setText(f&quot;Vanessa: ${vanessa_unrealized:,.2f}&quot;)&#10;        self.total_unrealized_label.setText(f&quot;Total to Withdraw: ${total_unrealized:,.2f}&quot;)&#10;&#10;        # Get all unrealized expenses&#10;        unrealized_expenses = ExpenseModel.get_unrealized_expenses(self.db, month_start, month_end)&#10;&#10;        self.unrealized_table.setRowCount(len(unrealized_expenses))&#10;        for i, expense in enumerate(unrealized_expenses):&#10;            self.unrealized_table.setItem(i, 0, QTableWidgetItem(expense['date']))&#10;            self.unrealized_table.setItem(i, 1, QTableWidgetItem(expense['person']))&#10;            self.unrealized_table.setItem(i, 2, QTableWidgetItem(f&quot;${expense['amount']:.2f}&quot;))&#10;            self.unrealized_table.setItem(i, 3, QTableWidgetItem(expense['category']))&#10;            self.unrealized_table.setItem(i, 4, QTableWidgetItem(expense['subcategory'] or &quot;&quot;))&#10;            self.unrealized_table.setItem(i, 5, QTableWidgetItem(expense['description'] or &quot;&quot;))&#10;&#10;            # Add &quot;Mark as Realized&quot; button&#10;            mark_button = QPushButton(&quot;Mark as Realized&quot;)&#10;            mark_button.clicked.connect(lambda checked, exp_id=expense['id']: self.mark_expense_realized(exp_id))&#10;            mark_button.setStyleSheet(&quot;QPushButton { background-color: #4CAF50; color: white; border: none; padding: 5px; }&quot;)&#10;            self.unrealized_table.setCellWidget(i, 6, mark_button)&#10;&#10;    def mark_expense_realized(self, expense_id):&#10;        &quot;&quot;&quot;Mark an expense as realized and refresh the data&quot;&quot;&quot;&#10;        ExpenseModel.mark_as_realized(self.db, expense_id)&#10;        self.refresh_unrealized_data()&#10;&#10;        # Show confirmation message&#10;        QMessageBox.information(self, &quot;Success&quot;, &quot;Expense marked as realized!&quot;)&#10;&#10;    def update_spending_chart(self, month_start, month_end):&#10;        &quot;&quot;&quot;Update spending pie chart for overview tab&quot;&quot;&quot;&#10;        # Get category data&#10;        categories = ExpenseModel.get_by_category(self.db, month_start, month_end)&#10;&#10;        if not categories:&#10;            # Clear chart if no data&#10;            self.chart_view.setChart(QChart())&#10;            return&#10;&#10;        # Create pie series&#10;        series = QPieSeries()&#10;&#10;        for cat in categories:&#10;            slice_label = f&quot;{cat['category']}&quot;&#10;            if cat['subcategory']:&#10;                slice_label += f&quot; - {cat['subcategory']}&quot;&#10;            series.append(slice_label, cat['total'])&#10;&#10;        # Create chart&#10;        chart = QChart()&#10;        chart.addSeries(series)&#10;        chart.setTitle(&quot;Monthly Spending by Category&quot;)&#10;        chart.legend().setVisible(True)&#10;        chart.legend().setAlignment(Qt.AlignmentFlag.AlignRight)&#10;&#10;        self.chart_view.setChart(chart)&#10;" />
              <option name="updatedContent" value="&quot;&quot;&quot;&#10;Monthly Presentation Tab&#10;Shows monthly spending breakdown by category and unrealized expenses tracking&#10;&quot;&quot;&quot;&#10;&#10;from PyQt6.QtWidgets import *&#10;from PyQt6.QtCore import *&#10;from PyQt6.QtGui import *&#10;from PyQt6.QtCharts import *&#10;&#10;from database.models import IncomeModel, ExpenseModel&#10;from database.category_manager import get_category_manager&#10;&#10;class PresentationTab(QWidget):&#10;    &quot;&quot;&quot;Monthly presentation tab with subtabs&quot;&quot;&quot;&#10;&#10;    def __init__(self, db):&#10;        super().__init__()&#10;        self.db = db&#10;        self.category_manager = get_category_manager()&#10;        self.setup_ui()&#10;        self.refresh_data()&#10;&#10;    def setup_ui(self):&#10;        &quot;&quot;&quot;Set up the UI with tab widget&quot;&quot;&quot;&#10;        layout = QVBoxLayout(self)&#10;&#10;        # Title&#10;        title = QLabel(&quot;Monthly Presentation&quot;)&#10;        title.setStyleSheet(&quot;font-size: 24px; font-weight: bold; color: #333;&quot;)&#10;        layout.addWidget(title)&#10;        &#10;        # Month selector (shared across all tabs)&#10;        month_layout = QHBoxLayout()&#10;        month_layout.addWidget(QLabel(&quot;Select Month:&quot;))&#10;        self.month_selector = QDateEdit()&#10;        self.month_selector.setDisplayFormat(&quot;MMMM yyyy&quot;)&#10;        self.month_selector.setDate(QDate.currentDate())&#10;        self.month_selector.setCalendarPopup(True)&#10;        self.month_selector.dateChanged.connect(self.refresh_data)&#10;        month_layout.addWidget(self.month_selector)&#10;        month_layout.addStretch()&#10;        layout.addLayout(month_layout)&#10;        &#10;        # Create tab widget&#10;        self.tab_widget = QTabWidget()&#10;&#10;        # Overview tab (existing functionality)&#10;        overview_tab = QWidget()&#10;        self.setup_overview_tab(overview_tab)&#10;        self.tab_widget.addTab(overview_tab, &quot;Overview&quot;)&#10;&#10;        # Budget vs Actual tab (new functionality)&#10;        budget_vs_actual_tab = QWidget()&#10;        self.setup_budget_vs_actual_tab(budget_vs_actual_tab)&#10;        self.tab_widget.addTab(budget_vs_actual_tab, &quot;Budget vs Actual&quot;)&#10;&#10;        # Unrealized expenses tab (existing functionality)&#10;        unrealized_tab = QWidget()&#10;        self.setup_unrealized_tab(unrealized_tab)&#10;        self.tab_widget.addTab(unrealized_tab, &quot;Unrealized Expenses&quot;)&#10;&#10;        layout.addWidget(self.tab_widget)&#10;&#10;    def setup_overview_tab(self, tab):&#10;        &quot;&quot;&quot;Set up the overview tab with existing functionality&quot;&quot;&quot;&#10;        layout = QVBoxLayout(tab)&#10;&#10;        # Summary section&#10;        summary_layout = QHBoxLayout()&#10;&#10;        # Income summary&#10;        income_group = QGroupBox(&quot;Income Summary&quot;)&#10;        income_layout = QVBoxLayout()&#10;        self.jeff_income_label = QLabel(&quot;Jeff: $0.00&quot;)&#10;        self.vanessa_income_label = QLabel(&quot;Vanessa: $0.00&quot;)&#10;        self.total_income_label = QLabel(&quot;Total: $0.00&quot;)&#10;        self.total_income_label.setStyleSheet(&quot;font-weight: bold;&quot;)&#10;        income_layout.addWidget(self.jeff_income_label)&#10;        income_layout.addWidget(self.vanessa_income_label)&#10;        income_layout.addWidget(self.total_income_label)&#10;        income_group.setLayout(income_layout)&#10;        summary_layout.addWidget(income_group)&#10;&#10;        # Expense summary&#10;        expense_group = QGroupBox(&quot;Expense Summary&quot;)&#10;        expense_layout = QVBoxLayout()&#10;        self.jeff_expense_label = QLabel(&quot;Jeff: $0.00&quot;)&#10;        self.vanessa_expense_label = QLabel(&quot;Vanessa: $0.00&quot;)&#10;        self.total_expense_label = QLabel(&quot;Total: $0.00&quot;)&#10;        self.total_expense_label.setStyleSheet(&quot;font-weight: bold;&quot;)&#10;        expense_layout.addWidget(self.jeff_expense_label)&#10;        expense_layout.addWidget(self.vanessa_expense_label)&#10;        expense_layout.addWidget(self.total_expense_label)&#10;        expense_group.setLayout(expense_layout)&#10;        summary_layout.addWidget(expense_group)&#10;&#10;        layout.addLayout(summary_layout)&#10;&#10;        # Category breakdown table&#10;        self.category_table = QTableWidget()&#10;        self.category_table.setColumnCount(5)&#10;        self.category_table.setHorizontalHeaderLabels([&#10;            &quot;Category&quot;, &quot;Subcategory&quot;, &quot;Budgeted&quot;, &quot;Actual&quot;, &quot;Variance&quot;&#10;        ])&#10;        self.category_table.horizontalHeader().setStretchLastSection(True)&#10;        layout.addWidget(self.category_table)&#10;&#10;        # Spending chart&#10;        self.chart_view = QChartView()&#10;        self.chart_view.setMinimumHeight(300)&#10;        layout.addWidget(self.chart_view)&#10;&#10;    def setup_budget_vs_actual_tab(self, tab):&#10;        &quot;&quot;&quot;Set up the budget vs actual tab with category-specific tables&quot;&quot;&quot;&#10;        layout = QVBoxLayout(tab)&#10;&#10;        # Instructions&#10;        instructions = QLabel(&#10;            &quot;This tab shows detailed budget vs actual analysis for each category. &quot;&#10;            &quot;Each category displays subcategories with estimates vs actual spending by person.&quot;&#10;        )&#10;        instructions.setWordWrap(True)&#10;        instructions.setStyleSheet(&quot;color: #666; margin-bottom: 10px; font-size: 12px;&quot;)&#10;        layout.addWidget(instructions)&#10;&#10;        # Controls section&#10;        controls_layout = QHBoxLayout()&#10;&#10;        # Refresh button&#10;        refresh_btn = QPushButton(&quot;Refresh Analysis&quot;)&#10;        refresh_btn.clicked.connect(self.refresh_budget_vs_actual_data)&#10;        refresh_btn.setStyleSheet(&quot;&quot;&quot;&#10;            QPushButton {&#10;                background-color: #2c5530;&#10;                color: white;&#10;                padding: 8px 16px;&#10;                font-weight: bold;&#10;                border-radius: 4px;&#10;            }&#10;            QPushButton:hover {&#10;                background-color: #38663d;&#10;            }&#10;        &quot;&quot;&quot;)&#10;        controls_layout.addWidget(refresh_btn)&#10;        controls_layout.addStretch()&#10;&#10;        layout.addLayout(controls_layout)&#10;&#10;        # Create scroll area for category tables&#10;        scroll_area = QScrollArea()&#10;        scroll_area.setWidgetResizable(True)&#10;        scroll_area.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAsNeeded)&#10;        scroll_area.setVerticalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAsNeeded)&#10;&#10;        # Widget to contain all category tables&#10;        self.categories_widget = QWidget()&#10;        self.categories_layout = QVBoxLayout(self.categories_widget)&#10;        self.categories_layout.setSpacing(15)&#10;&#10;        scroll_area.setWidget(self.categories_widget)&#10;        layout.addWidget(scroll_area)&#10;&#10;        # Store references to category tables for updates&#10;        self.category_tables = {}&#10;&#10;    def setup_unrealized_tab(self, tab):&#10;        &quot;&quot;&quot;Set up the unrealized expenses tab&quot;&quot;&quot;&#10;        layout = QVBoxLayout(tab)&#10;&#10;        # Instructions&#10;        instructions = QLabel(&quot;This shows expenses that haven't been taken out of the joint checking account yet.&quot;)&#10;        instructions.setWordWrap(True)&#10;        instructions.setStyleSheet(&quot;color: #666; margin-bottom: 10px;&quot;)&#10;        layout.addWidget(instructions)&#10;&#10;        # Summary section for unrealized expenses&#10;        summary_layout = QHBoxLayout()&#10;&#10;        # Unrealized expenses summary&#10;        unrealized_group = QGroupBox(&quot;Unrealized Expenses to Withdraw&quot;)&#10;        unrealized_layout = QVBoxLayout()&#10;        self.jeff_unrealized_label = QLabel(&quot;Jeff: $0.00&quot;)&#10;        self.vanessa_unrealized_label = QLabel(&quot;Vanessa: $0.00&quot;)&#10;        self.total_unrealized_label = QLabel(&quot;Total to Withdraw: $0.00&quot;)&#10;        self.total_unrealized_label.setStyleSheet(&quot;font-weight: bold; font-size: 14px; color: #d32f2f;&quot;)&#10;        unrealized_layout.addWidget(self.jeff_unrealized_label)&#10;        unrealized_layout.addWidget(self.vanessa_unrealized_label)&#10;        unrealized_layout.addWidget(QLabel(&quot;&quot;))  # Spacer&#10;        unrealized_layout.addWidget(self.total_unrealized_label)&#10;        unrealized_group.setLayout(unrealized_layout)&#10;        summary_layout.addWidget(unrealized_group)&#10;        summary_layout.addStretch()&#10;&#10;        layout.addLayout(summary_layout)&#10;&#10;        # Unrealized expenses table&#10;        self.unrealized_table = QTableWidget()&#10;        self.unrealized_table.setColumnCount(7)&#10;        self.unrealized_table.setHorizontalHeaderLabels([&#10;            &quot;Date&quot;, &quot;Person&quot;, &quot;Amount&quot;, &quot;Category&quot;, &quot;Subcategory&quot;, &quot;Description&quot;, &quot;Actions&quot;&#10;        ])&#10;        self.unrealized_table.horizontalHeader().setStretchLastSection(True)&#10;        self.unrealized_table.setAlternatingRowColors(True)&#10;        layout.addWidget(self.unrealized_table)&#10;&#10;    def refresh_data(self):&#10;        &quot;&quot;&quot;Refresh presentation data for all tabs&quot;&quot;&quot;&#10;        self.refresh_overview_data()&#10;        self.refresh_budget_vs_actual_data()&#10;        self.refresh_unrealized_data()&#10;&#10;    def refresh_overview_data(self):&#10;        &quot;&quot;&quot;Refresh data for the overview tab&quot;&quot;&quot;&#10;        # Get selected month range&#10;        selected_date = self.month_selector.date()&#10;        month_start = selected_date.toString(&quot;yyyy-MM-01&quot;)&#10;        month_end = selected_date.addMonths(1).addDays(-1).toString(&quot;yyyy-MM-dd&quot;)&#10;&#10;        # Get income by person&#10;        cursor = self.db.execute('''&#10;            SELECT person, COALESCE(SUM(amount), 0) as total&#10;            FROM income&#10;            WHERE date &gt;= ? AND date &lt;= ?&#10;            GROUP BY person&#10;        ''', (month_start, month_end))&#10;&#10;        income_by_person = {row['person']: row['total'] for row in cursor.fetchall()}&#10;        jeff_income = income_by_person.get('Jeff', 0)&#10;        vanessa_income = income_by_person.get('Vanessa', 0)&#10;        total_income = jeff_income + vanessa_income&#10;&#10;        self.jeff_income_label.setText(f&quot;Jeff: ${jeff_income:,.2f}&quot;)&#10;        self.vanessa_income_label.setText(f&quot;Vanessa: ${vanessa_income:,.2f}&quot;)&#10;        self.total_income_label.setText(f&quot;Total: ${total_income:,.2f}&quot;)&#10;&#10;        # Get expenses by person&#10;        cursor = self.db.execute('''&#10;            SELECT person, COALESCE(SUM(amount), 0) as total&#10;            FROM expenses&#10;            WHERE date &gt;= ? AND date &lt;= ?&#10;            GROUP BY person&#10;        ''', (month_start, month_end))&#10;        &#10;        expenses_by_person = {row['person']: row['total'] for row in cursor.fetchall()}&#10;        jeff_expenses = expenses_by_person.get('Jeff', 0)&#10;        vanessa_expenses = expenses_by_person.get('Vanessa', 0)&#10;        total_expenses = jeff_expenses + vanessa_expenses&#10;&#10;        self.jeff_expense_label.setText(f&quot;Jeff: ${jeff_expenses:,.2f}&quot;)&#10;        self.vanessa_expense_label.setText(f&quot;Vanessa: ${vanessa_expenses:,.2f}&quot;)&#10;        self.total_expense_label.setText(f&quot;Total: ${total_expenses:,.2f}&quot;)&#10;&#10;        # Update category table&#10;        categories = ExpenseModel.get_by_category(self.db, month_start, month_end)&#10;&#10;        self.category_table.setRowCount(len(categories))&#10;        for i, cat in enumerate(categories):&#10;            self.category_table.setItem(i, 0, QTableWidgetItem(cat['category']))&#10;            self.category_table.setItem(i, 1, QTableWidgetItem(cat['subcategory'] or &quot;&quot;))&#10;            self.category_table.setItem(i, 2, QTableWidgetItem(&quot;$0.00&quot;))  # Budgeted placeholder&#10;            self.category_table.setItem(i, 3, QTableWidgetItem(f&quot;${cat['total']:.2f}&quot;))&#10;&#10;            variance = 0 - cat['total']  # Since no budget set&#10;            variance_item = QTableWidgetItem(f&quot;${variance:.2f}&quot;)&#10;            if variance &lt; 0:&#10;                variance_item.setForeground(QColor(244, 67, 54))&#10;            else:&#10;                variance_item.setForeground(QColor(76, 175, 80))&#10;            self.category_table.setItem(i, 4, variance_item)&#10;&#10;        # Update chart&#10;        self.update_spending_chart(month_start, month_end)&#10;&#10;    def refresh_budget_vs_actual_data(self):&#10;        &quot;&quot;&quot;Refresh data for the budget vs actual tab with category-specific tables&quot;&quot;&quot;&#10;        # Get selected month range&#10;        selected_date = self.month_selector.date()&#10;        month_start = selected_date.toString(&quot;yyyy-MM-01&quot;)&#10;        month_end = selected_date.addMonths(1).addDays(-1).toString(&quot;yyyy-MM-dd&quot;)&#10;&#10;        # Clear existing tables&#10;        for i in reversed(range(self.categories_layout.count())):&#10;            child = self.categories_layout.itemAt(i).widget()&#10;            if child:&#10;                child.setParent(None)&#10;        self.category_tables.clear()&#10;&#10;        # Get all categories and their subcategories&#10;        categories_data = self.category_manager.get_categories()&#10;        &#10;        # Get actual expenses by category, subcategory, and person&#10;        cursor = self.db.execute('''&#10;            SELECT &#10;                category,&#10;                subcategory,&#10;                person,&#10;                COALESCE(SUM(amount), 0) as total&#10;            FROM expenses&#10;            WHERE date &gt;= ? AND date &lt;= ?&#10;            GROUP BY category, subcategory, person&#10;            ORDER BY category, subcategory, person&#10;        ''', (month_start, month_end))&#10;        &#10;        actual_expenses = {}&#10;        for row in cursor.fetchall():&#10;            key = (row['category'], row['subcategory'])&#10;            if key not in actual_expenses:&#10;                actual_expenses[key] = {'Jeff': 0, 'Vanessa': 0}&#10;            actual_expenses[key][row['person']] = row['total']&#10;&#10;        # Get budget targets (if they exist)&#10;        year = selected_date.year()&#10;        month = selected_date.month()&#10;        cursor = self.db.execute('''&#10;            SELECT category, subcategory, monthly_target&#10;            FROM budget_targets&#10;            WHERE year = ? AND month = ?&#10;        ''', (year, month))&#10;        &#10;        budget_targets = {}&#10;        for row in cursor.fetchall():&#10;            key = (row['category'], row['subcategory'])&#10;            budget_targets[key] = row['monthly_target']&#10;&#10;        # Create tables for each category that has either expenses or budget&#10;        all_category_keys = set(actual_expenses.keys()) | set(budget_targets.keys())&#10;        categories_with_data = {}&#10;        &#10;        for key in all_category_keys:&#10;            category = key[0]&#10;            if category not in categories_with_data:&#10;                categories_with_data[category] = []&#10;            categories_with_data[category].append(key[1])&#10;&#10;        # Add categories from category manager that don't have data but should be shown&#10;        for category, subcategories in categories_data.items():&#10;            if category not in categories_with_data:&#10;                categories_with_data[category] = subcategories&#10;            else:&#10;                # Add any missing subcategories&#10;                for subcat in subcategories:&#10;                    if subcat not in categories_with_data[category]:&#10;                        categories_with_data[category].append(subcat)&#10;&#10;        # Create tables for each category&#10;        for category, subcategories in categories_with_data.items():&#10;            self.create_category_table(category, subcategories, actual_expenses, budget_targets)&#10;&#10;        # Add stretch at the end&#10;        self.categories_layout.addStretch()&#10;&#10;    def create_category_table(self, category, subcategories, actual_expenses, budget_targets):&#10;        &quot;&quot;&quot;Create a table for a specific category&quot;&quot;&quot;&#10;        # Create group box for the category&#10;        category_group = QGroupBox(f&quot;{category} - Budget vs Actual&quot;)&#10;        category_group.setStyleSheet(&quot;&quot;&quot;&#10;            QGroupBox {&#10;                font-weight: bold;&#10;                font-size: 14px;&#10;                color: #2c5530;&#10;                border: 3px solid #2c5530;&#10;                border-radius: 8px;&#10;                margin-top: 10px;&#10;                padding-top: 15px;&#10;                background-color: #fffef8;&#10;            }&#10;            QGroupBox::title {&#10;                subcontrol-origin: margin;&#10;                left: 15px;&#10;                padding: 0 10px;&#10;                background-color: #fffef8;&#10;                color: #2c5530;&#10;                font-weight: bold;&#10;                font-size: 14px;&#10;            }&#10;        &quot;&quot;&quot;)&#10;        &#10;        category_layout = QVBoxLayout(category_group)&#10;        &#10;        # Create table for this category&#10;        table = QTableWidget()&#10;        table.setColumnCount(6)&#10;        table.setHorizontalHeaderLabels([&#10;            &quot;Subcategory&quot;, &quot;Estimate&quot;, &quot;Jeff's Expenses&quot;, &quot;Vanessa's Expenses&quot;, &quot;Total Actual&quot;, &quot;Variance&quot;&#10;        ])&#10;        &#10;        # Set column widths&#10;        header = table.horizontalHeader()&#10;        header.setSectionResizeMode(0, QHeaderView.ResizeMode.Stretch)  # Subcategory&#10;        header.setSectionResizeMode(1, QHeaderView.ResizeMode.Fixed)    # Estimate&#10;        header.setSectionResizeMode(2, QHeaderView.ResizeMode.Fixed)    # Jeff&#10;        header.setSectionResizeMode(3, QHeaderView.ResizeMode.Fixed)    # Vanessa&#10;        header.setSectionResizeMode(4, QHeaderView.ResizeMode.Fixed)    # Total&#10;        header.setSectionResizeMode(5, QHeaderView.ResizeMode.Fixed)    # Variance&#10;        &#10;        table.setColumnWidth(1, 100)  # Estimate&#10;        table.setColumnWidth(2, 120)  # Jeff&#10;        table.setColumnWidth(3, 120)  # Vanessa&#10;        table.setColumnWidth(4, 100)  # Total&#10;        table.setColumnWidth(5, 100)  # Variance&#10;        &#10;        # Style the table&#10;        table.setAlternatingRowColors(True)&#10;        table.setStyleSheet(&quot;&quot;&quot;&#10;            QTableWidget {&#10;                background-color: #fffef8;&#10;                alternate-background-color: #f8f6f0;&#10;                selection-background-color: #e6f3ff;&#10;                gridline-color: #e8e2d4;&#10;                border: 2px solid #d4c5b9;&#10;                border-radius: 4px;&#10;            }&#10;            QHeaderView::section {&#10;                background-color: #2c5530;&#10;                color: white;&#10;                padding: 8px;&#10;                border: 1px solid #1e3d24;&#10;                font-weight: bold;&#10;                font-size: 11px;&#10;            }&#10;            QTableWidget::item {&#10;                padding: 6px;&#10;                border: none;&#10;                color: #2d3748;&#10;            }&#10;        &quot;&quot;&quot;)&#10;        &#10;        # Populate table with subcategories&#10;        table.setRowCount(len(subcategories))&#10;        category_totals = {'estimate': 0, 'jeff': 0, 'vanessa': 0, 'actual': 0, 'variance': 0}&#10;        &#10;        for i, subcategory in enumerate(subcategories):&#10;            # Subcategory name&#10;            table.setItem(i, 0, QTableWidgetItem(subcategory))&#10;            &#10;            # Get budget estimate (default to 0 if no budget set)&#10;            key = (category, subcategory)&#10;            estimate = budget_targets.get(key, 0)&#10;            table.setItem(i, 1, QTableWidgetItem(f&quot;${estimate:,.2f}&quot;))&#10;            &#10;            # Get actual expenses&#10;            jeff_actual = actual_expenses.get(key, {}).get('Jeff', 0)&#10;            vanessa_actual = actual_expenses.get(key, {}).get('Vanessa', 0)&#10;            total_actual = jeff_actual + vanessa_actual&#10;            &#10;            # Jeff's expenses&#10;            jeff_item = QTableWidgetItem(f&quot;${jeff_actual:,.2f}&quot;)&#10;            if jeff_actual &gt; 0:&#10;                jeff_item.setForeground(QColor(200, 50, 50))  # Red for expenses&#10;            table.setItem(i, 2, jeff_item)&#10;            &#10;            # Vanessa's expenses&#10;            vanessa_item = QTableWidgetItem(f&quot;${vanessa_actual:,.2f}&quot;)&#10;            if vanessa_actual &gt; 0:&#10;                vanessa_item.setForeground(QColor(200, 50, 50))  # Red for expenses&#10;            table.setItem(i, 3, vanessa_item)&#10;            &#10;            # Total actual&#10;            total_item = QTableWidgetItem(f&quot;${total_actual:,.2f}&quot;)&#10;            if total_actual &gt; 0:&#10;                total_item.setForeground(QColor(200, 50, 50))  # Red for expenses&#10;                total_item.setFont(QFont(&quot;Arial&quot;, -1, QFont.Weight.Bold))&#10;            table.setItem(i, 4, total_item)&#10;            &#10;            # Variance (Estimate - Actual)&#10;            variance = estimate - total_actual&#10;            variance_item = QTableWidgetItem(f&quot;${variance:,.2f}&quot;)&#10;            if variance &lt; 0:&#10;                variance_item.setForeground(QColor(200, 50, 50))  # Red for over budget&#10;                variance_item.setFont(QFont(&quot;Arial&quot;, -1, QFont.Weight.Bold))&#10;            else:&#10;                variance_item.setForeground(QColor(50, 150, 50))  # Green for under budget&#10;            table.setItem(i, 5, variance_item)&#10;            &#10;            # Add to category totals&#10;            category_totals['estimate'] += estimate&#10;            category_totals['jeff'] += jeff_actual&#10;            category_totals['vanessa'] += vanessa_actual&#10;            category_totals['actual'] += total_actual&#10;            category_totals['variance'] += variance&#10;        &#10;        # Add totals row&#10;        totals_row = table.rowCount()&#10;        table.insertRow(totals_row)&#10;        &#10;        # Style totals row&#10;        total_font = QFont(&quot;Arial&quot;, -1, QFont.Weight.Bold)&#10;        &#10;        total_label = QTableWidgetItem(&quot;TOTAL&quot;)&#10;        total_label.setFont(total_font)&#10;        total_label.setBackground(QColor(230, 230, 230))&#10;        table.setItem(totals_row, 0, total_label)&#10;        &#10;        estimate_total = QTableWidgetItem(f&quot;${category_totals['estimate']:,.2f}&quot;)&#10;        estimate_total.setFont(total_font)&#10;        estimate_total.setBackground(QColor(230, 230, 230))&#10;        table.setItem(totals_row, 1, estimate_total)&#10;        &#10;        jeff_total = QTableWidgetItem(f&quot;${category_totals['jeff']:,.2f}&quot;)&#10;        jeff_total.setFont(total_font)&#10;        jeff_total.setBackground(QColor(230, 230, 230))&#10;        jeff_total.setForeground(QColor(200, 50, 50))&#10;        table.setItem(totals_row, 2, jeff_total)&#10;        &#10;        vanessa_total = QTableWidgetItem(f&quot;${category_totals['vanessa']:,.2f}&quot;)&#10;        vanessa_total.setFont(total_font)&#10;        vanessa_total.setBackground(QColor(230, 230, 230))&#10;        vanessa_total.setForeground(QColor(200, 50, 50))&#10;        table.setItem(totals_row, 3, vanessa_total)&#10;        &#10;        actual_total = QTableWidgetItem(f&quot;${category_totals['actual']:,.2f}&quot;)&#10;        actual_total.setFont(total_font)&#10;        actual_total.setBackground(QColor(230, 230, 230))&#10;        actual_total.setForeground(QColor(200, 50, 50))&#10;        table.setItem(totals_row, 4, actual_total)&#10;        &#10;        variance_total = QTableWidgetItem(f&quot;${category_totals['variance']:,.2f}&quot;)&#10;        variance_total.setFont(total_font)&#10;        variance_total.setBackground(QColor(230, 230, 230))&#10;        if category_totals['variance'] &lt; 0:&#10;            variance_total.setForeground(QColor(200, 50, 50))&#10;        else:&#10;            variance_total.setForeground(QColor(50, 150, 50))&#10;        table.setItem(totals_row, 5, variance_total)&#10;        &#10;        # Set table height based on content&#10;        table.resizeRowsToContents()&#10;        table_height = table.verticalHeader().length() + table.horizontalHeader().height() + 20&#10;        table.setMaximumHeight(min(table_height, 300))  # Cap at 300px&#10;        table.setMinimumHeight(min(table_height, 150))  # Minimum 150px&#10;        &#10;        category_layout.addWidget(table)&#10;        &#10;        # Store table reference&#10;        self.category_tables[category] = table&#10;        &#10;        # Add to main layout&#10;        self.categories_layout.addWidget(category_group)&#10;&#10;    def refresh_unrealized_data(self):&#10;        &quot;&quot;&quot;Refresh data for the unrealized expenses tab&quot;&quot;&quot;&#10;        # Get selected month range&#10;        selected_date = self.month_selector.date()&#10;        month_start = selected_date.toString(&quot;yyyy-MM-01&quot;)&#10;        month_end = selected_date.addMonths(1).addDays(-1).toString(&quot;yyyy-MM-dd&quot;)&#10;&#10;        # Get unrealized expenses by person&#10;        unrealized_by_person = ExpenseModel.get_unrealized_by_person(self.db, month_start, month_end)&#10;        unrealized_dict = {row['person']: row['total'] for row in unrealized_by_person}&#10;&#10;        jeff_unrealized = unrealized_dict.get('Jeff', 0)&#10;        vanessa_unrealized = unrealized_dict.get('Vanessa', 0)&#10;        total_unrealized = jeff_unrealized + vanessa_unrealized&#10;&#10;        self.jeff_unrealized_label.setText(f&quot;Jeff: ${jeff_unrealized:,.2f}&quot;)&#10;        self.vanessa_unrealized_label.setText(f&quot;Vanessa: ${vanessa_unrealized:,.2f}&quot;)&#10;        self.total_unrealized_label.setText(f&quot;Total to Withdraw: ${total_unrealized:,.2f}&quot;)&#10;&#10;        # Get all unrealized expenses&#10;        unrealized_expenses = ExpenseModel.get_unrealized_expenses(self.db, month_start, month_end)&#10;&#10;        self.unrealized_table.setRowCount(len(unrealized_expenses))&#10;        for i, expense in enumerate(unrealized_expenses):&#10;            self.unrealized_table.setItem(i, 0, QTableWidgetItem(expense['date']))&#10;            self.unrealized_table.setItem(i, 1, QTableWidgetItem(expense['person']))&#10;            self.unrealized_table.setItem(i, 2, QTableWidgetItem(f&quot;${expense['amount']:.2f}&quot;))&#10;            self.unrealized_table.setItem(i, 3, QTableWidgetItem(expense['category']))&#10;            self.unrealized_table.setItem(i, 4, QTableWidgetItem(expense['subcategory'] or &quot;&quot;))&#10;            self.unrealized_table.setItem(i, 5, QTableWidgetItem(expense['description'] or &quot;&quot;))&#10;&#10;            # Add &quot;Mark as Realized&quot; button&#10;            mark_button = QPushButton(&quot;Mark as Realized&quot;)&#10;            mark_button.clicked.connect(lambda checked, exp_id=expense['id']: self.mark_expense_realized(exp_id))&#10;            mark_button.setStyleSheet(&quot;QPushButton { background-color: #4CAF50; color: white; border: none; padding: 5px; }&quot;)&#10;            self.unrealized_table.setCellWidget(i, 6, mark_button)&#10;&#10;    def mark_expense_realized(self, expense_id):&#10;        &quot;&quot;&quot;Mark an expense as realized and refresh the data&quot;&quot;&quot;&#10;        ExpenseModel.mark_as_realized(self.db, expense_id)&#10;        self.refresh_unrealized_data()&#10;&#10;        # Show confirmation message&#10;        QMessageBox.information(self, &quot;Success&quot;, &quot;Expense marked as realized!&quot;)&#10;&#10;    def update_spending_chart(self, month_start, month_end):&#10;        &quot;&quot;&quot;Update spending pie chart for overview tab&quot;&quot;&quot;&#10;        # Get category data&#10;        categories = ExpenseModel.get_by_category(self.db, month_start, month_end)&#10;&#10;        if not categories:&#10;            # Clear chart if no data&#10;            self.chart_view.setChart(QChart())&#10;            return&#10;&#10;        # Create pie series&#10;        series = QPieSeries()&#10;&#10;        for cat in categories:&#10;            slice_label = f&quot;{cat['category']}&quot;&#10;            if cat['subcategory']:&#10;                slice_label += f&quot; - {cat['subcategory']}&quot;&#10;            series.append(slice_label, cat['total'])&#10;&#10;        # Create chart&#10;        chart = QChart()&#10;        chart.addSeries(series)&#10;        chart.setTitle(&quot;Monthly Spending by Category&quot;)&#10;        chart.legend().setVisible(True)&#10;        chart.legend().setAlignment(Qt.AlignmentFlag.AlignRight)&#10;&#10;        self.chart_view.setChart(chart)&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gui/utils/bulk_import_dialog.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gui/utils/bulk_import_dialog.py" />
              <option name="originalContent" value="&quot;&quot;&quot;&#10;Bulk Import Preview Dialog&#10;Allows users to review and edit expense categories before importing&#10;&quot;&quot;&quot;&#10;&#10;from PyQt6.QtWidgets import (&#10;    QDialog, QVBoxLayout, QHBoxLayout, QLabel, QPushButton,&#10;    QTableWidget, QTableWidgetItem, QComboBox, QHeaderView,&#10;    QDialogButtonBox, QMessageBox, QCheckBox, QGroupBox&#10;from typing import List, Dict&#10;&#10;&#10;        button_layout.addStretch()&#10;            person_combo.setCurrentText(expense['person'])&#10;            self.table.setCellWidget(row, 2, person_combo)&#10;&#10;            # Amount&#10;            amount_item = QTableWidgetItem(f&quot;${expense['amount']:,.2f}&quot;)&#10;            amount_item.setTextAlignment(Qt.AlignmentFlag.AlignRight | Qt.AlignmentFlag.AlignVCenter)&#10;            self.table.setItem(row, 3, amount_item)&#10;        self.categories_data = categories_data&#10;&#10;            # Category&#10;&#10;            # Subcategory&#10;            subcategory_combo = QComboBox()&#10;            if expense['category'] in self.categories_data:&#10;                subcategory_combo.addItems(self.categories_data[expense['category']])&#10;                if expense['subcategory'] in self.categories_data[expense['category']]:&#10;                    subcategory_combo.setCurrentText(expense['subcategory'])&#10;            self.table.setCellWidget(row, 6, subcategory_combo)&#10;&#10;            # Payment Method&#10;            payment_combo = QComboBox()&#10;            payment_combo.addItems([&quot;Cash&quot;, &quot;Credit Card&quot;, &quot;Debit Card&quot;, &quot;Check&quot;, &quot;Transfer&quot;, &quot;Other&quot;])&#10;            payment_combo.setCurrentText(expense.get('payment_method', 'Credit Card'))&#10;            self.table.setCellWidget(row, 7, payment_combo)&#10;&#10;    def on_category_changed(self, row: int, category: str):&#10;        &quot;&quot;&quot;Update subcategory options when category changes&quot;&quot;&quot;&#10;        subcategory_combo = self.table.cellWidget(row, 6)&#10;        if subcategory_combo and category in self.categories_data:&#10;            subcategory_combo.addItems(self.categories_data[category])&#10;&#10;    def select_all(self):&#10;        &quot;&quot;&quot;Select all items for import&quot;&quot;&quot;&#10;        for row in range(self.table.rowCount()):&#10;            checkbox = self.table.cellWidget(row, 0)&#10;            if checkbox:&#10;                checkbox.setChecked(True)&#10;&#10;    def select_none(self):&#10;        &quot;&quot;&quot;Deselect all items&quot;&quot;&quot;&#10;        for row in range(self.table.rowCount()):&#10;            checkbox = self.table.cellWidget(row, 0)&#10;            if checkbox:&#10;                checkbox.setChecked(False)&#10;&#10;    def update_summary(self):&#10;        &quot;&quot;&quot;Update the summary labels&quot;&quot;&quot;&#10;        selected_count = 0&#10;        selected_amount = 0.0&#10;            # Category&#10;&#10;            # Subcategory&#10;            subcategory_combo = QComboBox()&#10;&#10;    def get_selected_expenses(self) -&gt; List[Dict]:&#10;        &quot;&quot;&quot;Get the list of selected and edited expenses&quot;&quot;&quot;&#10;        selected_expenses = []&#10;&#10;        for row in range(self.table.rowCount()):&#10;            checkbox = self.table.cellWidget(row, 0)&#10;            if checkbox and checkbox.isChecked():&#10;                # Get updated values from the UI&#10;                person_combo = self.table.cellWidget(row, 2)&#10;                category_combo = self.table.cellWidget(row, 5)&#10;                subcategory_combo = self.table.cellWidget(row, 6)&#10;                payment_combo = self.table.cellWidget(row, 7)&#10;&#10;                expense = self.expenses[row].copy()&#10;                expense['subcategory'] = subcategory_combo.currentText()&#10;                expense['payment_method'] = payment_combo.currentText()&#10;&#10;        return selected_expenses&#10;" />
              <option name="updatedContent" value="&quot;&quot;&quot;&#10;Bulk Import Preview Dialog&#10;Allows users to review and edit expense categories before importing&#10;&quot;&quot;&quot;&#10;&#10;from PyQt6.QtWidgets import (&#10;    QDialog, QVBoxLayout, QHBoxLayout, QLabel, QPushButton,&#10;    QTableWidget, QTableWidgetItem, QComboBox, QHeaderView,&#10;    QDialogButtonBox, QMessageBox, QCheckBox, QGroupBox,&#10;    QInputDialog, QLineEdit&#10;)&#10;from PyQt6.QtCore import Qt&#10;from PyQt6.QtGui import QFont&#10;from typing import List, Dict&#10;from database.category_manager import get_category_manager&#10;&#10;class CustomComboBox(QComboBox):&#10;    &quot;&quot;&quot;Custom ComboBox that allows adding new items&quot;&quot;&quot;&#10;    &#10;    def __init__(self, parent=None, category_manager=None, is_subcategory=False, category_combo=None):&#10;        super().__init__(parent)&#10;        self.category_manager = category_manager&#10;        self.is_subcategory = is_subcategory&#10;        self.category_combo = category_combo&#10;        self.setEditable(True)&#10;        self.lineEdit().returnPressed.connect(self.add_new_item)&#10;        &#10;    def add_new_item(self):&#10;        &quot;&quot;&quot;Add a new item when user presses Enter&quot;&quot;&quot;&#10;        new_text = self.lineEdit().text().strip()&#10;        if not new_text:&#10;            return&#10;            &#10;        if self.is_subcategory and self.category_combo:&#10;            # Adding new subcategory&#10;            category = self.category_combo.currentText()&#10;            if category and self.category_manager:&#10;                if self.category_manager.add_subcategory(category, new_text):&#10;                    self.addItem(new_text)&#10;                    self.setCurrentText(new_text)&#10;                    QMessageBox.information(self, &quot;Success&quot;, f&quot;Added new subcategory '{new_text}' to '{category}'&quot;)&#10;                else:&#10;                    QMessageBox.warning(self, &quot;Error&quot;, f&quot;Could not add subcategory '{new_text}' (may already exist)&quot;)&#10;        else:&#10;            # Adding new category&#10;            if self.category_manager and self.category_manager.add_category(new_text):&#10;                self.addItem(new_text)&#10;                self.setCurrentText(new_text)&#10;                QMessageBox.information(self, &quot;Success&quot;, f&quot;Added new category '{new_text}'&quot;)&#10;            else:&#10;                QMessageBox.warning(self, &quot;Error&quot;, f&quot;Could not add category '{new_text}' (may already exist)&quot;)&#10;&#10;class BulkImportPreviewDialog(QDialog):&#10;    &quot;&quot;&quot;Dialog for previewing and editing bulk import data&quot;&quot;&quot;&#10;&#10;    def __init__(self, expenses: List[Dict], categories_data: Dict[str, List[str]], parent=None):&#10;        super().__init__(parent)&#10;        self.expenses = expenses&#10;        self.category_manager = get_category_manager()&#10;        # Refresh categories to get latest data&#10;        self.categories_data = self.category_manager.get_categories()&#10;        self.init_ui()&#10;        self.populate_table()&#10;&#10;    def init_ui(self):&#10;        &quot;&quot;&quot;Initialize the UI&quot;&quot;&quot;&#10;        self.setWindowTitle(&quot;Import Preview - Review Categories&quot;)&#10;        self.setModal(True)&#10;        self.resize(1200, 600)&#10;&#10;        layout = QVBoxLayout()&#10;&#10;        # Header&#10;        header_label = QLabel(&quot;Review and Edit Categories Before Import&quot;)&#10;        header_label.setFont(QFont(&quot;Arial&quot;, 14, QFont.Weight.Bold))&#10;        header_label.setAlignment(Qt.AlignmentFlag.AlignCenter)&#10;        layout.addWidget(header_label)&#10;&#10;        # Instructions&#10;        instructions = QLabel(&#10;            &quot;Review the automatically assigned categories below. &quot;&#10;            &quot;Click on category or subcategory cells to change them. &quot;&#10;            &quot;Type new categories/subcategories and press Enter to add them. &quot;&#10;            &quot;Uncheck items you don't want to import.&quot;&#10;        )&#10;        instructions.setWordWrap(True)&#10;        instructions.setStyleSheet(&quot;color: #666; padding: 10px;&quot;)&#10;        layout.addWidget(instructions)&#10;&#10;        # Summary&#10;        summary_group = QGroupBox(&quot;Import Summary&quot;)&#10;        summary_layout = QHBoxLayout()&#10;&#10;        self.total_label = QLabel(f&quot;Total Items: {len(self.expenses)}&quot;)&#10;        self.selected_label = QLabel(f&quot;Selected: {len(self.expenses)}&quot;)&#10;        self.amount_label = QLabel(f&quot;Total Amount: ${sum(exp['amount'] for exp in self.expenses):,.2f}&quot;)&#10;&#10;        summary_layout.addWidget(self.total_label)&#10;        summary_layout.addWidget(self.selected_label)&#10;        summary_layout.addWidget(self.amount_label)&#10;        summary_layout.addStretch()&#10;&#10;        summary_group.setLayout(summary_layout)&#10;        layout.addWidget(summary_group)&#10;&#10;        # Table&#10;        self.table = QTableWidget()&#10;        self.table.setColumnCount(8)&#10;        self.table.setHorizontalHeaderLabels([&#10;            &quot;Import&quot;, &quot;Date&quot;, &quot;Person&quot;, &quot;Amount&quot;, &quot;Description&quot;,&#10;            &quot;Category&quot;, &quot;Subcategory&quot;, &quot;Payment Method&quot;&#10;        ])&#10;&#10;        # Set column widths&#10;        header = self.table.horizontalHeader()&#10;        header.setSectionResizeMode(0, QHeaderView.ResizeMode.Fixed)  # Import checkbox&#10;        header.setSectionResizeMode(1, QHeaderView.ResizeMode.Fixed)  # Date&#10;        header.setSectionResizeMode(2, QHeaderView.ResizeMode.Fixed)  # Person&#10;        header.setSectionResizeMode(3, QHeaderView.ResizeMode.Fixed)  # Amount&#10;        header.setSectionResizeMode(4, QHeaderView.ResizeMode.Stretch)  # Description&#10;        header.setSectionResizeMode(5, QHeaderView.ResizeMode.Interactive)  # Category&#10;        header.setSectionResizeMode(6, QHeaderView.ResizeMode.Interactive)  # Subcategory&#10;        header.setSectionResizeMode(7, QHeaderView.ResizeMode.Fixed)  # Payment Method&#10;&#10;        self.table.setColumnWidth(0, 60)   # Import&#10;        self.table.setColumnWidth(1, 100)  # Date&#10;        self.table.setColumnWidth(2, 80)   # Person&#10;        self.table.setColumnWidth(3, 100)  # Amount&#10;        self.table.setColumnWidth(5, 120)  # Category&#10;        self.table.setColumnWidth(6, 150)  # Subcategory&#10;        self.table.setColumnWidth(7, 120)  # Payment Method&#10;&#10;        layout.addWidget(self.table)&#10;&#10;        # Buttons&#10;        button_layout = QHBoxLayout()&#10;&#10;        select_all_btn = QPushButton(&quot;Select All&quot;)&#10;        select_all_btn.clicked.connect(self.select_all)&#10;        button_layout.addWidget(select_all_btn)&#10;&#10;        select_none_btn = QPushButton(&quot;Select None&quot;)&#10;        select_none_btn.clicked.connect(self.select_none)&#10;        button_layout.addWidget(select_none_btn)&#10;&#10;        # Add refresh categories button&#10;        refresh_btn = QPushButton(&quot;Refresh Categories&quot;)&#10;        refresh_btn.clicked.connect(self.refresh_categories)&#10;        button_layout.addWidget(refresh_btn)&#10;&#10;        button_layout.addStretch()&#10;&#10;        buttons = QDialogButtonBox(&#10;            QDialogButtonBox.StandardButton.Ok | QDialogButtonBox.StandardButton.Cancel&#10;        )&#10;        buttons.accepted.connect(self.accept)&#10;        buttons.rejected.connect(self.reject)&#10;        button_layout.addWidget(buttons)&#10;&#10;        layout.addLayout(button_layout)&#10;        self.setLayout(layout)&#10;&#10;    def populate_table(self):&#10;        &quot;&quot;&quot;Populate the table with expense data&quot;&quot;&quot;&#10;        self.table.setRowCount(len(self.expenses))&#10;&#10;        for row, expense in enumerate(self.expenses):&#10;            # Import checkbox&#10;            checkbox = QCheckBox()&#10;            checkbox.setChecked(True)&#10;            checkbox.stateChanged.connect(self.update_summary)&#10;            self.table.setCellWidget(row, 0, checkbox)&#10;&#10;            # Date&#10;            self.table.setItem(row, 1, QTableWidgetItem(expense['date']))&#10;&#10;            # Person&#10;            person_combo = QComboBox()&#10;            person_combo.addItems([&quot;Jeff&quot;, &quot;Vanessa&quot;])&#10;            person_combo.setCurrentText(expense['person'])&#10;            self.table.setCellWidget(row, 2, person_combo)&#10;&#10;            # Amount&#10;            amount_item = QTableWidgetItem(f&quot;${expense['amount']:,.2f}&quot;)&#10;            amount_item.setTextAlignment(Qt.AlignmentFlag.AlignRight | Qt.AlignmentFlag.AlignVCenter)&#10;            self.table.setItem(row, 3, amount_item)&#10;&#10;            # Description&#10;            self.table.setItem(row, 4, QTableWidgetItem(expense['description']))&#10;&#10;            # Category (with ability to add new ones)&#10;            category_combo = CustomComboBox(self, self.category_manager, False)&#10;            category_combo.addItems(sorted(self.categories_data.keys()))&#10;            category_combo.setCurrentText(expense['category'])&#10;            category_combo.currentTextChanged.connect(lambda cat, r=row: self.on_category_changed(r, cat))&#10;            self.table.setCellWidget(row, 5, category_combo)&#10;&#10;            # Subcategory (with ability to add new ones)&#10;            subcategory_combo = CustomComboBox(self, self.category_manager, True, category_combo)&#10;            if expense['category'] in self.categories_data:&#10;                subcategory_combo.addItems(self.categories_data[expense['category']])&#10;                if expense['subcategory'] in self.categories_data[expense['category']]:&#10;                    subcategory_combo.setCurrentText(expense['subcategory'])&#10;            self.table.setCellWidget(row, 6, subcategory_combo)&#10;&#10;            # Payment Method&#10;            payment_combo = QComboBox()&#10;            payment_combo.addItems([&quot;Cash&quot;, &quot;Credit Card&quot;, &quot;Debit Card&quot;, &quot;Check&quot;, &quot;Transfer&quot;, &quot;Other&quot;])&#10;            payment_combo.setCurrentText(expense.get('payment_method', 'Credit Card'))&#10;            self.table.setCellWidget(row, 7, payment_combo)&#10;&#10;    def on_category_changed(self, row: int, category: str):&#10;        &quot;&quot;&quot;Update subcategory options when category changes&quot;&quot;&quot;&#10;        subcategory_combo = self.table.cellWidget(row, 6)&#10;        category_combo = self.table.cellWidget(row, 5)&#10;        &#10;        if subcategory_combo and category in self.categories_data:&#10;            subcategory_combo.clear()&#10;            subcategory_combo.addItems(self.categories_data[category])&#10;            # Update the category combo reference for the subcategory combo&#10;            subcategory_combo.category_combo = category_combo&#10;&#10;    def select_all(self):&#10;        &quot;&quot;&quot;Select all items for import&quot;&quot;&quot;&#10;        for row in range(self.table.rowCount()):&#10;            checkbox = self.table.cellWidget(row, 0)&#10;            if checkbox:&#10;                checkbox.setChecked(True)&#10;&#10;    def select_none(self):&#10;        &quot;&quot;&quot;Deselect all items&quot;&quot;&quot;&#10;        for row in range(self.table.rowCount()):&#10;            checkbox = self.table.cellWidget(row, 0)&#10;            if checkbox:&#10;                checkbox.setChecked(False)&#10;&#10;    def update_summary(self):&#10;        &quot;&quot;&quot;Update the summary labels&quot;&quot;&quot;&#10;        selected_count = 0&#10;        selected_amount = 0.0&#10;&#10;        for row in range(self.table.rowCount()):&#10;            checkbox = self.table.cellWidget(row, 0)&#10;            if checkbox and checkbox.isChecked():&#10;                selected_count += 1&#10;                selected_amount += self.expenses[row]['amount']&#10;&#10;        self.selected_label.setText(f&quot;Selected: {selected_count}&quot;)&#10;        self.amount_label.setText(f&quot;Total Amount: ${selected_amount:,.2f}&quot;)&#10;&#10;    def get_selected_expenses(self) -&gt; List[Dict]:&#10;        &quot;&quot;&quot;Get the list of selected and edited expenses&quot;&quot;&quot;&#10;        selected_expenses = []&#10;&#10;        for row in range(self.table.rowCount()):&#10;            checkbox = self.table.cellWidget(row, 0)&#10;            if checkbox and checkbox.isChecked():&#10;                # Get updated values from the UI&#10;                person_combo = self.table.cellWidget(row, 2)&#10;                category_combo = self.table.cellWidget(row, 5)&#10;                subcategory_combo = self.table.cellWidget(row, 6)&#10;                payment_combo = self.table.cellWidget(row, 7)&#10;&#10;                expense = self.expenses[row].copy()&#10;                expense['person'] = person_combo.currentText()&#10;                expense['category'] = category_combo.currentText()&#10;                expense['subcategory'] = subcategory_combo.currentText()&#10;                expense['payment_method'] = payment_combo.currentText()&#10;&#10;                selected_expenses.append(expense)&#10;&#10;        return selected_expenses&#10;&#10;    def refresh_categories(self):&#10;        &quot;&quot;&quot;Refresh categories from the category manager&quot;&quot;&quot;&#10;        self.category_manager.refresh()&#10;        self.categories_data = self.category_manager.get_categories()&#10;        &#10;        # Update all category combos&#10;        for row in range(self.table.rowCount()):&#10;            category_combo = self.table.cellWidget(row, 5)&#10;            subcategory_combo = self.table.cellWidget(row, 6)&#10;            &#10;            if category_combo:&#10;                current_category = category_combo.currentText()&#10;                category_combo.clear()&#10;                category_combo.addItems(sorted(self.categories_data.keys()))&#10;                if current_category in self.categories_data:&#10;                    category_combo.setCurrentText(current_category)&#10;            &#10;            if subcategory_combo and current_category in self.categories_data:&#10;                current_subcategory = subcategory_combo.currentText()&#10;                subcategory_combo.clear()&#10;                subcategory_combo.addItems(self.categories_data[current_category])&#10;                if current_subcategory in self.categories_data[current_category]:&#10;                    subcategory_combo.setCurrentText(current_subcategory)&#10;        &#10;        QMessageBox.information(self, &quot;Success&quot;, &quot;Categories refreshed successfully!&quot;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gui/utils/styles.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gui/utils/styles.py" />
              <option name="originalContent" value="&quot;&quot;&quot;&#10;Application styling and themes&#10;&quot;&quot;&quot;&#10;&#10;def get_app_stylesheet():&#10;    &quot;&quot;&quot;Get the main application stylesheet with enterprise/professional theme&quot;&quot;&quot;&#10;    return &quot;&quot;&quot;&#10;    /* Main Application Window - Distinct Border &amp; Blue Light Reduction */&#10;    QMainWindow {&#10;        background-color: #faf8f5;  /* Warm off-white to reduce blue light */&#10;        color: #2d3748;  /* Warmer dark gray instead of pure black */&#10;        font-family: &quot;Segoe UI&quot;, &quot;Roboto&quot;, &quot;Arial&quot;, sans-serif;&#10;        border: 4px solid #2c5530;  /* Thick dark green border for main window */&#10;        border-radius: 12px;&#10;    }&#10;    &#10;    /* Tab Widget Styling - Thicker Frames */&#10;    QTabWidget::pane {&#10;        border: 4px solid #1e3a8a;  /* Increased from 2px to 4px */&#10;        background-color: #fffef8;  /* Warm white background */&#10;        border-radius: 8px;&#10;        margin-top: 2px;&#10;    }&#10;    &#10;    QTabBar::tab {&#10;        background-color: #f0ede8;  /* Warmer tab background */&#10;        color: #4a5568;  /* Warmer text color */&#10;        padding: 12px 24px;  /* Increased padding */&#10;        margin-right: 2px;&#10;        margin-bottom: 2px;&#10;        border-top-left-radius: 8px;&#10;        border-top-right-radius: 8px;&#10;        min-width: 140px;&#10;        font-weight: 600;&#10;        border: 3px solid #d4c5b9;  /* Thicker border */&#10;    }&#10;    &#10;    QTabBar::tab:selected {&#10;        background-color: #fffef8;  /* Warm white */&#10;        border: 4px solid #1e3a8a;  /* Thicker selected border */&#10;        border-bottom: none;&#10;        color: #1e3a8a;&#10;        font-weight: bold;&#10;    }&#10;    &#10;    QTabBar::tab:hover:!selected {&#10;        background-color: #f7f1e8;  /* Warm hover color */&#10;        border-color: #3b82f6;&#10;    }&#10;    &#10;    /* Enhanced Group Box (Section Delimitation) - Much Thicker Frames */&#10;    QGroupBox {&#10;        font-weight: bold;&#10;        font-size: 14px;&#10;        color: #2c5530;  /* Dark green for better contrast */&#10;        border: 5px solid #2c5530;  /* Much thicker border (increased from 2px to 5px) */&#10;        border-radius: 12px;&#10;        margin-top: 1.2ex;&#10;        padding-top: 18px;&#10;        background-color: #fffef8;  /* Warm white background */&#10;        box-shadow: 0 4px 8px rgba(44, 85, 48, 0.15);  /* Enhanced shadow */&#10;    }&#10;    &#10;    QGroupBox::title {&#10;        subcontrol-origin: margin;&#10;        left: 18px;&#10;        padding: 0 12px;&#10;        background-color: #fffef8;&#10;        color: #2c5530;&#10;        font-weight: bold;&#10;        font-size: 15px;&#10;    }&#10;    &#10;    /* Table Styling - Thicker Frames */&#10;    QTableWidget {&#10;        background-color: #fffef8;  /* Warm white */&#10;        alternate-background-color: #f8f6f0;  /* Warm alternating rows */&#10;        selection-background-color: #e6f3ff;  /* Soft blue selection */&#10;        selection-color: #1e3a8a;&#10;        border: 4px solid #2c5530;  /* Thicker green border */&#10;        border-radius: 8px;&#10;        gridline-color: #e8e2d4;  /* Warm gridlines */&#10;        font-size: 13px;&#10;    }&#10;    &#10;    QHeaderView::section {&#10;        background-color: #2c5530;  /* Dark green headers */&#10;        color: #ffffff;&#10;        padding: 14px 10px;  /* Increased padding */&#10;        border: 2px solid #1e3d24;  /* Thicker header borders */&#10;        font-weight: bold;&#10;        font-size: 13px;&#10;    }&#10;    &#10;    QHeaderView::section:first {&#10;        border-top-left-radius: 6px;&#10;    }&#10;    &#10;    QHeaderView::section:last {&#10;        border-top-right-radius: 6px;&#10;    }&#10;    &#10;    /* Professional Button Styling - Thicker Borders */&#10;    QPushButton {&#10;        background-color: #2c5530;  /* Dark green buttons */&#10;        color: #ffffff;&#10;        border: 3px solid #2c5530;  /* Thicker button border */&#10;        padding: 12px 20px;  /* Increased padding */&#10;        border-radius: 8px;&#10;        font-weight: 600;&#10;        font-size: 13px;&#10;        min-width: 100px;&#10;        min-height: 24px;&#10;    }&#10;    &#10;    QPushButton:hover {&#10;        background-color: #38663d;&#10;        border-color: #38663d;&#10;        box-shadow: 0 3px 6px rgba(44, 85, 48, 0.3);&#10;    }&#10;    &#10;    QPushButton:pressed {&#10;        background-color: #1e3d24;&#10;        border-color: #1e3d24;&#10;    }&#10;    &#10;    QPushButton:disabled {&#10;        background-color: #a0a0a0;&#10;        border-color: #a0a0a0;&#10;        color: #ffffff;&#10;    }&#10;    &#10;    /* Form Elements - Thicker Borders */&#10;    QLineEdit, QComboBox, QSpinBox, QDoubleSpinBox, QDateEdit {&#10;        padding: 10px 14px;  /* Increased padding */&#10;        border: 3px solid #d4c5b9;  /* Thicker warm border */&#10;        border-radius: 8px;&#10;        background-color: #fffef8;&#10;        font-size: 13px;&#10;        min-height: 24px;&#10;        color: #2d3748;&#10;    }&#10;    &#10;    QLineEdit:focus, QComboBox:focus, QSpinBox:focus, QDoubleSpinBox:focus, QDateEdit:focus {&#10;        border-color: #2c5530;  /* Green focus border */&#10;        outline: none;&#10;        box-shadow: 0 0 0 3px rgba(44, 85, 48, 0.15);&#10;    }&#10;    &#10;    QComboBox::drop-down {&#10;        border: none;&#10;        width: 24px;&#10;    }&#10;    &#10;    QComboBox::down-arrow {&#10;        border: 2px solid #2c5530;&#10;        width: 10px;&#10;        height: 10px;&#10;        background-color: #2c5530;&#10;    }&#10;    &#10;    /* Enhanced Labels - Warmer Colors */&#10;    QLabel {&#10;        color: #4a5568;  /* Warmer gray text */&#10;        font-size: 13px;&#10;    }&#10;    &#10;    /* Professional Frames/Separators - Much Thicker */&#10;    QFrame[frameShape=&quot;4&quot;] { /* HLine */&#10;        border: none;&#10;        background-color: #2c5530;&#10;        max-height: 4px;  /* Much thicker separator */&#10;        margin: 15px 0;&#10;    }&#10;    &#10;    QFrame[frameShape=&quot;5&quot;] { /* VLine */&#10;        border: none;&#10;        background-color: #2c5530;&#10;        max-width: 4px;  /* Much thicker separator */&#10;        margin: 0 15px;&#10;    }&#10;    &#10;    /* Enhanced Chart Container - Thicker Border */&#10;    .chart-container {&#10;        background-color: #fffef8;&#10;        border: 4px solid #2c5530;  /* Much thicker chart borders */&#10;        border-radius: 12px;&#10;        padding: 20px;&#10;        margin: 8px;&#10;        box-shadow: 0 4px 8px rgba(44, 85, 48, 0.15);&#10;    }&#10;    &#10;    /* Professional Metric Cards - Thicker Borders */&#10;    .metric-card {&#10;        background-color: #fffef8;&#10;        border: 4px solid #2c5530;  /* Much thicker card borders */&#10;        border-radius: 12px;&#10;        padding: 24px;&#10;        margin: 12px;&#10;        box-shadow: 0 6px 12px rgba(44, 85, 48, 0.15);&#10;    }&#10;    &#10;    .metric-value {&#10;        font-size: 28px;&#10;        font-weight: bold;&#10;        color: #2c5530;  /* Green metric values */&#10;        margin-bottom: 8px;&#10;    }&#10;    &#10;    .metric-label {&#10;        font-size: 14px;&#10;        color: #6b7280;&#10;        font-weight: 500;&#10;        margin-top: 8px;&#10;    }&#10;    &#10;    /* Section Headers - Enhanced */&#10;    .section-header {&#10;        background-color: #2c5530;  /* Dark green headers */&#10;        color: #ffffff;&#10;        padding: 15px 18px;  /* Increased padding */&#10;        font-weight: bold;&#10;        font-size: 16px;&#10;        border-radius: 8px 8px 0 0;&#10;        margin-bottom: 0;&#10;        border: 3px solid #2c5530;&#10;    }&#10;    &#10;    /* Content Areas - Thicker Borders */&#10;    .content-section {&#10;        background-color: #fffef8;&#10;        border: 4px solid #2c5530;  /* Much thicker content borders */&#10;        border-radius: 12px;&#10;        padding: 20px;&#10;        margin: 8px;&#10;        box-shadow: 0 4px 8px rgba(44, 85, 48, 0.1);&#10;    }&#10;    &#10;    /* Enhanced Scrollbars - Thicker */&#10;    QScrollBar:vertical {&#10;        background-color: #f8f6f0;&#10;        width: 16px;  /* Thicker scrollbar */&#10;        border-radius: 8px;&#10;        border: 2px solid #d4c5b9;&#10;    }&#10;    &#10;    QScrollBar::handle:vertical {&#10;        background-color: #2c5530;&#10;        border-radius: 6px;&#10;        min-height: 30px;&#10;        border: 1px solid #1e3d24;&#10;    }&#10;    &#10;    QScrollBar::handle:vertical:hover {&#10;        background-color: #38663d;&#10;    }&#10;    &#10;    QScrollBar:horizontal {&#10;        background-color: #f8f6f0;&#10;        height: 16px;  /* Thicker scrollbar */&#10;        border-radius: 8px;&#10;        border: 2px solid #d4c5b9;&#10;    }&#10;    &#10;    QScrollBar::handle:horizontal {&#10;        background-color: #2c5530;&#10;        border-radius: 6px;&#10;        min-width: 30px;&#10;        border: 1px solid #1e3d24;&#10;    }&#10;    &#10;    QScrollBar::handle:horizontal:hover {&#10;        background-color: #38663d;&#10;    }&#10;    &#10;    /* Menu Styling - Updated Colors */&#10;    QMenuBar {&#10;        background-color: #2c5530;  /* Dark green menu bar */&#10;        color: #ffffff;&#10;        border-bottom: 3px solid #1e3d24;  /* Thicker border */&#10;        font-weight: 600;&#10;        padding: 4px;&#10;    }&#10;    &#10;    QMenuBar::item {&#10;        padding: 10px 15px;  /* Increased padding */&#10;        background-color: transparent;&#10;        border-radius: 6px;&#10;    }&#10;    &#10;    QMenuBar::item:selected {&#10;        background-color: #38663d;&#10;        border-radius: 6px;&#10;    }&#10;    &#10;    QMenu {&#10;        background-color: #fffef8;&#10;        border: 3px solid #2c5530;  /* Thicker menu border */&#10;        border-radius: 8px;&#10;        padding: 6px;&#10;    }&#10;    &#10;    QMenu::item {&#10;        padding: 10px 15px;&#10;        border-radius: 6px;&#10;        color: #2d3748;&#10;    }&#10;    &#10;    QMenu::item:selected {&#10;        background-color: #f7f1e8;&#10;        color: #2c5530;&#10;    }&#10;    &quot;&quot;&quot;&#10;&#10;def get_chart_colors():&#10;    &quot;&quot;&quot;Get consistent colors for charts - Eye-friendly warm theme&quot;&quot;&quot;&#10;    return [&#10;        '#2c5530',  # Primary Dark Green&#10;        '#38663d',  # Medium Green&#10;        '#4a7c59',  # Forest Green&#10;        '#5c9275',  # Sage Green&#10;        '#6ea891',  # Teal Green&#10;        '#8bb9a3',  # Light Green&#10;        '#7b6143',  # Warm Brown&#10;        '#9d7f5f',  # Light Brown&#10;        '#b8967b',  # Tan&#10;        '#d4c5b9',  # Warm Beige&#10;        '#8a6b47',  # Golden Brown&#10;        '#a68b5b',  # Olive&#10;    ]&#10;" />
              <option name="updatedContent" value="&quot;&quot;&quot;&#10;Application styling and themes&#10;&quot;&quot;&quot;&#10;&#10;def get_app_stylesheet():&#10;    &quot;&quot;&quot;Get the main application stylesheet with enterprise/professional theme&quot;&quot;&quot;&#10;    return &quot;&quot;&quot;&#10;    /* Main Application Window - Distinct Border &amp; Blue Light Reduction */&#10;    QMainWindow {&#10;        background-color: #faf8f5;  /* Warm off-white to reduce blue light */&#10;        color: #2d3748;  /* Warmer dark gray instead of pure black */&#10;        font-family: &quot;Segoe UI&quot;, &quot;Roboto&quot;, &quot;Arial&quot;, sans-serif;&#10;        border: 4px solid #2c5530;  /* Thick dark green border for main window */&#10;        border-radius: 12px;&#10;    }&#10;    &#10;    /* Tab Widget Styling - Thicker Frames */&#10;    QTabWidget::pane {&#10;        border: 4px solid #1e3a8a;  /* Increased from 2px to 4px */&#10;        background-color: #fffef8;  /* Warm white background */&#10;        border-radius: 8px;&#10;        margin-top: 2px;&#10;    }&#10;    &#10;    QTabBar::tab {&#10;        background-color: #f0ede8;  /* Warmer tab background */&#10;        color: #4a5568;  /* Warmer text color */&#10;        padding: 12px 24px;  /* Increased padding */&#10;        margin-right: 2px;&#10;        margin-bottom: 2px;&#10;        border-top-left-radius: 8px;&#10;        border-top-right-radius: 8px;&#10;        min-width: 140px;&#10;        font-weight: 600;&#10;        border: 3px solid #d4c5b9;  /* Thicker border */&#10;    }&#10;    &#10;    QTabBar::tab:selected {&#10;        background-color: #fffef8;  /* Warm white */&#10;        border: 4px solid #1e3a8a;  /* Thicker selected border */&#10;        border-bottom: none;&#10;        color: #1e3a8a;&#10;        font-weight: bold;&#10;    }&#10;    &#10;    QTabBar::tab:hover:!selected {&#10;        background-color: #f7f1e8;  /* Warm hover color */&#10;        border-color: #3b82f6;&#10;    }&#10;    &#10;    /* Enhanced Group Box (Section Delimitation) - Much Thicker Frames */&#10;    QGroupBox {&#10;        font-weight: bold;&#10;        font-size: 14px;&#10;        color: #2c5530;  /* Dark green for better contrast */&#10;        border: 5px solid #2c5530;  /* Much thicker border (increased from 2px to 5px) */&#10;        border-radius: 12px;&#10;        margin-top: 1.2ex;&#10;        padding-top: 18px;&#10;        background-color: #fffef8;  /* Warm white background */&#10;        box-shadow: 0 4px 8px rgba(44, 85, 48, 0.15);  /* Enhanced shadow */&#10;    }&#10;    &#10;    QGroupBox::title {&#10;        subcontrol-origin: margin;&#10;        left: 18px;&#10;        padding: 0 12px;&#10;        background-color: #fffef8;&#10;        color: #2c5530;&#10;        font-weight: bold;&#10;        font-size: 15px;&#10;    }&#10;    &#10;    /* Table Styling - Thicker Frames and FIXED TEXT VISIBILITY */&#10;    QTableWidget {&#10;        background-color: #fffef8;  /* Warm white */&#10;        alternate-background-color: #f8f6f0;  /* Warm alternating rows */&#10;        selection-background-color: #e6f3ff;  /* Soft blue selection */&#10;        selection-color: #1e3a8a;&#10;        border: 4px solid #2c5530;  /* Thicker green border */&#10;        border-radius: 8px;&#10;        gridline-color: #e8e2d4;  /* Warm gridlines */&#10;        font-size: 13px;&#10;        color: #2d3748;  /* EXPLICIT TEXT COLOR FOR VISIBILITY */&#10;    }&#10;    &#10;    /* Table Items - CRITICAL FOR TEXT VISIBILITY */&#10;    QTableWidget::item {&#10;        color: #2d3748;  /* Dark text for visibility */&#10;        background-color: transparent;&#10;        padding: 8px;&#10;        border: none;&#10;    }&#10;    &#10;    QTableWidget::item:selected {&#10;        background-color: #e6f3ff;  /* Light blue selection */&#10;        color: #1e3a8a;  /* Dark blue text when selected */&#10;    }&#10;    &#10;    QTableWidget::item:hover {&#10;        background-color: #f0f4f8;  /* Light hover effect */&#10;        color: #2d3748;&#10;    }&#10;    &#10;    QHeaderView::section {&#10;        background-color: #2c5530;  /* Dark green headers */&#10;        color: #ffffff;&#10;        padding: 14px 10px;  /* Increased padding */&#10;        border: 2px solid #1e3d24;  /* Thicker header borders */&#10;        font-weight: bold;&#10;        font-size: 13px;&#10;    }&#10;    &#10;    QHeaderView::section:first {&#10;        border-top-left-radius: 6px;&#10;    }&#10;    &#10;    QHeaderView::section:last {&#10;        border-top-right-radius: 6px;&#10;    }&#10;    &#10;    /* Professional Button Styling - Thicker Borders */&#10;    QPushButton {&#10;        background-color: #2c5530;  /* Dark green buttons */&#10;        color: #ffffff;&#10;        border: 3px solid #2c5530;  /* Thicker button border */&#10;        padding: 12px 20px;  /* Increased padding */&#10;        border-radius: 8px;&#10;        font-weight: 600;&#10;        font-size: 13px;&#10;        min-width: 100px;&#10;        min-height: 24px;&#10;    }&#10;    &#10;    QPushButton:hover {&#10;        background-color: #38663d;&#10;        border-color: #38663d;&#10;        box-shadow: 0 3px 6px rgba(44, 85, 48, 0.3);&#10;    }&#10;    &#10;    QPushButton:pressed {&#10;        background-color: #1e3d24;&#10;        border-color: #1e3d24;&#10;    }&#10;    &#10;    QPushButton:disabled {&#10;        background-color: #a0a0a0;&#10;        border-color: #a0a0a0;&#10;        color: #ffffff;&#10;    }&#10;    &#10;    /* Form Elements - Thicker Borders and FIXED TEXT VISIBILITY */&#10;    QLineEdit, QComboBox, QSpinBox, QDoubleSpinBox, QDateEdit {&#10;        padding: 10px 14px;  /* Increased padding */&#10;        border: 3px solid #d4c5b9;  /* Thicker warm border */&#10;        border-radius: 8px;&#10;        background-color: #fffef8;&#10;        font-size: 13px;&#10;        min-height: 24px;&#10;        color: #2d3748;  /* EXPLICIT TEXT COLOR FOR VISIBILITY */&#10;    }&#10;    &#10;    QLineEdit:focus, QComboBox:focus, QSpinBox:focus, QDoubleSpinBox:focus, QDateEdit:focus {&#10;        border-color: #2c5530;  /* Green focus border */&#10;        outline: none;&#10;        box-shadow: 0 0 0 3px rgba(44, 85, 48, 0.15);&#10;    }&#10;    &#10;    /* ComboBox Dropdown Styling */&#10;    QComboBox {&#10;        color: #2d3748;  /* Explicit text color */&#10;    }&#10;    &#10;    QComboBox::drop-down {&#10;        border: none;&#10;        width: 24px;&#10;        background-color: #2c5530;&#10;        border-top-right-radius: 5px;&#10;        border-bottom-right-radius: 5px;&#10;    }&#10;    &#10;    QComboBox::down-arrow {&#10;        image: none;&#10;        border-left: 5px solid transparent;&#10;        border-right: 5px solid transparent;&#10;        border-top: 5px solid #ffffff;&#10;        width: 0;&#10;        height: 0;&#10;    }&#10;    &#10;    QComboBox QAbstractItemView {&#10;        background-color: #fffef8;&#10;        color: #2d3748;  /* Dropdown item text color */&#10;        selection-background-color: #e6f3ff;&#10;        selection-color: #1e3a8a;&#10;        border: 2px solid #2c5530;&#10;        border-radius: 4px;&#10;    }&#10;    &#10;    QComboBox QAbstractItemView::item {&#10;        color: #2d3748;  /* Dropdown item text color */&#10;        padding: 8px;&#10;        min-height: 20px;&#10;    }&#10;    &#10;    QComboBox QAbstractItemView::item:hover {&#10;        background-color: #f0f4f8;&#10;        color: #2d3748;&#10;    }&#10;    &#10;    QComboBox QAbstractItemView::item:selected {&#10;        background-color: #e6f3ff;&#10;        color: #1e3a8a;&#10;    }&#10;    &#10;    /* Enhanced Labels - Warmer Colors */&#10;    QLabel {&#10;        color: #4a5568;  /* Warmer gray text */&#10;        font-size: 13px;&#10;    }&#10;    &#10;    /* Text Edit Fields */&#10;    QTextEdit {&#10;        background-color: #fffef8;&#10;        color: #2d3748;  /* EXPLICIT TEXT COLOR */&#10;        border: 3px solid #d4c5b9;&#10;        border-radius: 8px;&#10;        padding: 10px;&#10;        font-size: 13px;&#10;    }&#10;    &#10;    QTextEdit:focus {&#10;        border-color: #2c5530;&#10;        outline: none;&#10;        box-shadow: 0 0 0 3px rgba(44, 85, 48, 0.15);&#10;    }&#10;    &#10;    /* Checkbox Styling */&#10;    QCheckBox {&#10;        color: #2d3748;  /* Text color for checkbox labels */&#10;        font-size: 13px;&#10;        spacing: 8px;&#10;    }&#10;    &#10;    QCheckBox::indicator {&#10;        width: 18px;&#10;        height: 18px;&#10;        border: 2px solid #d4c5b9;&#10;        border-radius: 3px;&#10;        background-color: #fffef8;&#10;    }&#10;    &#10;    QCheckBox::indicator:hover {&#10;        border-color: #2c5530;&#10;    }&#10;    &#10;    QCheckBox::indicator:checked {&#10;        background-color: #2c5530;&#10;        border-color: #2c5530;&#10;        image: url(data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' viewBox='0 0 12 12'%3E%3Cpath fill='white' d='M10.28 2.28L4.5 8.06 1.72 5.28l.56-.56L4.5 6.94l5.22-5.22z'/%3E%3C/svg%3E);&#10;    }&#10;    &#10;    /* Professional Frames/Separators - Much Thicker */&#10;    QFrame[frameShape=&quot;4&quot;] { /* HLine */&#10;        border: none;&#10;        background-color: #2c5530;&#10;        max-height: 4px;  /* Much thicker separator */&#10;        margin: 15px 0;&#10;    }&#10;    &#10;    QFrame[frameShape=&quot;5&quot;] { /* VLine */&#10;        border: none;&#10;        background-color: #2c5530;&#10;        max-width: 4px;  /* Much thicker separator */&#10;        margin: 0 15px;&#10;    }&#10;    &#10;    /* Enhanced Chart Container - Thicker Border */&#10;    .chart-container {&#10;        background-color: #fffef8;&#10;        border: 4px solid #2c5530;  /* Much thicker chart borders */&#10;        border-radius: 12px;&#10;        padding: 20px;&#10;        margin: 8px;&#10;        box-shadow: 0 4px 8px rgba(44, 85, 48, 0.15);&#10;    }&#10;    &#10;    /* Professional Metric Cards - Thicker Borders */&#10;    .metric-card {&#10;        background-color: #fffef8;&#10;        border: 4px solid #2c5530;  /* Much thicker card borders */&#10;        border-radius: 12px;&#10;        padding: 24px;&#10;        margin: 12px;&#10;        box-shadow: 0 6px 12px rgba(44, 85, 48, 0.15);&#10;    }&#10;    &#10;    .metric-value {&#10;        font-size: 28px;&#10;        font-weight: bold;&#10;        color: #2c5530;  /* Green metric values */&#10;        margin-bottom: 8px;&#10;    }&#10;    &#10;    .metric-label {&#10;        font-size: 14px;&#10;        color: #6b7280;&#10;        font-weight: 500;&#10;        margin-top: 8px;&#10;    }&#10;    &#10;    /* Section Headers - Enhanced */&#10;    .section-header {&#10;        background-color: #2c5530;  /* Dark green headers */&#10;        color: #ffffff;&#10;        padding: 15px 18px;  /* Increased padding */&#10;        font-weight: bold;&#10;        font-size: 16px;&#10;        border-radius: 8px 8px 0 0;&#10;        margin-bottom: 0;&#10;        border: 3px solid #2c5530;&#10;    }&#10;    &#10;    /* Content Areas - Thicker Borders */&#10;    .content-section {&#10;        background-color: #fffef8;&#10;        border: 4px solid #2c5530;  /* Much thicker content borders */&#10;        border-radius: 12px;&#10;        padding: 20px;&#10;        margin: 8px;&#10;        box-shadow: 0 4px 8px rgba(44, 85, 48, 0.1);&#10;    }&#10;    &#10;    /* Enhanced Scrollbars - Thicker */&#10;    QScrollBar:vertical {&#10;        background-color: #f8f6f0;&#10;        width: 16px;  /* Thicker scrollbar */&#10;        border-radius: 8px;&#10;        border: 2px solid #d4c5b9;&#10;    }&#10;    &#10;    QScrollBar::handle:vertical {&#10;        background-color: #2c5530;&#10;        border-radius: 6px;&#10;        min-height: 30px;&#10;        border: 1px solid #1e3d24;&#10;    }&#10;    &#10;    QScrollBar::handle:vertical:hover {&#10;        background-color: #38663d;&#10;    }&#10;    &#10;    QScrollBar:horizontal {&#10;        background-color: #f8f6f0;&#10;        height: 16px;  /* Thicker scrollbar */&#10;        border-radius: 8px;&#10;        border: 2px solid #d4c5b9;&#10;    }&#10;    &#10;    QScrollBar::handle:horizontal {&#10;        background-color: #2c5530;&#10;        border-radius: 6px;&#10;        min-width: 30px;&#10;        border: 1px solid #1e3d24;&#10;    }&#10;    &#10;    QScrollBar::handle:horizontal:hover {&#10;        background-color: #38663d;&#10;    }&#10;    &#10;    QScrollBar::add-line, QScrollBar::sub-line {&#10;        border: none;&#10;        background: none;&#10;    }&#10;    &quot;&quot;&quot;&#10;&#10;def get_chart_colors():&#10;    &quot;&quot;&quot;Get consistent colors for charts - Eye-friendly warm theme&quot;&quot;&quot;&#10;    return [&#10;        '#2c5530',  # Primary Dark Green&#10;        '#38663d',  # Medium Green&#10;        '#4a7c59',  # Forest Green&#10;        '#5c9275',  # Sage Green&#10;        '#6ea891',  # Teal Green&#10;        '#8bb9a3',  # Light Green&#10;        '#7b6143',  # Warm Brown&#10;        '#9d7f5f',  # Light Brown&#10;        '#b8967b',  # Tan&#10;        '#d4c5b9',  # Warm Beige&#10;        '#8a6b47',  # Golden Brown&#10;        '#a68b5b',  # Olive&#10;    ]" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/../budget_tab.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/../budget_tab.py" />
              <option name="updatedContent" value="    def add_expense(self):&#10;        &quot;&quot;&quot;Add expense entry to database&quot;&quot;&quot;&#10;        try:&#10;            person = self.person_combo.currentText()&#10;            amount_text = self.amount_input.text().strip()&#10;            date = self.date_input.date().toString(&quot;yyyy-MM-dd&quot;)&#10;            category = self.category_combo.currentText()&#10;            subcategory = self.subcategory_combo.currentText()&#10;            description = self.description_input.text().strip()&#10;            payment_method = self.payment_combo.currentText()&#10;            realized = self.realized_checkbox.isChecked()  # Get realized status&#10;            &#10;            # Validate inputs&#10;            if not amount_text:&#10;                QMessageBox.warning(self, &quot;Warning&quot;, &quot;Please enter an amount&quot;)&#10;                return&#10;                &#10;            if not category or not subcategory:&#10;                QMessageBox.warning(self, &quot;Warning&quot;, &quot;Please select category and subcategory&quot;)&#10;                return&#10;                &#10;            try:&#10;                amount = float(amount_text.replace(&quot;,&quot;, &quot;&quot;).replace(&quot;$&quot;, &quot;&quot;))&#10;            except ValueError:&#10;                QMessageBox.warning(self, &quot;Warning&quot;, &quot;Please enter a valid number for amount&quot;)&#10;                return&#10;            &#10;            # Add to database using the updated ExpenseModel.add method&#10;            from database.models import ExpenseModel&#10;            ExpenseModel.add(self.db, date, person, amount, category, subcategory, &#10;                           description, payment_method, realized)&#10;            &#10;            # Clear form&#10;            self.amount_input.clear()&#10;            self.description_input.clear()&#10;            self.realized_checkbox.setChecked(False)  # Reset checkbox&#10;            &#10;            # Refresh display&#10;            self.refresh_data()&#10;            &#10;            QMessageBox.information(self, &quot;Success&quot;, &quot;Expense added successfully!&quot;)&#10;            &#10;        except Exception as e:&#10;            QMessageBox.critical(self, &quot;Error&quot;, f&quot;Failed to add expense: {str(e)}&quot;)" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>