<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/database/category_manager.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/database/category_manager.py" />
              <option name="originalContent" value="&quot;&quot;&quot;&#10;Category Manager for Budget Tracker&#10;Handles loading, managing, and updating categories and subcategories&#10;&quot;&quot;&quot;&#10;&#10;import csv&#10;import os&#10;import sqlite3&#10;from typing import Dict, List, Optional, Set&#10;from database.connection import get_db_connection&#10;&#10;class CategoryManager:&#10;    &quot;&quot;&quot;Centralized manager for categories and subcategories&quot;&quot;&quot;&#10;&#10;    def __init__(self):&#10;        self._categories_data = {}&#10;        self._load_categories()&#10;        self._ensure_categories_table()&#10;        self._sync_with_database()&#10;&#10;    def _load_categories(self) -&gt; None:&#10;        &quot;&quot;&quot;Load categories from the categories.csv file&quot;&quot;&quot;&#10;        # Try to find categories.csv in common locations&#10;        possible_paths = [&#10;            '/Users/jeffreywooster/Documents/Development/6_Budget_Master/categories.csv',&#10;            os.path.join(os.path.dirname(__file__), '..', 'categories.csv'),&#10;            os.path.join(os.path.dirname(__file__), '..', '..', 'categories.csv'),&#10;            'categories.csv'&#10;        ]&#10;&#10;        categories_file = None&#10;        for path in possible_paths:&#10;            if os.path.exists(path):&#10;                categories_file = path&#10;                break&#10;&#10;        if categories_file:&#10;            try:&#10;                with open(categories_file, 'r', encoding='utf-8') as file:&#10;                    reader = csv.DictReader(file)&#10;                    for row in reader:&#10;                        category = row.get('Category', '').strip()&#10;                        subcategory = row.get('Sub Category', '').strip()&#10;&#10;                        if category and subcategory:&#10;                            if category not in self._categories_data:&#10;                                self._categories_data[category] = []&#10;                            if subcategory not in self._categories_data[category]:&#10;                                self._categories_data[category].append(subcategory)&#10;&#10;                print(f&quot;Loaded {len(self._categories_data)} categories from {categories_file}&quot;)&#10;&#10;            except Exception as e:&#10;                print(f&quot;Error loading categories from CSV: {e}&quot;)&#10;                self._load_default_categories()&#10;        else:&#10;            print(&quot;Categories.csv not found, using default categories&quot;)&#10;            self._load_default_categories()&#10;&#10;    def _load_default_categories(self) -&gt; None:&#10;        &quot;&quot;&quot;Load default categories as fallback&quot;&quot;&quot;&#10;        self._categories_data = {&#10;            'Housing': ['Mortgage', 'HOA', 'Property Taxes', 'Reserves'],&#10;            'Utilities': ['Electric', 'Gas', 'Internet', 'Phone', 'Insurance'],&#10;            'Food': ['Food (Groceries)', 'Food (Take Out)', 'Food (Dining Out)'],&#10;            'Healthcare': ['Prescriptions', 'Doctor Visits', 'Co-Pay'],&#10;            'Vehicles': ['Gas', 'Insurance', 'Repairs', 'Parking'],&#10;            'Other': ['Entertainment', 'Clothes', 'Other']&#10;        }&#10;&#10;    def _ensure_categories_table(self) -&gt; None:&#10;        &quot;&quot;&quot;Ensure the categories table exists in the database&quot;&quot;&quot;&#10;        try:&#10;            with get_db_connection() as db:&#10;                db.execute('''&#10;                    CREATE TABLE IF NOT EXISTS categories (&#10;                        id INTEGER PRIMARY KEY AUTOINCREMENT,&#10;                        category TEXT NOT NULL,&#10;                        subcategory TEXT NOT NULL,&#10;                        created_date DATE DEFAULT CURRENT_DATE,&#10;                        UNIQUE(category, subcategory)&#10;                    )&#10;                ''')&#10;                db.commit()&#10;        except Exception as e:&#10;            print(f&quot;Error creating categories table: {e}&quot;)&#10;&#10;    def _sync_with_database(self) -&gt; None:&#10;        &quot;&quot;&quot;Sync categories with database and load any custom categories&quot;&quot;&quot;&#10;        try:&#10;            with get_db_connection() as db:&#10;                # First, insert all CSV categories into database if they don't exist&#10;                for category, subcategories in self._categories_data.items():&#10;                    for subcategory in subcategories:&#10;                        try:&#10;                            db.execute('''&#10;                                INSERT OR IGNORE INTO categories (category, subcategory)&#10;                                VALUES (?, ?)&#10;                            ''', (category, subcategory))&#10;                        except Exception as e:&#10;                            print(f&quot;Error inserting category {category}/{subcategory}: {e}&quot;)&#10;&#10;                # Then load any additional categories from database&#10;                db_categories = db.execute('''&#10;                    SELECT category, subcategory FROM categories&#10;                    ORDER BY category, subcategory&#10;                ''').fetchall()&#10;&#10;                for row in db_categories:&#10;                    category = row['category']&#10;                    subcategory = row['subcategory']&#10;&#10;                    if category not in self._categories_data:&#10;                        self._categories_data[category] = []&#10;                    if subcategory not in self._categories_data[category]:&#10;                        self._categories_data[category].append(subcategory)&#10;&#10;                db.commit()&#10;&#10;        except Exception as e:&#10;            print(f&quot;Error syncing with database: {e}&quot;)&#10;&#10;    def get_categories(self) -&gt; Dict[str, List[str]]:&#10;        &quot;&quot;&quot;Get all categories and subcategories&quot;&quot;&quot;&#10;        return self._categories_data.copy()&#10;&#10;    def get_category_names(self) -&gt; List[str]:&#10;        &quot;&quot;&quot;Get list of all category names&quot;&quot;&quot;&#10;        return sorted(self._categories_data.keys())&#10;&#10;    def get_subcategories(self, category: str) -&gt; List[str]:&#10;        &quot;&quot;&quot;Get subcategories for a specific category&quot;&quot;&quot;&#10;        return self._categories_data.get(category, []).copy()&#10;&#10;    def add_category(self, category: str) -&gt; bool:&#10;        &quot;&quot;&quot;Add a new category&quot;&quot;&quot;&#10;        if not category or category in self._categories_data:&#10;            return False&#10;&#10;        try:&#10;            with get_db_connection() as db:&#10;                # Add category with a default subcategory&#10;                default_subcategory = f&quot;{category} (General)&quot;&#10;                db.execute('''&#10;                    INSERT INTO categories (category, subcategory)&#10;                    VALUES (?, ?)&#10;                ''', (category, default_subcategory))&#10;                db.commit()&#10;&#10;                self._categories_data[category] = [default_subcategory]&#10;                return True&#10;&#10;        except Exception as e:&#10;            print(f&quot;Error adding category {category}: {e}&quot;)&#10;            return False&#10;&#10;    def add_subcategory(self, category: str, subcategory: str) -&gt; bool:&#10;        &quot;&quot;&quot;Add a new subcategory to an existing category&quot;&quot;&quot;&#10;        if not category or not subcategory:&#10;            return False&#10;&#10;        # Create category if it doesn't exist&#10;        if category not in self._categories_data:&#10;            self._categories_data[category] = []&#10;&#10;        # Check if subcategory already exists&#10;        if subcategory in self._categories_data[category]:&#10;            return False&#10;&#10;        try:&#10;            with get_db_connection() as db:&#10;                db.execute('''&#10;                    INSERT INTO categories (category, subcategory)&#10;                    VALUES (?, ?)&#10;                ''', (category, subcategory))&#10;                db.commit()&#10;&#10;                self._categories_data[category].append(subcategory)&#10;                return True&#10;&#10;        except Exception as e:&#10;            print(f&quot;Error adding subcategory {category}/{subcategory}: {e}&quot;)&#10;            return False&#10;&#10;    def remove_subcategory(self, category: str, subcategory: str) -&gt; bool:&#10;        &quot;&quot;&quot;Remove a subcategory (only if not used in expenses)&quot;&quot;&quot;&#10;        if category not in self._categories_data or subcategory not in self._categories_data[category]:&#10;            return False&#10;&#10;        try:&#10;            with get_db_connection() as db:&#10;                # Check if subcategory is used in expenses&#10;                usage_count = db.execute('''&#10;                    SELECT COUNT(*) as count FROM expenses&#10;                    WHERE category = ? AND subcategory = ?&#10;                ''', (category, subcategory)).fetchone()&#10;&#10;                if usage_count and usage_count['count'] &gt; 0:&#10;                    print(f&quot;Cannot remove subcategory {category}/{subcategory} - it's used in {usage_count['count']} expenses&quot;)&#10;                    return False&#10;&#10;                # Remove from database&#10;                db.execute('''&#10;                    DELETE FROM categories&#10;                    WHERE category = ? AND subcategory = ?&#10;                ''', (category, subcategory))&#10;                db.commit()&#10;&#10;                # Remove from memory&#10;                self._categories_data[category].remove(subcategory)&#10;&#10;                # Remove category if it has no subcategories&#10;                if not self._categories_data[category]:&#10;                    del self._categories_data[category]&#10;&#10;                return True&#10;&#10;        except Exception as e:&#10;            print(f&quot;Error removing subcategory {category}/{subcategory}: {e}&quot;)&#10;            return False&#10;&#10;    def category_exists(self, category: str) -&gt; bool:&#10;        &quot;&quot;&quot;Check if a category exists&quot;&quot;&quot;&#10;        return category in self._categories_data&#10;&#10;    def subcategory_exists(self, category: str, subcategory: str) -&gt; bool:&#10;        &quot;&quot;&quot;Check if a subcategory exists in a category&quot;&quot;&quot;&#10;        return category in self._categories_data and subcategory in self._categories_data[category]&#10;&#10;    def get_all_subcategories(self) -&gt; Set[str]:&#10;        &quot;&quot;&quot;Get all subcategories across all categories&quot;&quot;&quot;&#10;        all_subcategories = set()&#10;        for subcategories in self._categories_data.values():&#10;            all_subcategories.update(subcategories)&#10;        return all_subcategories&#10;&#10;    def search_categories(self, search_term: str) -&gt; Dict[str, List[str]]:&#10;        &quot;&quot;&quot;Search for categories and subcategories containing the search term&quot;&quot;&quot;&#10;        results = {}&#10;        search_lower = search_term.lower()&#10;&#10;        for category, subcategories in self._categories_data.items():&#10;            category_matches = search_lower in category.lower()&#10;            matching_subcategories = [&#10;                sub for sub in subcategories&#10;                if search_lower in sub.lower()&#10;            ]&#10;&#10;            if category_matches or matching_subcategories:&#10;                if category_matches:&#10;                    results[category] = subcategories.copy()&#10;                else:&#10;                    results[category] = matching_subcategories&#10;&#10;        return results&#10;&#10;    def refresh(self) -&gt; None:&#10;        &quot;&quot;&quot;Refresh categories from CSV and database&quot;&quot;&quot;&#10;        self._categories_data.clear()&#10;        self._load_categories()&#10;        self._sync_with_database()&#10;&#10;# Global instance&#10;_category_manager = None&#10;&#10;def get_category_manager() -&gt; CategoryManager:&#10;    &quot;&quot;&quot;Get the global category manager instance&quot;&quot;&quot;&#10;    global _category_manager&#10;    if _category_manager is None:&#10;        _category_manager = CategoryManager()&#10;    return _category_manager&#10;&#10;" />
              <option name="updatedContent" value="&quot;&quot;&quot;&#10;Category Manager for Budget Tracker&#10;Handles loading, managing, and updating categories and subcategories&#10;&quot;&quot;&quot;&#10;&#10;import csv&#10;import os&#10;import sqlite3&#10;from typing import Dict, List, Optional, Set&#10;from database.db_manager import DatabaseManager&#10;&#10;class CategoryManager:&#10;    &quot;&quot;&quot;Centralized manager for categories and subcategories&quot;&quot;&quot;&#10;&#10;    def __init__(self):&#10;        self._categories_data = {}&#10;        self._load_categories()&#10;        self._ensure_categories_table()&#10;        self._sync_with_database()&#10;&#10;    def _load_categories(self) -&gt; None:&#10;        &quot;&quot;&quot;Load categories from the categories.csv file with proper encoding handling&quot;&quot;&quot;&#10;        # Try to find categories.csv in the current directory first&#10;        possible_paths = [&#10;            os.path.join(os.path.dirname(__file__), '..', 'categories.csv'),&#10;            'categories.csv',&#10;            '/Users/jeffreywooster/Documents/Development/6_Budget_Master/categories.csv',&#10;            os.path.join(os.path.dirname(__file__), '..', '..', 'categories.csv')&#10;        ]&#10;&#10;        categories_file = None&#10;        for path in possible_paths:&#10;            if os.path.exists(path):&#10;                categories_file = path&#10;                break&#10;&#10;        if categories_file:&#10;            try:&#10;                # Try different encodings to handle potential encoding issues&#10;                encodings = ['utf-8', 'utf-8-sig', 'latin1', 'cp1252']&#10;&#10;                for encoding in encodings:&#10;                    try:&#10;                        with open(categories_file, 'r', encoding=encoding) as file:&#10;                            reader = csv.DictReader(file)&#10;&#10;                            # Clear existing data&#10;                            self._categories_data = {}&#10;&#10;                            for row in reader:&#10;                                category = row.get('Category', '').strip()&#10;                                subcategory = row.get('Sub Category', '').strip()&#10;&#10;                                if category and subcategory:&#10;                                    if category not in self._categories_data:&#10;                                        self._categories_data[category] = []&#10;                                    if subcategory not in self._categories_data[category]:&#10;                                        self._categories_data[category].append(subcategory)&#10;&#10;                        print(f&quot;Loaded {len(self._categories_data)} categories from {categories_file} using {encoding} encoding&quot;)&#10;                        return  # Success, exit the function&#10;&#10;                    except UnicodeDecodeError:&#10;                        continue  # Try next encoding&#10;&#10;                # If we get here, all encodings failed&#10;                raise Exception(&quot;Could not decode file with any supported encoding&quot;)&#10;&#10;            except Exception as e:&#10;                print(f&quot;Error loading categories from CSV: {e}&quot;)&#10;                self._load_default_categories()&#10;        else:&#10;            print(&quot;Categories.csv not found, using default categories&quot;)&#10;            self._load_default_categories()&#10;&#10;    def _load_default_categories(self) -&gt; None:&#10;        &quot;&quot;&quot;Load default categories as fallback&quot;&quot;&quot;&#10;        self._categories_data = {&#10;            'Housing': ['Mortgage', 'HOA', 'Property Taxes', 'Reserves'],&#10;            'Utilities': ['Electric', 'Gas', 'Internet', 'Phone', 'Insurance'],&#10;            'Food': ['Food (Groceries)', 'Food (Take Out)', 'Food (Dining Out)'],&#10;            'Healthcare': ['Prescriptions', 'Doctor Visits', 'Co-Pay'],&#10;            'Vehicles': ['Gas', 'Insurance', 'Repairs', 'Parking'],&#10;            'Other': ['Entertainment', 'Clothes', 'Other'],&#10;            'Income': [&quot;Jeff's Income&quot;, &quot;Vanessa's Income&quot;, &quot;Bonus&quot;, &quot;Other Income&quot;]&#10;        }&#10;&#10;    def _ensure_categories_table(self) -&gt; None:&#10;        &quot;&quot;&quot;Ensure the categories table exists in the database&quot;&quot;&quot;&#10;        try:&#10;            with DatabaseManager() as db:&#10;                db.execute('''&#10;                    CREATE TABLE IF NOT EXISTS categories (&#10;                        id INTEGER PRIMARY KEY AUTOINCREMENT,&#10;                        category TEXT NOT NULL,&#10;                        subcategory TEXT NOT NULL,&#10;                        created_date DATE DEFAULT CURRENT_DATE,&#10;                        UNIQUE(category, subcategory)&#10;                    )&#10;                ''')&#10;        except Exception as e:&#10;            print(f&quot;Error creating categories table: {e}&quot;)&#10;&#10;    def _sync_with_database(self) -&gt; None:&#10;        &quot;&quot;&quot;Sync categories with database and load any custom categories&quot;&quot;&quot;&#10;        try:&#10;            with DatabaseManager() as db:&#10;                # First, insert all CSV categories into database if they don't exist&#10;                for category, subcategories in self._categories_data.items():&#10;                    for subcategory in subcategories:&#10;                        try:&#10;                            db.execute('''&#10;                                INSERT OR IGNORE INTO categories (category, subcategory)&#10;                                VALUES (?, ?)&#10;                            ''', (category, subcategory))&#10;                        except Exception as e:&#10;                            print(f&quot;Error inserting category {category}/{subcategory}: {e}&quot;)&#10;&#10;                # Then load any additional categories from database&#10;                db_categories = db.execute('''&#10;                    SELECT category, subcategory FROM categories&#10;                    ORDER BY category, subcategory&#10;                ''').fetchall()&#10;&#10;                for row in db_categories:&#10;                    category = row['category']&#10;                    subcategory = row['subcategory']&#10;&#10;                    if category not in self._categories_data:&#10;                        self._categories_data[category] = []&#10;                    if subcategory not in self._categories_data[category]:&#10;                        self._categories_data[category].append(subcategory)&#10;&#10;        except Exception as e:&#10;            print(f&quot;Error syncing with database: {e}&quot;)&#10;&#10;    def get_categories(self) -&gt; Dict[str, List[str]]:&#10;        &quot;&quot;&quot;Get all categories and subcategories&quot;&quot;&quot;&#10;        return self._categories_data.copy()&#10;&#10;    def get_category_names(self) -&gt; List[str]:&#10;        &quot;&quot;&quot;Get list of all category names&quot;&quot;&quot;&#10;        return sorted(self._categories_data.keys())&#10;&#10;    def get_subcategories(self, category: str) -&gt; List[str]:&#10;        &quot;&quot;&quot;Get subcategories for a specific category&quot;&quot;&quot;&#10;        return self._categories_data.get(category, []).copy()&#10;&#10;    def add_category(self, category: str) -&gt; bool:&#10;        &quot;&quot;&quot;Add a new category&quot;&quot;&quot;&#10;        if not category or category in self._categories_data:&#10;            return False&#10;&#10;        try:&#10;            with DatabaseManager() as db:&#10;                # Add category with a default subcategory&#10;                default_subcategory = f&quot;{category} (General)&quot;&#10;                db.execute('''&#10;                    INSERT INTO categories (category, subcategory)&#10;                    VALUES (?, ?)&#10;                ''', (category, default_subcategory))&#10;&#10;                self._categories_data[category] = [default_subcategory]&#10;                return True&#10;&#10;        except Exception as e:&#10;            print(f&quot;Error adding category {category}: {e}&quot;)&#10;            return False&#10;&#10;    def add_subcategory(self, category: str, subcategory: str) -&gt; bool:&#10;        &quot;&quot;&quot;Add a new subcategory to an existing category&quot;&quot;&quot;&#10;        if not category or not subcategory:&#10;            return False&#10;&#10;        # Create category if it doesn't exist&#10;        if category not in self._categories_data:&#10;            self._categories_data[category] = []&#10;&#10;        # Check if subcategory already exists&#10;        if subcategory in self._categories_data[category]:&#10;            return False&#10;&#10;        try:&#10;            with DatabaseManager() as db:&#10;                db.execute('''&#10;                    INSERT INTO categories (category, subcategory)&#10;                    VALUES (?, ?)&#10;                ''', (category, subcategory))&#10;&#10;                self._categories_data[category].append(subcategory)&#10;                return True&#10;&#10;        except Exception as e:&#10;            print(f&quot;Error adding subcategory {category}/{subcategory}: {e}&quot;)&#10;            return False&#10;&#10;    def remove_subcategory(self, category: str, subcategory: str) -&gt; bool:&#10;        &quot;&quot;&quot;Remove a subcategory (only if not used in expenses)&quot;&quot;&quot;&#10;        if category not in self._categories_data or subcategory not in self._categories_data[category]:&#10;            return False&#10;&#10;        try:&#10;            with DatabaseManager() as db:&#10;                # Check if subcategory is used in expenses&#10;                usage_count = db.execute('''&#10;                    SELECT COUNT(*) as count FROM expenses&#10;                    WHERE category = ? AND subcategory = ?&#10;                ''', (category, subcategory)).fetchone()&#10;&#10;                if usage_count and usage_count['count'] &gt; 0:&#10;                    print(f&quot;Cannot remove subcategory {category}/{subcategory}: still in use&quot;)&#10;                    return False&#10;&#10;                # Remove from database&#10;                db.execute('''&#10;                    DELETE FROM categories &#10;                    WHERE category = ? AND subcategory = ?&#10;                ''', (category, subcategory))&#10;&#10;                # Remove from local data&#10;                self._categories_data[category].remove(subcategory)&#10;&#10;                # Remove category if it has no subcategories&#10;                if not self._categories_data[category]:&#10;                    del self._categories_data[category]&#10;&#10;                return True&#10;&#10;        except Exception as e:&#10;            print(f&quot;Error removing subcategory {category}/{subcategory}: {e}&quot;)&#10;            return False&#10;&#10;    def refresh_from_database(self) -&gt; None:&#10;        &quot;&quot;&quot;Refresh categories from database&quot;&quot;&quot;&#10;        self._categories_data = {}&#10;        self._sync_with_database()&#10;&#10;    def refresh(self) -&gt; None:&#10;        &quot;&quot;&quot;Refresh categories from database (alias for refresh_from_database)&quot;&quot;&quot;&#10;        self.refresh_from_database()&#10;&#10;    def is_valid_category(self, category: str, subcategory: str) -&gt; bool:&#10;        &quot;&quot;&quot;Check if a category/subcategory combination is valid&quot;&quot;&quot;&#10;        return (category in self._categories_data and&#10;                subcategory in self._categories_data[category])&#10;&#10;    def category_exists(self, category: str) -&gt; bool:&#10;        &quot;&quot;&quot;Check if a category exists&quot;&quot;&quot;&#10;        return category in self._categories_data&#10;&#10;    def subcategory_exists(self, category: str, subcategory: str) -&gt; bool:&#10;        &quot;&quot;&quot;Check if a subcategory exists within a category&quot;&quot;&quot;&#10;        return (category in self._categories_data and &#10;                subcategory in self._categories_data[category])&#10;&#10;# Global instance&#10;_category_manager = CategoryManager()&#10;&#10;def get_category_manager() -&gt; CategoryManager:&#10;    &quot;&quot;&quot;Get the global category manager instance&quot;&quot;&quot;&#10;    return _category_manager" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/database/models.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/database/models.py" />
              <option name="originalContent" value="&quot;&quot;&quot;&#10;Database models and operations&#10;&quot;&quot;&quot;&#10;&#10;from datetime import datetime, date&#10;&#10;class IncomeModel:&#10;    &quot;&quot;&quot;Model for income operations&quot;&quot;&quot;&#10;    &#10;    @staticmethod&#10;    def add(db, date_str, person, amount, source, notes):&#10;        &quot;&quot;&quot;Add income entry&quot;&quot;&quot;&#10;        db.execute('''&#10;            INSERT INTO income (date, person, amount, source, notes)&#10;            VALUES (?, ?, ?, ?, ?)&#10;        ''', (date_str, person, amount, source, notes))&#10;        db.commit()&#10;        &#10;    @staticmethod&#10;    def get_all(db, limit=50):&#10;        &quot;&quot;&quot;Get all income entries&quot;&quot;&quot;&#10;        return db.execute('''&#10;            SELECT * FROM income&#10;            ORDER BY date DESC&#10;            LIMIT ?&#10;        ''', (limit,)).fetchall()&#10;        &#10;    @staticmethod&#10;    def get_by_month(db, month_start, month_end):&#10;        &quot;&quot;&quot;Get income for a specific month&quot;&quot;&quot;&#10;        return db.execute('''&#10;            SELECT * FROM income&#10;            WHERE date &gt;= ? AND date &lt;= ?&#10;            ORDER BY date DESC&#10;        ''', (month_start, month_end)).fetchall()&#10;        &#10;    @staticmethod&#10;    def get_total_by_month(db, month_start, month_end):&#10;        &quot;&quot;&quot;Get total income for a month&quot;&quot;&quot;&#10;        result = db.execute('''&#10;            SELECT COALESCE(SUM(amount), 0) as total&#10;            FROM income&#10;            WHERE date &gt;= ? AND date &lt;= ?&#10;        ''', (month_start, month_end)).fetchone()&#10;        return result['total'] if result else 0&#10;        &#10;    @staticmethod&#10;    def delete(db, income_id):&#10;        &quot;&quot;&quot;Delete income entry&quot;&quot;&quot;&#10;        db.execute('DELETE FROM income WHERE id = ?', (income_id,))&#10;        db.commit()&#10;&#10;class ExpenseModel:&#10;    &quot;&quot;&quot;Model for expense operations&quot;&quot;&quot;&#10;    &#10;    @staticmethod&#10;    def add(db, date_str, person, amount, category, subcategory, description, payment_method):&#10;        &quot;&quot;&quot;Add expense entry&quot;&quot;&quot;&#10;        db.execute('''&#10;            INSERT INTO expenses (date, person, amount, category, subcategory, description, payment_method)&#10;            VALUES (?, ?, ?, ?, ?, ?, ?)&#10;        ''', (date_str, person, amount, category, subcategory, description, payment_method))&#10;        db.commit()&#10;        &#10;    @staticmethod&#10;    def get_all(db, limit=50):&#10;        &quot;&quot;&quot;Get all expense entries&quot;&quot;&quot;&#10;        return db.execute('''&#10;            SELECT * FROM expenses&#10;            ORDER BY date DESC&#10;            LIMIT ?&#10;        ''', (limit,)).fetchall()&#10;        &#10;    @staticmethod&#10;    def get_by_month(db, month_start, month_end):&#10;        &quot;&quot;&quot;Get expenses for a specific month&quot;&quot;&quot;&#10;        return db.execute('''&#10;            SELECT * FROM expenses&#10;            WHERE date &gt;= ? AND date &lt;= ?&#10;            ORDER BY date DESC&#10;        ''', (month_start, month_end)).fetchall()&#10;        &#10;    @staticmethod&#10;    def get_total_by_month(db, month_start, month_end):&#10;        &quot;&quot;&quot;Get total expenses for a month&quot;&quot;&quot;&#10;        result = db.execute('''&#10;            SELECT COALESCE(SUM(amount), 0) as total&#10;            FROM expenses&#10;            WHERE date &gt;= ? AND date &lt;= ?&#10;        ''', (month_start, month_end)).fetchone()&#10;        return result['total'] if result else 0&#10;        &#10;    @staticmethod&#10;    def get_by_category(db, month_start, month_end):&#10;        &quot;&quot;&quot;Get expenses grouped by category&quot;&quot;&quot;&#10;        return db.execute('''&#10;            SELECT category, subcategory, SUM(amount) as total&#10;            FROM expenses&#10;            WHERE date &gt;= ? AND date &lt;= ?&#10;            GROUP BY category, subcategory&#10;            ORDER BY category, subcategory&#10;        ''', (month_start, month_end)).fetchall()&#10;&#10;" />
              <option name="updatedContent" value="&quot;&quot;&quot;&#10;Database models and operations&#10;&quot;&quot;&quot;&#10;&#10;from datetime import datetime, date&#10;&#10;class IncomeModel:&#10;    &quot;&quot;&quot;Model for income operations&quot;&quot;&quot;&#10;    &#10;    @staticmethod&#10;    def add(db, date_str, person, amount, source, notes):&#10;        &quot;&quot;&quot;Add income entry&quot;&quot;&quot;&#10;        db.execute('''&#10;            INSERT INTO income (date, person, amount, source, notes)&#10;            VALUES (?, ?, ?, ?, ?)&#10;        ''', (date_str, person, amount, source, notes))&#10;        db.commit()&#10;        &#10;    @staticmethod&#10;    def get_all(db, limit=50):&#10;        &quot;&quot;&quot;Get all income entries&quot;&quot;&quot;&#10;        return db.execute('''&#10;            SELECT * FROM income&#10;            ORDER BY date DESC&#10;            LIMIT ?&#10;        ''', (limit,)).fetchall()&#10;        &#10;    @staticmethod&#10;    def get_by_month(db, month_start, month_end):&#10;        &quot;&quot;&quot;Get income for a specific month&quot;&quot;&quot;&#10;        return db.execute('''&#10;            SELECT * FROM income&#10;            WHERE date &gt;= ? AND date &lt;= ?&#10;            ORDER BY date DESC&#10;        ''', (month_start, month_end)).fetchall()&#10;        &#10;    @staticmethod&#10;    def get_total_by_month(db, month_start, month_end):&#10;        &quot;&quot;&quot;Get total income for a month&quot;&quot;&quot;&#10;        result = db.execute('''&#10;            SELECT COALESCE(SUM(amount), 0) as total&#10;            FROM income&#10;            WHERE date &gt;= ? AND date &lt;= ?&#10;        ''', (month_start, month_end)).fetchone()&#10;        return result['total'] if result else 0&#10;        &#10;    @staticmethod&#10;    def delete(db, income_id):&#10;        &quot;&quot;&quot;Delete income entry&quot;&quot;&quot;&#10;        db.execute('DELETE FROM income WHERE id = ?', (income_id,))&#10;        db.commit()&#10;&#10;class ExpenseModel:&#10;    &quot;&quot;&quot;Model for expense operations&quot;&quot;&quot;&#10;    &#10;    @staticmethod&#10;    def add(db, date_str, person, amount, category, subcategory, description, payment_method, realized=False):&#10;        &quot;&quot;&quot;Add expense entry&quot;&quot;&quot;&#10;        db.execute('''&#10;            INSERT INTO expenses (date, person, amount, category, subcategory, description, payment_method, realized)&#10;            VALUES (?, ?, ?, ?, ?, ?, ?, ?)&#10;        ''', (date_str, person, amount, category, subcategory, description, payment_method, realized))&#10;        db.commit()&#10;        &#10;    @staticmethod&#10;    def get_all(db, limit=50):&#10;        &quot;&quot;&quot;Get all expense entries&quot;&quot;&quot;&#10;        return db.execute('''&#10;            SELECT * FROM expenses&#10;            ORDER BY date DESC&#10;            LIMIT ?&#10;        ''', (limit,)).fetchall()&#10;        &#10;    @staticmethod&#10;    def get_by_month(db, month_start, month_end):&#10;        &quot;&quot;&quot;Get expenses for a specific month&quot;&quot;&quot;&#10;        return db.execute('''&#10;            SELECT * FROM expenses&#10;            WHERE date &gt;= ? AND date &lt;= ?&#10;            ORDER BY date DESC&#10;        ''', (month_start, month_end)).fetchall()&#10;        &#10;    @staticmethod&#10;    def get_total_by_month(db, month_start, month_end):&#10;        &quot;&quot;&quot;Get total expenses for a month&quot;&quot;&quot;&#10;        result = db.execute('''&#10;            SELECT COALESCE(SUM(amount), 0) as total&#10;            FROM expenses&#10;            WHERE date &gt;= ? AND date &lt;= ?&#10;        ''', (month_start, month_end)).fetchone()&#10;        return result['total'] if result else 0&#10;        &#10;    @staticmethod&#10;    def get_by_category(db, month_start, month_end):&#10;        &quot;&quot;&quot;Get expenses grouped by category&quot;&quot;&quot;&#10;        return db.execute('''&#10;            SELECT category, subcategory, SUM(amount) as total&#10;            FROM expenses&#10;            WHERE date &gt;= ? AND date &lt;= ?&#10;            GROUP BY category, subcategory&#10;            ORDER BY category, subcategory&#10;        ''', (month_start, month_end)).fetchall()&#10;    &#10;    @staticmethod&#10;    def get_unrealized_by_person(db, month_start, month_end):&#10;        &quot;&quot;&quot;Get unrealized expenses by person for a specific month&quot;&quot;&quot;&#10;        return db.execute('''&#10;            SELECT person, COALESCE(SUM(amount), 0) as total&#10;            FROM expenses&#10;            WHERE date &gt;= ? AND date &lt;= ? AND realized = 0&#10;            GROUP BY person&#10;        ''', (month_start, month_end)).fetchall()&#10;    &#10;    @staticmethod&#10;    def get_unrealized_expenses(db, month_start, month_end):&#10;        &quot;&quot;&quot;Get all unrealized expenses for a specific month&quot;&quot;&quot;&#10;        return db.execute('''&#10;            SELECT * FROM expenses&#10;            WHERE date &gt;= ? AND date &lt;= ? AND realized = 0&#10;            ORDER BY person, date DESC&#10;        ''', (month_start, month_end)).fetchall()&#10;    &#10;    @staticmethod&#10;    def mark_as_realized(db, expense_id):&#10;        &quot;&quot;&quot;Mark an expense as realized&quot;&quot;&quot;&#10;        db.execute('UPDATE expenses SET realized = 1 WHERE id = ?', (expense_id,))&#10;        db.commit()&#10;    &#10;    @staticmethod&#10;    def mark_as_unrealized(db, expense_id):&#10;        &quot;&quot;&quot;Mark an expense as unrealized&quot;&quot;&quot;&#10;        db.execute('UPDATE expenses SET realized = 0 WHERE id = ?', (expense_id,))&#10;        db.commit()&#10;        &#10;    @staticmethod&#10;    def delete(db, expense_id):&#10;        &quot;&quot;&quot;Delete expense entry&quot;&quot;&quot;&#10;        db.execute('DELETE FROM expenses WHERE id = ?', (expense_id,))&#10;        db.commit()&#10;&#10;class NetWorthModel:&#10;    &quot;&quot;&quot;Model for net worth operations&quot;&quot;&quot;&#10;    &#10;    @staticmethod&#10;    def add_or_update(db, asset_type, asset_name, value, person):&#10;        &quot;&quot;&quot;Add or update asset&quot;&quot;&quot;&#10;        # Check if asset exists&#10;        existing = db.execute('''&#10;            SELECT id FROM net_worth&#10;            WHERE asset_name = ? AND date = date('now')&#10;        ''', (asset_name,)).fetchone()&#10;        &#10;        if existing:&#10;            db.execute('''&#10;                UPDATE net_worth&#10;                SET value = ?, asset_type = ?, person = ?&#10;                WHERE id = ?&#10;            ''', (value, asset_type, person, existing['id']))&#10;        else:&#10;            db.execute('''&#10;                INSERT INTO net_worth (date, asset_type, asset_name, value, person)&#10;                VALUES (date('now'), ?, ?, ?, ?)&#10;            ''', (asset_type, asset_name, value, person))&#10;        db.commit()&#10;        &#10;    @staticmethod&#10;    def get_current(db):&#10;        &quot;&quot;&quot;Get current assets&quot;&quot;&quot;&#10;        return db.execute('''&#10;            SELECT * FROM net_worth&#10;            WHERE date = (SELECT MAX(date) FROM net_worth)&#10;            ORDER BY value DESC&#10;        ''').fetchall()&#10;        &#10;    @staticmethod&#10;    def get_total(db):&#10;        &quot;&quot;&quot;Get total net worth&quot;&quot;&quot;&#10;        result = db.execute('''&#10;            SELECT COALESCE(SUM(value), 0) as total&#10;            FROM net_worth&#10;            WHERE date = (SELECT MAX(date) FROM net_worth)&#10;        ''').fetchone()&#10;        return result['total'] if result else 0&#10;        &#10;    @staticmethod&#10;    def delete(db, asset_name):&#10;        &quot;&quot;&quot;Delete asset&quot;&quot;&quot;&#10;        db.execute('DELETE FROM net_worth WHERE asset_name = ?', (asset_name,))&#10;        db.commit()&#10;&#10;class SavingsGoalModel:&#10;    &quot;&quot;&quot;Model for savings goal operations&quot;&quot;&quot;&#10;    &#10;    @staticmethod&#10;    def add(db, goal_name, target_amount, target_date, priority):&#10;        &quot;&quot;&quot;Add savings goal&quot;&quot;&quot;&#10;        db.execute('''&#10;            INSERT INTO savings_goals (goal_name, target_amount, target_date, priority)&#10;            VALUES (?, ?, ?, ?)&#10;        ''', (goal_name, target_amount, target_date, priority))&#10;        db.commit()&#10;        &#10;    @staticmethod&#10;    def get_all(db):&#10;        &quot;&quot;&quot;Get all savings goals&quot;&quot;&quot;&#10;        return db.execute('''&#10;            SELECT * FROM savings_goals&#10;            ORDER BY priority&#10;        ''').fetchall()&#10;        &#10;    @staticmethod&#10;    def update_amount(db, goal_id, amount):&#10;        &quot;&quot;&quot;Update goal current amount&quot;&quot;&quot;&#10;        db.execute('''&#10;            UPDATE savings_goals&#10;            SET current_amount = current_amount + ?&#10;            WHERE id = ?&#10;        ''', (amount, goal_id))&#10;        db.commit()&#10;        &#10;    @staticmethod&#10;    def delete(db, goal_id):&#10;        &quot;&quot;&quot;Delete savings goal&quot;&quot;&quot;&#10;        db.execute('DELETE FROM savings_goals WHERE id = ?', (goal_id,))&#10;        db.commit()" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gui/main_window.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gui/main_window.py" />
              <option name="originalContent" value="&quot;&quot;&quot;&#10;Main window for the budget application&#10;&quot;&quot;&quot;&#10;&#10;from PyQt6.QtWidgets import (&#10;    QMainWindow, QTabWidget, QWidget, QVBoxLayout,&#10;    QMenuBar, QMenu, QStatusBar, QMessageBox&#10;)&#10;from PyQt6.QtCore import Qt&#10;from PyQt6.QtGui import QAction, QIcon&#10;&#10;from gui.tabs.overview_tab import OverviewTab&#10;from gui.tabs.net_worth_tab import NetWorthTab&#10;from gui.tabs.budget_tab import BudgetTab&#10;from gui.tabs.presentation_tab import PresentationTab&#10;from gui.tabs.savings_tab import SavingsTab&#10;from gui.tabs.trends_tab import TrendsTab&#10;&#10;class MainWindow(QMainWindow):&#10;    def __init__(self):&#10;        super().__init__()&#10;        self.setWindowTitle(&quot;Budget Tracker - Jeff &amp; Vanessa&quot;)&#10;        self.setGeometry(100, 100, 1400, 800)&#10;        &#10;        # Set up central widget and layout&#10;        central_widget = QWidget()&#10;        self.setCentralWidget(central_widget)&#10;        layout = QVBoxLayout(central_widget)&#10;        &#10;        # Create tab widget&#10;        self.tabs = QTabWidget()&#10;        layout.addWidget(self.tabs)&#10;        &#10;        # Create and add tabs&#10;        self.overview_tab = OverviewTab()&#10;        self.net_worth_tab = NetWorthTab()&#10;        self.budget_tab = BudgetTab()&#10;        self.presentation_tab = PresentationTab()&#10;        self.savings_tab = SavingsTab()&#10;        self.trends_tab = TrendsTab()&#10;        &#10;        self.tabs.addTab(self.overview_tab, &quot; Budget Overview&quot;)&#10;        self.tabs.addTab(self.net_worth_tab, &quot; Net Worth&quot;)&#10;        self.tabs.addTab(self.budget_tab, &quot; Budget&quot;)&#10;        self.tabs.addTab(self.presentation_tab, &quot; Monthly Presentation&quot;)&#10;        self.tabs.addTab(self.savings_tab, &quot; Savings Goals&quot;)&#10;        self.tabs.addTab(self.trends_tab, &quot; Trends&quot;)&#10;        &#10;        # Connect tab change signal&#10;        self.tabs.currentChanged.connect(self.on_tab_changed)&#10;        &#10;        # Create menu bar&#10;        self.create_menu_bar()&#10;        &#10;        # Create status bar&#10;        self.status_bar = QStatusBar()&#10;        self.setStatusBar(self.status_bar)&#10;        self.status_bar.showMessage(&quot;Ready&quot;)&#10;        &#10;        # Apply stylesheet for professional look&#10;        self.setStyleSheet(&quot;&quot;&quot;&#10;            QMainWindow {&#10;                background-color: #2b2b2b;&#10;            }&#10;            QTabWidget::pane {&#10;                border: 1px solid #444;&#10;                background-color: #2b2b2b;&#10;            }&#10;            QTabBar::tab {&#10;                background-color: #3c3c3c;&#10;                color: white;&#10;                padding: 10px 15px;&#10;                margin-right: 2px;&#10;            }&#10;            QTabBar::tab:selected {&#10;                background-color: #2a82da;&#10;            }&#10;            QTabBar::tab:hover {&#10;                background-color: #4c4c4c;&#10;            }&#10;        &quot;&quot;&quot;)&#10;        &#10;    def create_menu_bar(self):&#10;        &quot;&quot;&quot;Create the application menu bar&quot;&quot;&quot;&#10;        menubar = self.menuBar()&#10;        &#10;        # File menu&#10;        file_menu = menubar.addMenu(&quot;&amp;File&quot;)&#10;        &#10;        export_action = QAction(&quot;&amp;Export Data&quot;, self)&#10;        export_action.setShortcut(&quot;Ctrl+E&quot;)&#10;        export_action.triggered.connect(self.export_data)&#10;        file_menu.addAction(export_action)&#10;        &#10;        file_menu.addSeparator()&#10;        &#10;        exit_action = QAction(&quot;E&amp;xit&quot;, self)&#10;        exit_action.setShortcut(&quot;Ctrl+Q&quot;)&#10;        exit_action.triggered.connect(self.close)&#10;        file_menu.addAction(exit_action)&#10;        &#10;        # Edit menu&#10;        edit_menu = menubar.addMenu(&quot;&amp;Edit&quot;)&#10;        &#10;        preferences_action = QAction(&quot;&amp;Preferences&quot;, self)&#10;        preferences_action.setShortcut(&quot;Ctrl+,&quot;)&#10;        preferences_action.triggered.connect(self.show_preferences)&#10;        edit_menu.addAction(preferences_action)&#10;        &#10;        # View menu&#10;        view_menu = menubar.addMenu(&quot;&amp;View&quot;)&#10;        &#10;        refresh_action = QAction(&quot;&amp;Refresh&quot;, self)&#10;        refresh_action.setShortcut(&quot;F5&quot;)&#10;        refresh_action.triggered.connect(self.refresh_data)&#10;        view_menu.addAction(refresh_action)&#10;        &#10;        # Help menu&#10;        help_menu = menubar.addMenu(&quot;&amp;Help&quot;)&#10;        &#10;        about_action = QAction(&quot;&amp;About&quot;, self)&#10;        about_action.triggered.connect(self.show_about)&#10;        help_menu.addAction(about_action)&#10;        &#10;    def on_tab_changed(self, index):&#10;        &quot;&quot;&quot;Handle tab change events&quot;&quot;&quot;&#10;        # Refresh data in the newly selected tab&#10;        current_tab = self.tabs.currentWidget()&#10;        if hasattr(current_tab, 'refresh_data'):&#10;            current_tab.refresh_data()&#10;            &#10;    def export_data(self):&#10;        &quot;&quot;&quot;Export data to file&quot;&quot;&quot;&#10;        QMessageBox.information(self, &quot;Export&quot;, &quot;Export functionality will be implemented soon!&quot;)&#10;        &#10;    def show_preferences(self):&#10;        &quot;&quot;&quot;Show preferences dialog&quot;&quot;&quot;&#10;        QMessageBox.information(self, &quot;Preferences&quot;, &quot;Preferences dialog will be implemented soon!&quot;)&#10;        &#10;    def refresh_data(self):&#10;        &quot;&quot;&quot;Refresh current tab data&quot;&quot;&quot;&#10;        current_tab = self.tabs.currentWidget()&#10;        if hasattr(current_tab, 'refresh_data'):&#10;            current_tab.refresh_data()&#10;            self.status_bar.showMessage(&quot;Data refreshed&quot;, 2000)&#10;            &#10;    def show_about(self):&#10;        &quot;&quot;&quot;Show about dialog&quot;&quot;&quot;&#10;        QMessageBox.about(&#10;            self,&#10;            &quot;About Budget Tracker&quot;,&#10;            &quot;Budget Tracker v1.0\n\n&quot;&#10;            &quot;A comprehensive budget management application\n&quot;&#10;            &quot;for Jeff &amp; Vanessa\n\n&quot;&#10;            &quot;© 2024 All rights reserved&quot;&#10;        )" />
              <option name="updatedContent" value="&quot;&quot;&quot;&#10;Main window for the budget application&#10;&quot;&quot;&quot;&#10;&#10;from PyQt6.QtWidgets import (&#10;    QMainWindow, QTabWidget, QWidget, QVBoxLayout,&#10;    QMenuBar, QMenu, QStatusBar, QMessageBox&#10;)&#10;from PyQt6.QtCore import Qt&#10;from PyQt6.QtGui import QAction, QIcon&#10;&#10;from gui.tabs.overview_tab import OverviewTab&#10;from gui.tabs.net_worth_tab import NetWorthTab&#10;from gui.tabs.budget_tab import BudgetTab&#10;from gui.tabs.presentation_tab import PresentationTab&#10;from gui.tabs.savings_tab import SavingsTab&#10;from gui.tabs.trends_tab import TrendsTab&#10;from gui.utils.styles import get_app_stylesheet&#10;&#10;class MainWindow(QMainWindow):&#10;    def __init__(self):&#10;        super().__init__()&#10;        self.setWindowTitle(&quot;Budget Tracker - Jeff &amp; Vanessa&quot;)&#10;        self.setGeometry(100, 100, 1400, 800)&#10;        &#10;        # Set up central widget and layout&#10;        central_widget = QWidget()&#10;        self.setCentralWidget(central_widget)&#10;        layout = QVBoxLayout(central_widget)&#10;        &#10;        # Create tab widget&#10;        self.tabs = QTabWidget()&#10;        layout.addWidget(self.tabs)&#10;        &#10;        # Create and add tabs&#10;        self.overview_tab = OverviewTab()&#10;        self.net_worth_tab = NetWorthTab()&#10;        self.budget_tab = BudgetTab()&#10;        self.presentation_tab = PresentationTab()&#10;        self.savings_tab = SavingsTab()&#10;        self.trends_tab = TrendsTab()&#10;        &#10;        self.tabs.addTab(self.overview_tab, &quot; Budget Overview&quot;)&#10;        self.tabs.addTab(self.net_worth_tab, &quot; Net Worth&quot;)&#10;        self.tabs.addTab(self.budget_tab, &quot; Budget&quot;)&#10;        self.tabs.addTab(self.presentation_tab, &quot; Monthly Presentation&quot;)&#10;        self.tabs.addTab(self.savings_tab, &quot; Savings Goals&quot;)&#10;        self.tabs.addTab(self.trends_tab, &quot; Trends&quot;)&#10;        &#10;        # Connect tab change signal&#10;        self.tabs.currentChanged.connect(self.on_tab_changed)&#10;        &#10;        # Create menu bar&#10;        self.create_menu_bar()&#10;        &#10;        # Create status bar&#10;        self.status_bar = QStatusBar()&#10;        self.setStatusBar(self.status_bar)&#10;        self.status_bar.showMessage(&quot;Ready&quot;)&#10;        &#10;        # Apply the proper light theme stylesheet&#10;        self.setStyleSheet(get_app_stylesheet())&#10;        &#10;    def create_menu_bar(self):&#10;        &quot;&quot;&quot;Create the application menu bar&quot;&quot;&quot;&#10;        menubar = self.menuBar()&#10;        &#10;        # File menu&#10;        file_menu = menubar.addMenu(&quot;&amp;File&quot;)&#10;        &#10;        export_action = QAction(&quot;&amp;Export Data&quot;, self)&#10;        export_action.setShortcut(&quot;Ctrl+E&quot;)&#10;        export_action.triggered.connect(self.export_data)&#10;        file_menu.addAction(export_action)&#10;        &#10;        file_menu.addSeparator()&#10;        &#10;        exit_action = QAction(&quot;E&amp;xit&quot;, self)&#10;        exit_action.setShortcut(&quot;Ctrl+Q&quot;)&#10;        exit_action.triggered.connect(self.close)&#10;        file_menu.addAction(exit_action)&#10;        &#10;        # Edit menu&#10;        edit_menu = menubar.addMenu(&quot;&amp;Edit&quot;)&#10;        &#10;        preferences_action = QAction(&quot;&amp;Preferences&quot;, self)&#10;        preferences_action.setShortcut(&quot;Ctrl+,&quot;)&#10;        preferences_action.triggered.connect(self.show_preferences)&#10;        edit_menu.addAction(preferences_action)&#10;        &#10;        # View menu&#10;        view_menu = menubar.addMenu(&quot;&amp;View&quot;)&#10;        &#10;        refresh_action = QAction(&quot;&amp;Refresh&quot;, self)&#10;        refresh_action.setShortcut(&quot;F5&quot;)&#10;        refresh_action.triggered.connect(self.refresh_data)&#10;        view_menu.addAction(refresh_action)&#10;        &#10;        # Help menu&#10;        help_menu = menubar.addMenu(&quot;&amp;Help&quot;)&#10;        &#10;        about_action = QAction(&quot;&amp;About&quot;, self)&#10;        about_action.triggered.connect(self.show_about)&#10;        help_menu.addAction(about_action)&#10;        &#10;    def on_tab_changed(self, index):&#10;        &quot;&quot;&quot;Handle tab change events&quot;&quot;&quot;&#10;        # Refresh data in the newly selected tab&#10;        current_tab = self.tabs.currentWidget()&#10;        if hasattr(current_tab, 'refresh_data'):&#10;            current_tab.refresh_data()&#10;            &#10;    def export_data(self):&#10;        &quot;&quot;&quot;Export data to file&quot;&quot;&quot;&#10;        QMessageBox.information(self, &quot;Export&quot;, &quot;Export functionality will be implemented soon!&quot;)&#10;        &#10;    def show_preferences(self):&#10;        &quot;&quot;&quot;Show preferences dialog&quot;&quot;&quot;&#10;        QMessageBox.information(self, &quot;Preferences&quot;, &quot;Preferences dialog will be implemented soon!&quot;)&#10;        &#10;    def refresh_data(self):&#10;        &quot;&quot;&quot;Refresh current tab data&quot;&quot;&quot;&#10;        current_tab = self.tabs.currentWidget()&#10;        if hasattr(current_tab, 'refresh_data'):&#10;            current_tab.refresh_data()&#10;            self.status_bar.showMessage(&quot;Data refreshed&quot;, 2000)&#10;            &#10;    def show_about(self):&#10;        &quot;&quot;&quot;Show about dialog&quot;&quot;&quot;&#10;        QMessageBox.about(&#10;            self,&#10;            &quot;About Budget Tracker&quot;,&#10;            &quot;Budget Tracker v1.0\n\n&quot;&#10;            &quot;A comprehensive budget management application\n&quot;&#10;            &quot;for Jeff &amp; Vanessa\n\n&quot;&#10;            &quot;© 2024 All rights reserved&quot;&#10;        )" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gui/tabs/budget_tab.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gui/tabs/budget_tab.py" />
              <option name="originalContent" value="&quot;&quot;&quot;&#10;Budget Tab - Manages income and expenses with two sub-tabs&#10;&quot;&quot;&quot;&#10;&#10;from PyQt6.QtWidgets import (&#10;    QWidget, QVBoxLayout, QHBoxLayout, QLabel, QPushButton,&#10;    QTableWidget, QTableWidgetItem, QGroupBox, QGridLayout,&#10;    QComboBox, QLineEdit, QDateEdit, QTabWidget,&#10;    QHeaderView, QMessageBox, QFileDialog, QDialog,&#10;    QDialogButtonBox&#10;)&#10;from PyQt6.QtCore import Qt, QDate&#10;from PyQt6.QtGui import QFont&#10;from datetime import datetime&#10;import csv&#10;import os&#10;from database.db_manager import DatabaseManager&#10;&#10;class BudgetTab(QWidget):&#10;    def __init__(self):&#10;        super().__init__()&#10;        self.db = DatabaseManager()&#10;        self.init_ui()&#10;    def init_ui(self):&#10;        &quot;&quot;&quot;Initialize the UI with Income and Expenses sub-tabs&quot;&quot;&quot;&#10;        layout = QVBoxLayout()&#10;        &#10;        # Header&#10;        header_layout = QHBoxLayout()&#10;        title = QLabel(&quot;Budget Management&quot;)&#10;        title.setFont(QFont(&quot;Arial&quot;, 18, QFont.Weight.Bold))&#10;        header_layout.addWidget(title)&#10;        header_layout.addStretch()&#10;        &#10;        layout.addLayout(header_layout)&#10;        &#10;        # Create sub-tabs for Income and Expenses&#10;        self.sub_tabs = QTabWidget()&#10;        &#10;        # Income Tab&#10;        self.income_tab = IncomeSubTab()&#10;        self.sub_tabs.addTab(self.income_tab, &quot; Income&quot;)&#10;        &#10;        # Expenses Tab&#10;        self.expenses_tab = ExpensesSubTab()&#10;        self.sub_tabs.addTab(self.expenses_tab, &quot; Expenses&quot;)&#10;        &#10;        layout.addWidget(self.sub_tabs)&#10;        self.setLayout(layout)&#10;        &#10;    def refresh_data(self):&#10;        &quot;&quot;&quot;Refresh data in both sub-tabs&quot;&quot;&quot;&#10;        self.income_tab.refresh_data()&#10;        self.expenses_tab.refresh_data()&#10;&#10;&#10;class IncomeSubTab(QWidget):&#10;    &quot;&quot;&quot;Sub-tab for managing income entries&quot;&quot;&quot;&#10;    &#10;    def __init__(self):&#10;        super().__init__()&#10;        self.db = DatabaseManager()&#10;        self.init_ui()&#10;        self.refresh_data()&#10;        &#10;    def init_ui(self):&#10;        &quot;&quot;&quot;Initialize the Income UI&quot;&quot;&quot;&#10;        layout = QVBoxLayout()&#10;        &#10;        # Top section - Add Income Form&#10;        form_group = QGroupBox(&quot;Add Income&quot;)&#10;        form_layout = QGridLayout()&#10;        &#10;        # Person selector&#10;        form_layout.addWidget(QLabel(&quot;Person:&quot;), 0, 0)&#10;        self.person_combo = QComboBox()&#10;        self.person_combo.addItems([&quot;Jeff&quot;, &quot;Vanessa&quot;])&#10;        form_layout.addWidget(self.person_combo, 0, 1)&#10;        &#10;        # Amount&#10;        form_layout.addWidget(QLabel(&quot;Amount:&quot;), 0, 2)&#10;        self.amount_input = QLineEdit()&#10;        self.amount_input.setPlaceholderText(&quot;Enter income amount&quot;)&#10;        form_layout.addWidget(self.amount_input, 0, 3)&#10;        &#10;        # Date&#10;        form_layout.addWidget(QLabel(&quot;Date:&quot;), 1, 0)&#10;        self.date_input = QDateEdit()&#10;        self.date_input.setDate(QDate.currentDate())&#10;        self.date_input.setCalendarPopup(True)&#10;        form_layout.addWidget(self.date_input, 1, 1)&#10;        &#10;        # Description&#10;        form_layout.addWidget(QLabel(&quot;Description:&quot;), 1, 2)&#10;        self.description_input = QLineEdit()&#10;        self.description_input.setPlaceholderText(&quot;e.g., Monthly Salary, Bonus, etc.&quot;)&#10;        form_layout.addWidget(self.description_input, 1, 3)&#10;        &#10;        # Add button&#10;        add_btn = QPushButton(&quot;Add Income&quot;)&#10;        add_btn.setStyleSheet(&quot;&quot;&quot;&#10;            QPushButton {&#10;                background-color: #2a82da;&#10;                color: white;&#10;                padding: 8px;&#10;                font-weight: bold;&#10;                border-radius: 4px;&#10;            }&#10;            QPushButton:hover {&#10;                background-color: #1e5fa8;&#10;            }&#10;        &quot;&quot;&quot;)&#10;        add_btn.clicked.connect(self.add_income)&#10;        form_layout.addWidget(add_btn, 2, 0, 1, 4)&#10;        &#10;        form_group.setLayout(form_layout)&#10;        layout.addWidget(form_group)&#10;        &#10;        # Monthly Summary Section&#10;        summary_layout = QHBoxLayout()&#10;        &#10;        # Jeff's Income Summary&#10;        self.jeff_summary = self.create_summary_card(&quot;Jeff's Monthly Income&quot;, &quot;$0.00&quot;)&#10;        summary_layout.addWidget(self.jeff_summary)&#10;        &#10;        # Vanessa's Income Summary&#10;        self.vanessa_summary = self.create_summary_card(&quot;Vanessa's Monthly Income&quot;, &quot;$0.00&quot;)&#10;        summary_layout.addWidget(self.vanessa_summary)&#10;        &#10;        # Total Income Summary&#10;        self.total_summary = self.create_summary_card(&quot;Total Monthly Income&quot;, &quot;$0.00&quot;)&#10;        summary_layout.addWidget(self.total_summary)&#10;        &#10;        layout.addLayout(summary_layout)&#10;        &#10;        # Income History Table&#10;        history_group = QGroupBox(&quot;Income History&quot;)&#10;        history_layout = QVBoxLayout()&#10;        &#10;        # Filter controls&#10;        filter_layout = QHBoxLayout()&#10;        &#10;        filter_layout.addWidget(QLabel(&quot;Filter by:&quot;))&#10;        &#10;        self.filter_person = QComboBox()&#10;        self.filter_person.addItems([&quot;All&quot;, &quot;Jeff&quot;, &quot;Vanessa&quot;])&#10;        self.filter_person.currentTextChanged.connect(self.refresh_data)&#10;        filter_layout.addWidget(self.filter_person)&#10;        &#10;        filter_layout.addWidget(QLabel(&quot;Month:&quot;))&#10;        self.filter_month = QComboBox()&#10;        self.filter_month.addItems([&#10;            &quot;All&quot;, &quot;January&quot;, &quot;February&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;, &quot;June&quot;,&#10;            &quot;July&quot;, &quot;August&quot;, &quot;September&quot;, &quot;October&quot;, &quot;November&quot;, &quot;December&quot;&#10;        ])&#10;        self.filter_month.setCurrentIndex(datetime.now().month)&#10;        self.filter_month.currentIndexChanged.connect(self.refresh_data)&#10;        filter_layout.addWidget(self.filter_month)&#10;        &#10;        filter_layout.addWidget(QLabel(&quot;Year:&quot;))&#10;        self.filter_year = QComboBox()&#10;        current_year = datetime.now().year&#10;        self.filter_year.addItems([&quot;All&quot;] + [str(year) for year in range(current_year - 2, current_year + 2)])&#10;        self.filter_year.setCurrentText(str(current_year))&#10;        self.filter_year.currentTextChanged.connect(self.refresh_data)&#10;        filter_layout.addWidget(self.filter_year)&#10;        &#10;        filter_layout.addStretch()&#10;        &#10;        # Delete button&#10;        delete_btn = QPushButton(&quot;Delete Selected&quot;)&#10;        delete_btn.clicked.connect(self.delete_selected_income)&#10;        filter_layout.addWidget(delete_btn)&#10;        &#10;        history_layout.addLayout(filter_layout)&#10;        &#10;        # Income table&#10;        self.income_table = QTableWidget()&#10;        self.income_table.setColumnCount(5)&#10;        self.income_table.setHorizontalHeaderLabels([&#10;            &quot;Date&quot;, &quot;Person&quot;, &quot;Amount&quot;, &quot;Description&quot;, &quot;ID&quot;&#10;        ])&#10;        self.income_table.hideColumn(4)  # Hide ID column&#10;        &#10;        # Set column widths&#10;        header = self.income_table.horizontalHeader()&#10;        header.setSectionResizeMode(0, QHeaderView.ResizeMode.ResizeToContents)&#10;        header.setSectionResizeMode(1, QHeaderView.ResizeMode.ResizeToContents)&#10;        header.setSectionResizeMode(2, QHeaderView.ResizeMode.ResizeToContents)&#10;        header.setSectionResizeMode(3, QHeaderView.ResizeMode.Stretch)&#10;        &#10;        history_layout.addWidget(self.income_table)&#10;        history_group.setLayout(history_layout)&#10;        &#10;        layout.addWidget(history_group)&#10;        self.setLayout(layout)&#10;        &#10;    def create_summary_card(self, title, value):&#10;        &quot;&quot;&quot;Create a summary card widget&quot;&quot;&quot;&#10;        group = QGroupBox(title)&#10;        group.setStyleSheet(&quot;&quot;&quot;&#10;            QGroupBox {&#10;                font-weight: bold;&#10;                border: 2px solid #555;&#10;                border-radius: 5px;&#10;                margin-top: 10px;&#10;                padding-top: 10px;&#10;            }&#10;        &quot;&quot;&quot;)&#10;        &#10;        layout = QVBoxLayout()&#10;        value_label = QLabel(value)&#10;        value_label.setAlignment(Qt.AlignmentFlag.AlignCenter)&#10;        value_label.setFont(QFont(&quot;Arial&quot;, 16, QFont.Weight.Bold))&#10;        value_label.setStyleSheet(&quot;color: #2a82da;&quot;)&#10;        layout.addWidget(value_label)&#10;        &#10;        group.setLayout(layout)&#10;        group.value_label = value_label  # Store reference for updating&#10;        return group&#10;        &#10;    def add_income(self):&#10;        &quot;&quot;&quot;Add income entry to database&quot;&quot;&quot;&#10;        try:&#10;            person = self.person_combo.currentText()&#10;            amount_text = self.amount_input.text().strip()&#10;            date = self.date_input.date().toString(&quot;yyyy-MM-dd&quot;)&#10;            description = self.description_input.text().strip()&#10;            &#10;            # Validate amount&#10;            if not amount_text:&#10;                QMessageBox.warning(self, &quot;Warning&quot;, &quot;Please enter an amount&quot;)&#10;                return&#10;                &#10;            try:&#10;                amount = float(amount_text.replace(&quot;,&quot;, &quot;&quot;).replace(&quot;$&quot;, &quot;&quot;))&#10;            except ValueError:&#10;                QMessageBox.warning(self, &quot;Warning&quot;, &quot;Please enter a valid number for amount&quot;)&#10;                return&#10;            &#10;            # Add to database&#10;            self.db.add_income(person, amount, date, description)&#10;            &#10;            # Clear form&#10;            self.amount_input.clear()&#10;            self.description_input.clear()&#10;            &#10;            # Refresh display&#10;            self.refresh_data()&#10;            &#10;            QMessageBox.information(self, &quot;Success&quot;, &quot;Income added successfully!&quot;)&#10;            &#10;        except Exception as e:&#10;            QMessageBox.critical(self, &quot;Error&quot;, f&quot;Failed to add income: {str(e)}&quot;)&#10;            &#10;    def delete_selected_income(self):&#10;        &quot;&quot;&quot;Delete selected income entries&quot;&quot;&quot;&#10;        selected_rows = []&#10;        for row in range(self.income_table.rowCount()):&#10;            if self.income_table.item(row, 0) and self.income_table.item(row, 0).isSelected():&#10;                selected_rows.append(row)&#10;            elif any(self.income_table.item(row, col) and self.income_table.item(row, col).isSelected()&#10;                    for col in range(self.income_table.columnCount())):&#10;                selected_rows.append(row)&#10;&#10;        if not selected_rows:&#10;            QMessageBox.warning(self, &quot;Warning&quot;, &quot;Please select one or more income entries to delete.&quot;)&#10;            return&#10;&#10;        # Confirm deletion&#10;        reply = QMessageBox.question(&#10;            self,&#10;            &quot;Confirm Deletion&quot;,&#10;            f&quot;Are you sure you want to delete {len(selected_rows)} income entr{'y' if len(selected_rows) == 1 else 'ies'}?\n\nThis action cannot be undone.&quot;,&#10;            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,&#10;            QMessageBox.StandardButton.No&#10;        )&#10;&#10;        if reply != QMessageBox.StandardButton.Yes:&#10;            return&#10;&#10;        try:&#10;            # Delete each selected income entry&#10;            deleted_count = 0&#10;            for row in reversed(selected_rows):  # Reverse to maintain row indices&#10;                income_id_item = self.income_table.item(row, 4)  # ID is in column 4&#10;                if income_id_item:&#10;                    income_id = int(income_id_item.text())&#10;&#10;                    # Delete from database using the model's delete method&#10;                    from database.models import IncomeModel&#10;                    IncomeModel.delete(self.db, income_id)&#10;                    deleted_count += 1&#10;&#10;            # Refresh the table&#10;            self.refresh_data()&#10;&#10;            QMessageBox.information(&#10;                self,&#10;                &quot;Success&quot;,&#10;                f&quot;Successfully deleted {deleted_count} income entr{'y' if deleted_count == 1 else 'ies'}.&quot;&#10;            )&#10;&#10;        except Exception as e:&#10;            QMessageBox.critical(self, &quot;Error&quot;, f&quot;Failed to delete income entries: {str(e)}&quot;)&#10;&#10;    def refresh_data(self):&#10;        &quot;&quot;&quot;Refresh the income data display&quot;&quot;&quot;&#10;        try:&#10;            # Build filter parameters&#10;            person_filter = None if self.filter_person.currentText() == &quot;All&quot; else self.filter_person.currentText()&#10;            &#10;            # Date filters&#10;            start_date = None&#10;            end_date = None&#10;            &#10;            if self.filter_month.currentIndex() &gt; 0 and self.filter_year.currentText() != &quot;All&quot;:&#10;                year = int(self.filter_year.currentText())&#10;                month = self.filter_month.currentIndex()&#10;                start_date = f&quot;{year:04d}-{month:02d}-01&quot;&#10;                if month == 12:&#10;                    end_date = f&quot;{year+1:04d}-01-01&quot;&#10;                else:&#10;                    end_date = f&quot;{year:04d}-{month+1:02d}-01&quot;&#10;            &#10;            # Get income data&#10;            income_data = self.db.get_income(start_date, end_date, person_filter)&#10;            &#10;            # Clear and populate table&#10;            self.income_table.setRowCount(0)&#10;            &#10;            jeff_total = 0&#10;            vanessa_total = 0&#10;            &#10;            for income in income_data:&#10;                row = self.income_table.rowCount()&#10;                self.income_table.insertRow(row)&#10;                &#10;                self.income_table.setItem(row, 0, QTableWidgetItem(income['date']))&#10;                self.income_table.setItem(row, 1, QTableWidgetItem(income['person']))&#10;                &#10;                amount = income['amount']&#10;                self.income_table.setItem(row, 2, QTableWidgetItem(f&quot;${amount:,.2f}&quot;))&#10;                self.income_table.setItem(row, 3, QTableWidgetItem(income.get('description', '')))&#10;                self.income_table.setItem(row, 4, QTableWidgetItem(str(income['id'])))&#10;                &#10;                # Calculate totals for current month&#10;                if income['person'] == 'Jeff':&#10;                    jeff_total += amount&#10;                else:&#10;                    vanessa_total += amount&#10;            &#10;            # Update summary cards&#10;            self.jeff_summary.value_label.setText(f&quot;${jeff_total:,.2f}&quot;)&#10;            self.vanessa_summary.value_label.setText(f&quot;${vanessa_total:,.2f}&quot;)&#10;            self.total_summary.value_label.setText(f&quot;${jeff_total + vanessa_total:,.2f}&quot;)&#10;            &#10;        except Exception as e:&#10;            print(f&quot;Error refreshing income data: {e}&quot;)&#10;&#10;&#10;class ExpensesSubTab(QWidget):&#10;    &quot;&quot;&quot;Sub-tab for managing expense entries&quot;&quot;&quot;&#10;    &#10;    def __init__(self):&#10;        super().__init__()&#10;        self.db = DatabaseManager()&#10;        self.categories_data = {}&#10;        self.init_ui()&#10;        self.categories_data = {}&#10;&#10;        self.load_categories()&#10;    def init_ui(self):&#10;        &quot;&quot;&quot;Initialize the Expenses UI&quot;&quot;&quot;&#10;        layout = QVBoxLayout()&#10;        &#10;        # Top section - Add Expense Form&#10;        form_group = QGroupBox(&quot;Add Expense&quot;)&#10;        form_layout = QGridLayout()&#10;        &#10;        # Row 1&#10;        form_layout.addWidget(QLabel(&quot;Person:&quot;), 0, 0)&#10;        self.person_combo = QComboBox()&#10;        self.person_combo.addItems([&quot;Jeff&quot;, &quot;Vanessa&quot;])&#10;        form_layout.addWidget(self.person_combo, 0, 1)&#10;        &#10;        form_layout.addWidget(QLabel(&quot;Amount:&quot;), 0, 2)&#10;        self.amount_input = QLineEdit()&#10;        self.amount_input.setPlaceholderText(&quot;Enter expense amount&quot;)&#10;        form_layout.addWidget(self.amount_input, 0, 3)&#10;        &#10;        form_layout.addWidget(QLabel(&quot;Date:&quot;), 0, 4)&#10;        self.date_input = QDateEdit()&#10;        self.date_input.setDate(QDate.currentDate())&#10;        self.date_input.setCalendarPopup(True)&#10;        form_layout.addWidget(self.date_input, 0, 5)&#10;        &#10;        # Row 2&#10;        form_layout.addWidget(QLabel(&quot;Category:&quot;), 1, 0)&#10;        self.category_combo = QComboBox()&#10;        self.category_combo.currentTextChanged.connect(self.on_category_changed)&#10;        form_layout.addWidget(self.category_combo, 1, 1)&#10;        &#10;        form_layout.addWidget(QLabel(&quot;Subcategory:&quot;), 1, 2)&#10;        self.subcategory_combo = QComboBox()&#10;        form_layout.addWidget(self.subcategory_combo, 1, 3)&#10;        &#10;        form_layout.addWidget(QLabel(&quot;Payment Method:&quot;), 1, 4)&#10;        self.payment_combo = QComboBox()&#10;        self.payment_combo.addItems([&quot;Cash&quot;, &quot;Credit Card&quot;, &quot;Debit Card&quot;, &quot;Check&quot;, &quot;Transfer&quot;, &quot;Other&quot;])&#10;        form_layout.addWidget(self.payment_combo, 1, 5)&#10;        &#10;        # Row 3&#10;        form_layout.addWidget(QLabel(&quot;Description:&quot;), 2, 0)&#10;        self.description_input = QLineEdit()&#10;        self.description_input.setPlaceholderText(&quot;Optional description&quot;)&#10;        form_layout.addWidget(self.description_input, 2, 1, 1, 5)&#10;&#10;        form_layout.addWidget(self.description_input, 2, 1, 1, 5)&#10;                background-color: #2a82da;&#10;                color: white;&#10;                padding: 8px;&#10;                font-weight: bold;&#10;                border-radius: 4px;&#10;            }&#10;            QPushButton:hover {&#10;                background-color: #1e5fa8;&#10;            }&#10;        &quot;&quot;&quot;)&#10;        add_btn.clicked.connect(self.add_expense)&#10;        button_layout.addWidget(add_btn)&#10;        &#10;        import_btn = QPushButton(&quot;Import from File&quot;)&#10;        import_btn.setStyleSheet(&quot;&quot;&quot;&#10;            QPushButton {&#10;                background-color: #5cb85c;&#10;                color: white;&#10;                padding: 8px;&#10;                font-weight: bold;&#10;                border-radius: 4px;&#10;            }&#10;            QPushButton:hover {&#10;                background-color: #449d44;&#10;            }&#10;        &quot;&quot;&quot;)&#10;        import_btn.clicked.connect(self.import_expenses)&#10;        button_layout.addWidget(import_btn)&#10;        &#10;        button_layout.addStretch()&#10;        &#10;        form_layout.addLayout(button_layout, 3, 0, 1, 6)&#10;        &#10;        form_group.setLayout(form_layout)&#10;        layout.addWidget(form_group)&#10;        &#10;        # Monthly Summary Section&#10;        summary_layout = QHBoxLayout()&#10;        &#10;        # Jeff's Expenses Summary&#10;        self.jeff_summary = self.create_summary_card(&quot;Jeff's Monthly Expenses&quot;, &quot;$0.00&quot;)&#10;        summary_layout.addWidget(self.jeff_summary)&#10;        &#10;        # Vanessa's Expenses Summary&#10;        self.vanessa_summary = self.create_summary_card(&quot;Vanessa's Monthly Expenses&quot;, &quot;$0.00&quot;)&#10;        summary_layout.addWidget(self.vanessa_summary)&#10;        &#10;        # Total Expenses Summary&#10;        self.total_summary = self.create_summary_card(&quot;Total Monthly Expenses&quot;, &quot;$0.00&quot;)&#10;        summary_layout.addWidget(self.total_summary)&#10;        &#10;        # Top Category Summary&#10;        self.top_category_summary = self.create_summary_card(&quot;Top Category&quot;, &quot;None&quot;)&#10;        summary_layout.addWidget(self.top_category_summary)&#10;        &#10;        layout.addLayout(summary_layout)&#10;        &#10;        # Expense History Table&#10;        history_group = QGroupBox(&quot;Expense History&quot;)&#10;        history_layout = QVBoxLayout()&#10;        &#10;        # Filter controls&#10;        filter_layout = QHBoxLayout()&#10;        &#10;        filter_layout.addWidget(QLabel(&quot;Filter by:&quot;))&#10;        &#10;        self.filter_person = QComboBox()&#10;        self.filter_person.addItems([&quot;All&quot;, &quot;Jeff&quot;, &quot;Vanessa&quot;])&#10;        self.filter_person.currentTextChanged.connect(self.refresh_data)&#10;        filter_layout.addWidget(self.filter_person)&#10;        &#10;        self.filter_category = QComboBox()&#10;        self.filter_category.addItems([&quot;All Categories&quot;])&#10;        self.filter_category.currentTextChanged.connect(self.refresh_data)&#10;        filter_layout.addWidget(self.filter_category)&#10;        &#10;        filter_layout.addWidget(QLabel(&quot;Month:&quot;))&#10;        self.filter_month = QComboBox()&#10;        self.filter_month.addItems([&#10;            &quot;All&quot;, &quot;January&quot;, &quot;February&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;, &quot;June&quot;,&#10;            &quot;July&quot;, &quot;August&quot;, &quot;September&quot;, &quot;October&quot;, &quot;November&quot;, &quot;December&quot;&#10;        ])&#10;        self.filter_month.setCurrentIndex(datetime.now().month)&#10;        self.filter_month.currentIndexChanged.connect(self.refresh_data)&#10;        filter_layout.addWidget(self.filter_month)&#10;        &#10;        filter_layout.addWidget(QLabel(&quot;Year:&quot;))&#10;        self.filter_year = QComboBox()&#10;        current_year = datetime.now().year&#10;        self.filter_year.addItems([&quot;All&quot;] + [str(year) for year in range(current_year - 2, current_year + 2)])&#10;        self.filter_year.setCurrentText(str(current_year))&#10;        self.filter_year.currentTextChanged.connect(self.refresh_data)&#10;        filter_layout.addWidget(self.filter_year)&#10;        &#10;        filter_layout.addStretch()&#10;        &#10;        # Export and Delete buttons&#10;        export_btn = QPushButton(&quot;Export to CSV&quot;)&#10;        export_btn.clicked.connect(self.export_expenses)&#10;        filter_layout.addWidget(export_btn)&#10;        &#10;        delete_btn = QPushButton(&quot;Delete Selected&quot;)&#10;        delete_btn.clicked.connect(self.delete_selected_expenses)&#10;        filter_layout.addWidget(delete_btn)&#10;        &#10;        history_layout.addLayout(filter_layout)&#10;        &#10;        # Expense table&#10;        self.expense_table = QTableWidget()&#10;        self.expense_table.setColumnCount(8)&#10;        self.expense_table.setHorizontalHeaderLabels([&#10;            &quot;Date&quot;, &quot;Person&quot;, &quot;Amount&quot;, &quot;Category&quot;, &quot;Subcategory&quot;, &#10;            &quot;Description&quot;, &quot;Payment&quot;, &quot;ID&quot;&#10;        ])&#10;        self.expense_table.hideColumn(7)  # Hide ID column&#10;        &#10;        # Set column widths&#10;        header = self.expense_table.horizontalHeader()&#10;        for i in range(7):&#10;            if i == 5:  # Description column&#10;                header.setSectionResizeMode(i, QHeaderView.ResizeMode.Stretch)&#10;            else:&#10;                header.setSectionResizeMode(i, QHeaderView.ResizeMode.ResizeToContents)&#10;        &#10;        history_layout.addWidget(self.expense_table)&#10;        history_group.setLayout(history_layout)&#10;        &#10;        layout.addWidget(history_group)&#10;        self.setLayout(layout)&#10;        &#10;    def create_summary_card(self, title, value):&#10;        &quot;&quot;&quot;Create a summary card widget&quot;&quot;&quot;&#10;        group = QGroupBox(title)&#10;        group.setStyleSheet(&quot;&quot;&quot;&#10;            QGroupBox {&#10;                font-weight: bold;&#10;                border: 2px solid #555;&#10;                border-radius: 5px;&#10;                margin-top: 10px;&#10;                padding-top: 10px;&#10;                min-width: 150px;&#10;            }&#10;        &quot;&quot;&quot;)&#10;        &#10;        layout = QVBoxLayout()&#10;        value_label = QLabel(value)&#10;        value_label.setAlignment(Qt.AlignmentFlag.AlignCenter)&#10;        value_label.setFont(QFont(&quot;Arial&quot;, 14, QFont.Weight.Bold))&#10;        value_label.setStyleSheet(&quot;color: #d9534f;&quot;)&#10;        layout.addWidget(value_label)&#10;        &#10;        group.setLayout(layout)&#10;        group.value_label = value_label  # Store reference for updating&#10;        return group&#10;        &#10;    def load_categories(self):&#10;        &quot;&quot;&quot;Load categories from database&quot;&quot;&quot;&#10;        try:&#10;            categories = self.db.get_categories()&#10;&#10;            # Organize categories&#10;            self.categories_data = {}&#10;            for cat in categories:&#10;        &quot;&quot;&quot;Load categories from database&quot;&quot;&quot;&#10;                subcategory = cat['subcategory']&#10;            categories = self.db.get_categories()&#10;&#10;            # Organize categories&#10;            self.categories_data = {}&#10;            for cat in categories:&#10;                category = cat['category']&#10;                subcategory = cat['subcategory']&#10;&#10;                if category not in self.categories_data:&#10;                    self.categories_data[category] = []&#10;                self.categories_data[category].append(subcategory)&#10;                    self.categories_data[category] = []&#10;                self.categories_data[category].append(subcategory)&#10;&#10;            # Populate category combo&#10;            self.category_combo.clear()&#10;            self.category_combo.addItems(sorted(self.categories_data.keys()))&#10;            &#10;            # Populate filter category combo&#10;            self.filter_category.clear()&#10;            self.filter_category.addItems([&quot;All Categories&quot;] + sorted(self.categories_data.keys()))&#10;            &#10;        except Exception as e:&#10;            print(f&quot;Error loading categories: {e}&quot;)&#10;            &#10;    def on_category_changed(self, category):&#10;        &quot;&quot;&quot;Update subcategories when category changes&quot;&quot;&quot;&#10;        self.subcategory_combo.clear()&#10;        if category in self.categories_data:&#10;            self.subcategory_combo.addItems(self.categories_data[category])&#10;            &#10;    def add_expense(self):&#10;        &quot;&quot;&quot;Add expense entry to database&quot;&quot;&quot;&#10;        try:&#10;            person = self.person_combo.currentText()&#10;            amount_text = self.amount_input.text().strip()&#10;            date = self.date_input.date().toString(&quot;yyyy-MM-dd&quot;)&#10;            category = self.category_combo.currentText()&#10;            subcategory = self.subcategory_combo.currentText()&#10;            payment_method = self.payment_combo.currentText()&#10;&#10;            # Validate inputs&#10;            if not amount_text:&#10;                QMessageBox.warning(self, &quot;Warning&quot;, &quot;Please enter an amount&quot;)&#10;                return&#10;                &#10;            if not category or not subcategory:&#10;                QMessageBox.warning(self, &quot;Warning&quot;, &quot;Please select category and subcategory&quot;)&#10;                return&#10;                &#10;            try:&#10;                amount = float(amount_text.replace(&quot;,&quot;, &quot;&quot;).replace(&quot;$&quot;, &quot;&quot;))&#10;            except ValueError:&#10;                QMessageBox.warning(self, &quot;Warning&quot;, &quot;Please enter a valid number for amount&quot;)&#10;                return&#10;            # Add to database&#10;            self.db.add_expense(person, amount, date, category, subcategory,&#10;                              description, payment_method)&#10;&#10;            # Clear form&#10;            self.amount_input.clear()&#10;            self.description_input.clear()&#10;            # Refresh display&#10;            self.refresh_data()&#10;            &#10;            QMessageBox.information(self, &quot;Success&quot;, &quot;Expense added successfully!&quot;)&#10;            &#10;        except Exception as e:&#10;            QMessageBox.critical(self, &quot;Error&quot;, f&quot;Failed to add expense: {str(e)}&quot;)&#10;            &#10;    def import_expenses(self):&#10;        &quot;&quot;&quot;Import expenses from CSV or TXT file using ExpenseLoader&quot;&quot;&quot;&#10;        try:&#10;            file_path, _ = QFileDialog.getOpenFileName(&#10;                self, &#10;                &quot;Import Expenses&quot;, &#10;                &quot;&quot;, &#10;                &quot;CSV Files (*.csv);;Text Files (*.txt);;All Files (*.*)&quot;&#10;            )&#10;            &#10;            if not file_path:&#10;                return&#10;            &#10;            # Use ExpenseLoader to parse the file&#10;            loader = ExpenseLoader()&#10;            expenses = []&#10;            errors = []&#10;&#10;            if file_path.lower().endswith('.csv'):&#10;                expenses, errors = loader.load_csv_file(file_path)&#10;            elif file_path.lower().endswith('.txt'):&#10;                expenses, errors = loader.load_txt_file(file_path)&#10;            else:&#10;                # Try CSV first, then TXT&#10;                expenses, errors = loader.load_csv_file(file_path)&#10;                if not expenses and not errors:&#10;                    expenses, errors = loader.load_txt_file(file_path)&#10;&#10;            # Show errors if any&#10;            if errors:&#10;                error_dialog = QMessageBox()&#10;                error_dialog.setWindowTitle(&quot;Import Warnings&quot;)&#10;                error_dialog.setIcon(QMessageBox.Icon.Warning)&#10;                error_dialog.setText(f&quot;Found {len(errors)} issues while parsing the file:&quot;)&#10;                error_dialog.setDetailedText(&quot;\n&quot;.join(errors))&#10;                error_dialog.exec()&#10;&#10;            if not expenses:&#10;                QMessageBox.warning(self, &quot;Warning&quot;, &quot;No valid expenses found in the file&quot;)&#10;                return&#10;&#10;            # Validate expenses&#10;            valid_expenses, validation_errors = loader.validate_expenses(expenses)&#10;&#10;            if validation_errors:&#10;                error_dialog = QMessageBox()&#10;                error_dialog.setWindowTitle(&quot;Validation Errors&quot;)&#10;                error_dialog.setIcon(QMessageBox.Icon.Warning)&#10;                error_dialog.setText(f&quot;Found {len(validation_errors)} validation issues:&quot;)&#10;                error_dialog.setDetailedText(&quot;\n&quot;.join(validation_errors))&#10;                error_dialog.exec()&#10;&#10;            if not valid_expenses:&#10;                QMessageBox.warning(self, &quot;Warning&quot;, &quot;No valid expenses after validation&quot;)&#10;                return&#10;&#10;            # Show preview dialog&#10;            # Show preview dialog&#10;            preview_dialog = ExpensePreviewDialog(valid_expenses, self.categories_data)&#10;&#10;                final_expenses = preview_dialog.get_final_expenses()&#10;                        self,&#10;                        &quot;Success&quot;, &#10;                        f&quot;Successfully imported {len(final_expenses)} expenses!\n\n&quot;&#10;                        f&quot;Parsing errors: {len(errors)}\n&quot;&#10;                        f&quot;Validation errors: {len(validation_errors)}\n&quot;&#10;                        f&quot;Successfully imported: {len(final_expenses)}&quot;&#10;                    )&#10;                    &#10;        except Exception as e:&#10;            QMessageBox.critical(self, &quot;Error&quot;, f&quot;Failed to import expenses: {str(e)}&quot;)&#10;&#10;    def export_expenses(self):&#10;        &quot;&quot;&quot;Export expenses to CSV file&quot;&quot;&quot;&#10;        try:&#10;            file_path, _ = QFileDialog.getSaveFileName(&#10;                self,&#10;                &quot;Export Expenses&quot;,&#10;                &quot;CSV Files (*.csv)&quot;&#10;            )&#10;            &#10;            if not file_path:&#10;                return&#10;                &#10;            # Get current filter settings&#10;            person_filter = None if self.filter_person.currentText() == &quot;All&quot; else self.filter_person.currentText()&#10;            category_filter = None if self.filter_category.currentText() == &quot;All Categories&quot; else self.filter_category.currentText()&#10;            &#10;            # Build date filters&#10;            start_date = None&#10;            end_date = None&#10;            &#10;            if self.filter_month.currentIndex() &gt; 0 and self.filter_year.currentText() != &quot;All&quot;:&#10;                year = int(self.filter_year.currentText())&#10;                month = self.filter_month.currentIndex()&#10;                start_date = f&quot;{year:04d}-{month:02d}-01&quot;&#10;                if month == 12:&#10;                    end_date = f&quot;{year+1:04d}-01-01&quot;&#10;                else:&#10;                    end_date = f&quot;{year:04d}-{month+1:02d}-01&quot;&#10;            &#10;            # Get expense data&#10;            expenses = self.db.get_expenses(start_date, end_date, person_filter, category_filter)&#10;            &#10;            # Write to CSV&#10;            with open(file_path, 'w', newline='') as csvfile:&#10;                fieldnames = ['date', 'person', 'amount', 'category', 'subcategory', &#10;                            'description', 'payment_method']&#10;                writer = csv.DictWriter(csvfile, fieldnames=fieldnames)&#10;                &#10;                writer.writeheader()&#10;                for expense in expenses:&#10;                    writer.writerow({&#10;                        'date': expense['date'],&#10;                        'person': expense['person'],&#10;                        'amount': expense['amount'],&#10;                        'category': expense['category'],&#10;                        'subcategory': expense['subcategory'],&#10;                        'description': expense.get('description', ''),&#10;                        'payment_method': expense.get('payment_method', '')&#10;                    })&#10;            &#10;            QMessageBox.information(self, &quot;Success&quot;, f&quot;Expenses exported to {file_path}&quot;)&#10;            &#10;        except Exception as e:&#10;            QMessageBox.critical(self, &quot;Error&quot;, f&quot;Failed to export expenses: {str(e)}&quot;)&#10;            &#10;    def delete_selected_expenses(self):&#10;        &quot;&quot;&quot;Delete selected expense entries&quot;&quot;&quot;&#10;        selected_rows = []&#10;        for row in range(self.expense_table.rowCount()):&#10;            if self.expense_table.item(row, 0) and self.expense_table.item(row, 0).isSelected():&#10;                selected_rows.append(row)&#10;            elif any(self.expense_table.item(row, col) and self.expense_table.item(row, col).isSelected()&#10;                    for col in range(self.expense_table.columnCount())):&#10;                selected_rows.append(row)&#10;&#10;        if not selected_rows:&#10;            QMessageBox.warning(self, &quot;Warning&quot;, &quot;Please select one or more expense entries to delete.&quot;)&#10;            return&#10;&#10;        # Confirm deletion&#10;        reply = QMessageBox.question(&#10;            self,&#10;            &quot;Confirm Deletion&quot;,&#10;            f&quot;Are you sure you want to delete {len(selected_rows)} expense entr{'y' if len(selected_rows) == 1 else 'ies'}?\n\nThis action cannot be undone.&quot;,&#10;            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,&#10;            QMessageBox.StandardButton.No&#10;        )&#10;&#10;        if reply != QMessageBox.StandardButton.Yes:&#10;            return&#10;&#10;        try:&#10;            # Delete each selected expense entry&#10;            deleted_count = 0&#10;            for row in reversed(selected_rows):  # Reverse to maintain row indices&#10;                expense_id_item = self.expense_table.item(row, 7)  # ID is in column 7&#10;                if expense_id_item:&#10;                    expense_id = int(expense_id_item.text())&#10;&#10;                    # Delete from database using the model's delete method&#10;                    from database.models import ExpenseModel&#10;                    ExpenseModel.delete(self.db, expense_id)&#10;                    deleted_count += 1&#10;&#10;            # Refresh the table&#10;            self.refresh_data()&#10;&#10;            QMessageBox.information(&#10;                self,&#10;                &quot;Success&quot;,&#10;                f&quot;Successfully deleted {deleted_count} expense entr{'y' if deleted_count == 1 else 'ies'}.&quot;&#10;            )&#10;&#10;        except Exception as e:&#10;            QMessageBox.critical(self, &quot;Error&quot;, f&quot;Failed to delete expense entries: {str(e)}&quot;)&#10;&#10;    def refresh_data(self):&#10;        &quot;&quot;&quot;Refresh the expense data display&quot;&quot;&quot;&#10;        try:&#10;            # Build filter parameters&#10;            person_filter = None if self.filter_person.currentText() == &quot;All&quot; else self.filter_person.currentText()&#10;            category_filter = None if self.filter_category.currentText() == &quot;All Categories&quot; else self.filter_category.currentText()&#10;            &#10;            # Date filters&#10;            start_date = None&#10;            end_date = None&#10;            &#10;            if self.filter_month.currentIndex() &gt; 0 and self.filter_year.currentText() != &quot;All&quot;:&#10;                year = int(self.filter_year.currentText())&#10;                month = self.filter_month.currentIndex()&#10;                start_date = f&quot;{year:04d}-{month:02d}-01&quot;&#10;                if month == 12:&#10;                    end_date = f&quot;{year+1:04d}-01-01&quot;&#10;                else:&#10;                    end_date = f&quot;{year:04d}-{month+1:02d}-01&quot;&#10;            &#10;            # Get expense data&#10;            expense_data = self.db.get_expenses(start_date, end_date, person_filter, category_filter)&#10;            &#10;            # Clear and populate table&#10;            self.expense_table.setRowCount(0)&#10;            &#10;            jeff_total = 0&#10;            vanessa_total = 0&#10;            category_totals = {}&#10;            &#10;            for expense in expense_data:&#10;                row = self.expense_table.rowCount()&#10;                self.expense_table.insertRow(row)&#10;                &#10;                self.expense_table.setItem(row, 0, QTableWidgetItem(expense['date']))&#10;                self.expense_table.setItem(row, 1, QTableWidgetItem(expense['person']))&#10;                &#10;                amount = expense['amount']&#10;                amount_item = QTableWidgetItem(f&quot;${amount:,.2f}&quot;)&#10;                amount_item.setForeground(Qt.GlobalColor.red)&#10;                self.expense_table.setItem(row, 2, amount_item)&#10;                &#10;                self.expense_table.setItem(row, 3, QTableWidgetItem(expense['category']))&#10;                self.expense_table.setItem(row, 4, QTableWidgetItem(expense['subcategory']))&#10;                self.expense_table.setItem(row, 5, QTableWidgetItem(expense.get('description', '')))&#10;                self.expense_table.setItem(row, 6, QTableWidgetItem(expense.get('payment_method', '')))&#10;                self.expense_table.setItem(row, 7, QTableWidgetItem(str(expense['id'])))&#10;                &#10;                # Calculate totals&#10;                if expense['person'] == 'Jeff':&#10;                    jeff_total += amount&#10;                else:&#10;                    vanessa_total += amount&#10;                    &#10;                # Track category totals&#10;                category = expense['category']&#10;                if category not in category_totals:&#10;                    category_totals[category] = 0&#10;                category_totals[category] += amount&#10;            &#10;            # Update summary cards&#10;            self.jeff_summary.value_label.setText(f&quot;${jeff_total:,.2f}&quot;)&#10;            self.vanessa_summary.value_label.setText(f&quot;${vanessa_total:,.2f}&quot;)&#10;            self.total_summary.value_label.setText(f&quot;${jeff_total + vanessa_total:,.2f}&quot;)&#10;            &#10;            # Find top category&#10;            if category_totals:&#10;                top_category = max(category_totals, key=category_totals.get)&#10;                self.top_category_summary.value_label.setText(&#10;                    f&quot;{top_category}\n${category_totals[top_category]:,.2f}&quot;&#10;                )&#10;            else:&#10;                self.top_category_summary.value_label.setText(&quot;None&quot;)&#10;            &#10;        except Exception as e:&#10;            print(f&quot;Error refreshing expense data: {e}&quot;)&#10;&#10;&#10;class ImportDialog(QDialog):&#10;    &quot;&quot;&quot;Dialog for importing expenses from file&quot;&quot;&quot;&#10;    &#10;    def __init__(self, file_path, categories_data):&#10;        super().__init__()&#10;        self.file_path = file_path&#10;        self.categories_data = categories_data&#10;        self.parsed_expenses = []&#10;        &#10;        self.setWindowTitle(&quot;Import Expenses&quot;)&#10;        self.setModal(True)&#10;        self.setMinimumSize(800, 600)&#10;        &#10;        self.init_ui()&#10;        self.load_file()&#10;        &#10;    def init_ui(self):&#10;        &quot;&quot;&quot;Initialize the import dialog UI&quot;&quot;&quot;&#10;        layout = QVBoxLayout()&#10;        &#10;        # Instructions&#10;        instructions = QLabel(&#10;            &quot;Map the columns from your file to the expense fields. &quot;&#10;            &quot;Select the appropriate column for each field.&quot;&#10;        )&#10;        instructions.setWordWrap(True)&#10;        layout.addWidget(instructions)&#10;        &#10;        # Column mapping section&#10;        mapping_group = QGroupBox(&quot;Column Mapping&quot;)&#10;        mapping_layout = QGridLayout()&#10;        &#10;        self.column_combos = {}&#10;        fields = [&#10;            (&quot;Date&quot;, True),&#10;            (&quot;Amount&quot;, True),&#10;            (&quot;Description&quot;, False),&#10;            (&quot;Category&quot;, False),&#10;            (&quot;Subcategory&quot;, False),&#10;            (&quot;Payment Method&quot;, False)&#10;        ]&#10;        &#10;        for i, (field, required) in enumerate(fields):&#10;            label_text = f&quot;{field}:&quot; if not required else f&quot;{field}*:&quot;&#10;            mapping_layout.addWidget(QLabel(label_text), i, 0)&#10;            &#10;            combo = QComboBox()&#10;            combo.addItem(&quot;-- Not Mapped --&quot;)&#10;            self.column_combos[field] = combo&#10;            mapping_layout.addWidget(combo, i, 1)&#10;            &#10;        # Person assignment&#10;        mapping_layout.addWidget(QLabel(&quot;Assign to:&quot;), len(fields), 0)&#10;        self.person_combo = QComboBox()&#10;        self.person_combo.addItems([&quot;Jeff&quot;, &quot;Vanessa&quot;, &quot;Ask for Each&quot;])&#10;        mapping_layout.addWidget(self.person_combo, len(fields), 1)&#10;        &#10;        # Default category (if not in file)&#10;        mapping_layout.addWidget(QLabel(&quot;Default Category:&quot;), len(fields) + 1, 0)&#10;        self.default_category_combo = QComboBox()&#10;        self.default_category_combo.addItems([&quot;-- Select --&quot;] + list(self.categories_data.keys()))&#10;        mapping_layout.addWidget(self.default_category_combo, len(fields) + 1, 1)&#10;        &#10;        mapping_group.setLayout(mapping_layout)&#10;        layout.addWidget(mapping_group)&#10;        &#10;        # Preview section&#10;        preview_group = QGroupBox(&quot;Preview&quot;)&#10;        preview_layout = QVBoxLayout()&#10;        &#10;        self.preview_table = QTableWidget()&#10;        self.preview_table.setMaximumHeight(200)&#10;        preview_layout.addWidget(self.preview_table)&#10;        &#10;        preview_group.setLayout(preview_layout)&#10;        layout.addWidget(preview_group)&#10;        &#10;        # Dialog buttons&#10;        buttons = QDialogButtonBox(&#10;            QDialogButtonBox.StandardButton.Ok | QDialogButtonBox.StandardButton.Cancel&#10;        )&#10;        buttons.accepted.connect(self.process_import)&#10;        buttons.rejected.connect(self.reject)&#10;        layout.addWidget(buttons)&#10;        &#10;        self.setLayout(layout)&#10;        &#10;    def load_file(self):&#10;        &quot;&quot;&quot;Load and preview the file&quot;&quot;&quot;&#10;        try:&#10;            with open(self.file_path, 'r') as file:&#10;                # Try to detect delimiter&#10;                sample = file.read(1024)&#10;                file.seek(0)&#10;                &#10;                # Detect delimiter&#10;                if '\t' in sample:&#10;                    delimiter = '\t'&#10;                elif ',' in sample:&#10;                    delimiter = ','&#10;                else:&#10;                    delimiter = ','&#10;                &#10;                reader = csv.reader(file, delimiter=delimiter)&#10;                rows = list(reader)&#10;                &#10;                if not rows:&#10;                    QMessageBox.warning(self, &quot;Warning&quot;, &quot;The file appears to be empty&quot;)&#10;                    return&#10;                &#10;                # Assume first row is headers&#10;                headers = rows[0] if rows else []&#10;                data_rows = rows[1:6] if len(rows) &gt; 1 else []  # Preview first 5 data rows&#10;                &#10;                # Update column combos&#10;                for combo in self.column_combos.values():&#10;                    combo.clear()&#10;                    combo.addItem(&quot;-- Not Mapped --&quot;)&#10;                    combo.addItems(headers)&#10;                &#10;                # Try to auto-map columns based on header names&#10;                self.auto_map_columns(headers)&#10;                &#10;                # Update preview table&#10;                self.preview_table.setColumnCount(len(headers))&#10;                self.preview_table.setHorizontalHeaderLabels(headers)&#10;                self.preview_table.setRowCount(len(data_rows))&#10;                &#10;                for i, row in enumerate(data_rows):&#10;                    for j, value in enumerate(row):&#10;                        self.preview_table.setItem(i, j, QTableWidgetItem(value))&#10;                        &#10;        except Exception as e:&#10;            QMessageBox.critical(self, &quot;Error&quot;, f&quot;Failed to load file: {str(e)}&quot;)&#10;            &#10;    def auto_map_columns(self, headers):&#10;        &quot;&quot;&quot;Try to automatically map columns based on header names&quot;&quot;&quot;&#10;        mappings = {&#10;            &quot;Date&quot;: [&quot;date&quot;, &quot;transaction date&quot;, &quot;posted date&quot;, &quot;trans date&quot;],&#10;            &quot;Amount&quot;: [&quot;amount&quot;, &quot;debit&quot;, &quot;charge&quot;, &quot;payment&quot;],&#10;            &quot;Description&quot;: [&quot;description&quot;, &quot;memo&quot;, &quot;merchant&quot;, &quot;details&quot;],&#10;            &quot;Category&quot;: [&quot;category&quot;, &quot;type&quot;],&#10;            &quot;Subcategory&quot;: [&quot;subcategory&quot;, &quot;sub category&quot;, &quot;sub-category&quot;],&#10;            &quot;Payment Method&quot;: [&quot;payment&quot;, &quot;method&quot;, &quot;card&quot;, &quot;account&quot;]&#10;        }&#10;        &#10;        headers_lower = [h.lower() for h in headers]&#10;        &#10;        for field, keywords in mappings.items():&#10;            combo = self.column_combos[field]&#10;            for i, header in enumerate(headers_lower):&#10;                for keyword in keywords:&#10;                    if keyword in header:&#10;                        combo.setCurrentIndex(i + 1)  # +1 because of &quot;-- Not Mapped --&quot;&#10;                        break&#10;                        &#10;    def process_import(self):&#10;        &quot;&quot;&quot;Process the import with the current mapping&quot;&quot;&quot;&#10;        try:&#10;            # Validate required fields are mapped&#10;            date_col = self.column_combos[&quot;Date&quot;].currentIndex() - 1&#10;            amount_col = self.column_combos[&quot;Amount&quot;].currentIndex() - 1&#10;            &#10;            if date_col &lt; 0 or amount_col &lt; 0:&#10;                QMessageBox.warning(self, &quot;Warning&quot;, &quot;Date and Amount columns must be mapped&quot;)&#10;                return&#10;            &#10;            # Read the entire file&#10;            with open(self.file_path, 'r') as file:&#10;                delimiter = '\t' if '\t' in file.read(1024) else ','&#10;                file.seek(0)&#10;                &#10;                reader = csv.reader(file, delimiter=delimiter)&#10;                rows = list(reader)&#10;                &#10;                if len(rows) &lt;= 1:&#10;                    QMessageBox.warning(self, &quot;Warning&quot;, &quot;No data rows found&quot;)&#10;                    return&#10;                &#10;                # Skip header row&#10;                data_rows = rows[1:]&#10;                &#10;                # Process each row&#10;                self.parsed_expenses = []&#10;                person = self.person_combo.currentText()&#10;                &#10;                for row in data_rows:&#10;                    try:&#10;                        expense = {&#10;                            'person': person if person != &quot;Ask for Each&quot; else &quot;Jeff&quot;,  # Default to Jeff&#10;                            'date': row[date_col] if date_col &gt;= 0 else &quot;&quot;,&#10;                            'amount': abs(float(row[amount_col].replace(&quot;,&quot;, &quot;&quot;).replace(&quot;$&quot;, &quot;&quot;))),&#10;                        }&#10;                        &#10;                        # Optional fields&#10;                        desc_col = self.column_combos[&quot;Description&quot;].currentIndex() - 1&#10;                        if desc_col &gt;= 0 and desc_col &lt; len(row):&#10;                            expense['description'] = row[desc_col]&#10;                        else:&#10;                            expense['description'] = &quot;&quot;&#10;                        &#10;                        cat_col = self.column_combos[&quot;Category&quot;].currentIndex() - 1&#10;                        if cat_col &gt;= 0 and cat_col &lt; len(row):&#10;                            expense['category'] = row[cat_col]&#10;                        else:&#10;                            expense['category'] = self.default_category_combo.currentText()&#10;                            &#10;                        subcat_col = self.column_combos[&quot;Subcategory&quot;].currentIndex() - 1&#10;                        if subcat_col &gt;= 0 and subcat_col &lt; len(row):&#10;                            expense['subcategory'] = row[subcat_col]&#10;                        else:&#10;                            # Use first subcategory for the category&#10;                            if expense['category'] in self.categories_data:&#10;                                expense['subcategory'] = self.categories_data[expense['category']][0]&#10;                            else:&#10;                                expense['subcategory'] = &quot;Other&quot;&#10;                        &#10;                        payment_col = self.column_combos[&quot;Payment Method&quot;].currentIndex() - 1&#10;                        if payment_col &gt;= 0 and payment_col &lt; len(row):&#10;                            expense['payment_method'] = row[payment_col]&#10;                        else:&#10;                            expense['payment_method'] = &quot;Credit Card&quot;&#10;                        &#10;                        # Validate and add&#10;                        if expense['date'] and expense['amount'] &gt; 0:&#10;                            self.parsed_expenses.append(expense)&#10;                            &#10;                    except Exception as e:&#10;                        print(f&quot;Error processing row: {e}&quot;)&#10;                        continue&#10;                &#10;                if self.parsed_expenses:&#10;                    self.accept()&#10;                else:&#10;                    QMessageBox.warning(self, &quot;Warning&quot;, &quot;No valid expenses could be parsed&quot;)&#10;                    &#10;        except Exception as e:&#10;            QMessageBox.critical(self, &quot;Error&quot;, f&quot;Failed to process import: {str(e)}&quot;)&#10;            &#10;    def get_parsed_expenses(self):&#10;        &quot;&quot;&quot;Return the parsed expenses&quot;&quot;&quot;&#10;        return self.parsed_expenses&#10;&#10;&#10;class ExpensePreviewDialog(QDialog):&#10;    &quot;&quot;&quot;Dialog for previewing expenses before import&quot;&quot;&quot;&#10;&#10;    def __init__(self, expenses, categories_data):&#10;        super().__init__()&#10;        self.expenses = expenses&#10;        self.categories_data = categories_data&#10;        self.final_expenses = []&#10;&#10;        self.setWindowTitle(&quot;Preview Expenses&quot;)&#10;        self.setModal(True)&#10;        self.setMinimumSize(800, 600)&#10;&#10;        self.init_ui()&#10;        self.populate_preview()&#10;&#10;    def init_ui(self):&#10;        &quot;&quot;&quot;Initialize the preview dialog UI&quot;&quot;&quot;&#10;        layout = QVBoxLayout()&#10;&#10;        # Instructions&#10;        instructions = QLabel(&#10;            &quot;Review the expenses below. You can edit the values, select rows and delete them, &quot;&#10;            &quot;or remove any expense that you do not want to import.&quot;&#10;        )&#10;        instructions.setWordWrap(True)&#10;        layout.addWidget(instructions)&#10;&#10;        # Preview table&#10;        self.preview_table = QTableWidget()&#10;        self.preview_table.setColumnCount(7)&#10;        self.preview_table.setHorizontalHeaderLabels([&#10;            &quot;Date&quot;, &quot;Person&quot;, &quot;Amount&quot;, &quot;Category&quot;, &quot;Subcategory&quot;, &quot;Description&quot;, &quot;Payment Method&quot;&#10;        ])&#10;&#10;        # Enable row selection&#10;        self.preview_table.setSelectionBehavior(QTableWidget.SelectionBehavior.SelectRows)&#10;        self.preview_table.setSelectionMode(QTableWidget.SelectionMode.MultiSelection)&#10;&#10;        # Set column widths&#10;        header = self.preview_table.horizontalHeader()&#10;        header.setSectionResizeMode(0, QHeaderView.ResizeMode.ResizeToContents)&#10;        header.setSectionResizeMode(1, QHeaderView.ResizeMode.ResizeToContents)&#10;        header.setSectionResizeMode(2, QHeaderView.ResizeMode.ResizeToContents)&#10;        header.setSectionResizeMode(3, QHeaderView.ResizeMode.ResizeToContents)&#10;        header.setSectionResizeMode(4, QHeaderView.ResizeMode.ResizeToContents)&#10;        header.setSectionResizeMode(5, QHeaderView.ResizeMode.Stretch)&#10;&#10;        layout.addWidget(self.preview_table)&#10;&#10;        # Action buttons layout&#10;        action_layout = QHBoxLayout()&#10;&#10;        # Delete selected button&#10;        delete_btn = QPushButton(&quot;Delete Selected&quot;)&#10;        delete_btn.setStyleSheet(&quot;&quot;&quot;&#10;            QPushButton {&#10;                background-color: #d9534f;&#10;                color: white;&#10;                padding: 8px;&#10;                font-weight: bold;&#10;                border-radius: 4px;&#10;            }&#10;            QPushButton:hover {&#10;                background-color: #c9302c;&#10;            }&#10;        &quot;&quot;&quot;)&#10;        delete_btn.clicked.connect(self.delete_selected_rows)&#10;        action_layout.addWidget(delete_btn)&#10;&#10;        action_layout.addStretch()&#10;&#10;        # Row count label&#10;        self.row_count_label = QLabel()&#10;        self.update_row_count()&#10;        action_layout.addWidget(self.row_count_label)&#10;&#10;        layout.addLayout(action_layout)&#10;&#10;        # Buttons&#10;        button_layout = QHBoxLayout()&#10;&#10;        ok_btn = QPushButton(&quot;Import All&quot;)&#10;        ok_btn.setStyleSheet(&quot;&quot;&quot;&#10;            QPushButton {&#10;                background-color: #5cb85c;&#10;                color: white;&#10;                padding: 8px;&#10;                font-weight: bold;&#10;                border-radius: 4px;&#10;            }&#10;            QPushButton:hover {&#10;                background-color: #449d44;&#10;            }&#10;        &quot;&quot;&quot;)&#10;        ok_btn.clicked.connect(self.import_all)&#10;        button_layout.addWidget(ok_btn)&#10;&#10;        cancel_btn = QPushButton(&quot;Cancel&quot;)&#10;        cancel_btn.clicked.connect(self.reject)&#10;        button_layout.addWidget(cancel_btn)&#10;&#10;        layout.addLayout(button_layout)&#10;&#10;        self.setLayout(layout)&#10;&#10;    def delete_selected_rows(self):&#10;        &quot;&quot;&quot;Delete selected rows from the preview table&quot;&quot;&quot;&#10;        try:&#10;            # Get selected rows&#10;            selected_rows = set()&#10;            for item in self.preview_table.selectedItems():&#10;                selected_rows.add(item.row())&#10;&#10;            if not selected_rows:&#10;                QMessageBox.information(self, &quot;Info&quot;, &quot;Please select one or more rows to delete.&quot;)&#10;                return&#10;&#10;            # Confirm deletion&#10;            count = len(selected_rows)&#10;            reply = QMessageBox.question(&#10;                self,&#10;                &quot;Confirm Delete&quot;,&#10;                f&quot;Are you sure you want to delete {count} selected expense{'s' if count != 1 else ''}?&quot;,&#10;                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,&#10;                QMessageBox.StandardButton.No&#10;            )&#10;&#10;            if reply != QMessageBox.StandardButton.Yes:&#10;                return&#10;&#10;            # Delete rows in reverse order to maintain row indices&#10;            for row in sorted(selected_rows, reverse=True):&#10;                self.preview_table.removeRow(row)&#10;&#10;            # Update row count display&#10;            self.update_row_count()&#10;&#10;            QMessageBox.information(self, &quot;Success&quot;, f&quot;Deleted {count} expense{'s' if count != 1 else ''}.&quot;)&#10;&#10;        except Exception as e:&#10;            QMessageBox.critical(self, &quot;Error&quot;, f&quot;Failed to delete rows: {str(e)}&quot;)&#10;&#10;    def update_row_count(self):&#10;        &quot;&quot;&quot;Update the row count label&quot;&quot;&quot;&#10;        count = self.preview_table.rowCount()&#10;        self.row_count_label.setText(f&quot;Total expenses: {count}&quot;)&#10;&#10;    def populate_preview(self):&#10;        &quot;&quot;&quot;Populate the preview table with expense data&quot;&quot;&quot;&#10;        self.preview_table.setRowCount(len(self.expenses))&#10;&#10;        for i, expense in enumerate(self.expenses):&#10;            self.preview_table.setItem(i, 1, QTableWidgetItem(expense['person']))&#10;            self.preview_table.setItem(i, 2, QTableWidgetItem(f&quot;${expense['amount']:,.2f}&quot;))&#10;            self.preview_table.setItem(i, 3, QTableWidgetItem(expense['category']))&#10;            self.preview_table.setItem(i, 3, QTableWidgetItem(expense['category']))&#10;        &quot;&quot;&quot;Populate the preview table with expense data&quot;&quot;&quot;&#10;&#10;                    expense = {&#10;                        'date': date,&#10;                    continue&#10;&#10;            self.preview_table.setItem(i, 3, QTableWidgetItem(expense['category']))&#10;            self.preview_table.setItem(i, 3, QTableWidgetItem(expense['category']))&#10;            self.preview_table.setItem(i, 4, QTableWidgetItem(expense['subcategory']))&#10;" />
              <option name="updatedContent" value="&quot;&quot;&quot;&#10;Budget Tab - Manages income and expenses with two sub-tabs&#10;&quot;&quot;&quot;&#10;&#10;from PyQt6.QtWidgets import (&#10;    QWidget, QVBoxLayout, QHBoxLayout, QLabel, QPushButton,&#10;    QTableWidget, QTableWidgetItem, QGroupBox, QGridLayout,&#10;    QComboBox, QLineEdit, QDateEdit, QTabWidget,&#10;    QHeaderView, QMessageBox, QFileDialog, QDialog,&#10;    QDialogButtonBox, QCheckBox&#10;)&#10;from PyQt6.QtCore import Qt, QDate&#10;from PyQt6.QtGui import QFont&#10;from datetime import datetime&#10;import csv&#10;import os&#10;from database.db_manager import DatabaseManager&#10;from database.category_manager import get_category_manager&#10;from gui.utils.expense_loader import ExpenseLoader&#10;&#10;class BudgetTab(QWidget):&#10;    def __init__(self):&#10;        super().__init__()&#10;        self.db = DatabaseManager()&#10;        self.category_manager = get_category_manager()&#10;        self.init_ui()&#10;&#10;    def init_ui(self):&#10;        &quot;&quot;&quot;Initialize the UI with Income and Expenses sub-tabs&quot;&quot;&quot;&#10;        layout = QVBoxLayout()&#10;        &#10;        # Header&#10;        header_layout = QHBoxLayout()&#10;        title = QLabel(&quot;Budget Management&quot;)&#10;        title.setFont(QFont(&quot;Arial&quot;, 18, QFont.Weight.Bold))&#10;        header_layout.addWidget(title)&#10;        header_layout.addStretch()&#10;        &#10;        layout.addLayout(header_layout)&#10;        &#10;        # Create sub-tabs for Income and Expenses&#10;        self.sub_tabs = QTabWidget()&#10;        &#10;        # Income Tab&#10;        self.income_tab = IncomeSubTab()&#10;        self.sub_tabs.addTab(self.income_tab, &quot; Income&quot;)&#10;        &#10;        # Expenses Tab&#10;        self.expenses_tab = ExpensesSubTab()&#10;        self.sub_tabs.addTab(self.expenses_tab, &quot; Expenses&quot;)&#10;        &#10;        layout.addWidget(self.sub_tabs)&#10;        self.setLayout(layout)&#10;        &#10;    def refresh_data(self):&#10;        &quot;&quot;&quot;Refresh data in both sub-tabs&quot;&quot;&quot;&#10;        self.income_tab.refresh_data()&#10;        self.expenses_tab.refresh_data()&#10;&#10;&#10;class IncomeSubTab(QWidget):&#10;    &quot;&quot;&quot;Sub-tab for managing income entries&quot;&quot;&quot;&#10;    &#10;    def __init__(self):&#10;        super().__init__()&#10;        self.db = DatabaseManager()&#10;        self.init_ui()&#10;        self.refresh_data()&#10;        &#10;    def init_ui(self):&#10;        &quot;&quot;&quot;Initialize the Income UI&quot;&quot;&quot;&#10;        layout = QVBoxLayout()&#10;        &#10;        # Top section - Add Income Form&#10;        form_group = QGroupBox(&quot;Add Income&quot;)&#10;        form_layout = QGridLayout()&#10;        &#10;        # Person selector&#10;        form_layout.addWidget(QLabel(&quot;Person:&quot;), 0, 0)&#10;        self.person_combo = QComboBox()&#10;        self.person_combo.addItems([&quot;Jeff&quot;, &quot;Vanessa&quot;])&#10;        form_layout.addWidget(self.person_combo, 0, 1)&#10;        &#10;        # Amount&#10;        form_layout.addWidget(QLabel(&quot;Amount:&quot;), 0, 2)&#10;        self.amount_input = QLineEdit()&#10;        self.amount_input.setPlaceholderText(&quot;Enter income amount&quot;)&#10;        form_layout.addWidget(self.amount_input, 0, 3)&#10;        &#10;        # Date&#10;        form_layout.addWidget(QLabel(&quot;Date:&quot;), 1, 0)&#10;        self.date_input = QDateEdit()&#10;        self.date_input.setDate(QDate.currentDate())&#10;        self.date_input.setCalendarPopup(True)&#10;        form_layout.addWidget(self.date_input, 1, 1)&#10;        &#10;        # Description&#10;        form_layout.addWidget(QLabel(&quot;Description:&quot;), 1, 2)&#10;        self.description_input = QLineEdit()&#10;        self.description_input.setPlaceholderText(&quot;e.g., Monthly Salary, Bonus, etc.&quot;)&#10;        form_layout.addWidget(self.description_input, 1, 3)&#10;        &#10;        # Add button&#10;        add_btn = QPushButton(&quot;Add Income&quot;)&#10;        add_btn.setStyleSheet(&quot;&quot;&quot;&#10;            QPushButton {&#10;                background-color: #2a82da;&#10;                color: white;&#10;                padding: 8px;&#10;                font-weight: bold;&#10;                border-radius: 4px;&#10;            }&#10;            QPushButton:hover {&#10;                background-color: #1e5fa8;&#10;            }&#10;        &quot;&quot;&quot;)&#10;        add_btn.clicked.connect(self.add_income)&#10;        form_layout.addWidget(add_btn, 2, 0, 1, 4)&#10;        &#10;        form_group.setLayout(form_layout)&#10;        layout.addWidget(form_group)&#10;        &#10;        # Monthly Summary Section&#10;        summary_layout = QHBoxLayout()&#10;        &#10;        # Jeff's Income Summary&#10;        self.jeff_summary = self.create_summary_card(&quot;Jeff's Monthly Income&quot;, &quot;$0.00&quot;)&#10;        summary_layout.addWidget(self.jeff_summary)&#10;        &#10;        # Vanessa's Income Summary&#10;        self.vanessa_summary = self.create_summary_card(&quot;Vanessa's Monthly Income&quot;, &quot;$0.00&quot;)&#10;        summary_layout.addWidget(self.vanessa_summary)&#10;        &#10;        # Total Income Summary&#10;        self.total_summary = self.create_summary_card(&quot;Total Monthly Income&quot;, &quot;$0.00&quot;)&#10;        summary_layout.addWidget(self.total_summary)&#10;        &#10;        layout.addLayout(summary_layout)&#10;        &#10;        # Income History Table&#10;        history_group = QGroupBox(&quot;Income History&quot;)&#10;        history_layout = QVBoxLayout()&#10;        &#10;        # Filter controls&#10;        filter_layout = QHBoxLayout()&#10;        &#10;        filter_layout.addWidget(QLabel(&quot;Filter by:&quot;))&#10;        &#10;        self.filter_person = QComboBox()&#10;        self.filter_person.addItems([&quot;All&quot;, &quot;Jeff&quot;, &quot;Vanessa&quot;])&#10;        self.filter_person.currentTextChanged.connect(self.refresh_data)&#10;        filter_layout.addWidget(self.filter_person)&#10;        &#10;        filter_layout.addWidget(QLabel(&quot;Month:&quot;))&#10;        self.filter_month = QComboBox()&#10;        self.filter_month.addItems([&#10;            &quot;All&quot;, &quot;January&quot;, &quot;February&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;, &quot;June&quot;,&#10;            &quot;July&quot;, &quot;August&quot;, &quot;September&quot;, &quot;October&quot;, &quot;November&quot;, &quot;December&quot;&#10;        ])&#10;        self.filter_month.setCurrentIndex(datetime.now().month)&#10;        self.filter_month.currentIndexChanged.connect(self.refresh_data)&#10;        filter_layout.addWidget(self.filter_month)&#10;        &#10;        filter_layout.addWidget(QLabel(&quot;Year:&quot;))&#10;        self.filter_year = QComboBox()&#10;        current_year = datetime.now().year&#10;        self.filter_year.addItems([&quot;All&quot;] + [str(year) for year in range(current_year - 2, current_year + 2)])&#10;        self.filter_year.setCurrentText(str(current_year))&#10;        self.filter_year.currentTextChanged.connect(self.refresh_data)&#10;        filter_layout.addWidget(self.filter_year)&#10;        &#10;        filter_layout.addStretch()&#10;        &#10;        # Delete button&#10;        delete_btn = QPushButton(&quot;Delete Selected&quot;)&#10;        delete_btn.clicked.connect(self.delete_selected_income)&#10;        filter_layout.addWidget(delete_btn)&#10;        &#10;        history_layout.addLayout(filter_layout)&#10;        &#10;        # Income table&#10;        self.income_table = QTableWidget()&#10;        self.income_table.setColumnCount(5)&#10;        self.income_table.setHorizontalHeaderLabels([&#10;            &quot;Date&quot;, &quot;Person&quot;, &quot;Amount&quot;, &quot;Description&quot;, &quot;ID&quot;&#10;        ])&#10;        self.income_table.hideColumn(4)  # Hide ID column&#10;        &#10;        # Set column widths&#10;        header = self.income_table.horizontalHeader()&#10;        header.setSectionResizeMode(0, QHeaderView.ResizeMode.ResizeToContents)&#10;        header.setSectionResizeMode(1, QHeaderView.ResizeMode.ResizeToContents)&#10;        header.setSectionResizeMode(2, QHeaderView.ResizeMode.ResizeToContents)&#10;        header.setSectionResizeMode(3, QHeaderView.ResizeMode.Stretch)&#10;        &#10;        history_layout.addWidget(self.income_table)&#10;        history_group.setLayout(history_layout)&#10;        &#10;        layout.addWidget(history_group)&#10;        self.setLayout(layout)&#10;        &#10;    def create_summary_card(self, title, value):&#10;        &quot;&quot;&quot;Create a summary card widget&quot;&quot;&quot;&#10;        group = QGroupBox(title)&#10;        group.setStyleSheet(&quot;&quot;&quot;&#10;            QGroupBox {&#10;                font-weight: bold;&#10;                border: 2px solid #555;&#10;                border-radius: 5px;&#10;                margin-top: 10px;&#10;                padding-top: 10px;&#10;            }&#10;        &quot;&quot;&quot;)&#10;        &#10;        layout = QVBoxLayout()&#10;        value_label = QLabel(value)&#10;        value_label.setAlignment(Qt.AlignmentFlag.AlignCenter)&#10;        value_label.setFont(QFont(&quot;Arial&quot;, 16, QFont.Weight.Bold))&#10;        value_label.setStyleSheet(&quot;color: #2a82da;&quot;)&#10;        layout.addWidget(value_label)&#10;        &#10;        group.setLayout(layout)&#10;        group.value_label = value_label  # Store reference for updating&#10;        return group&#10;        &#10;    def add_income(self):&#10;        &quot;&quot;&quot;Add income entry to database&quot;&quot;&quot;&#10;        try:&#10;            person = self.person_combo.currentText()&#10;            amount_text = self.amount_input.text().strip()&#10;            date = self.date_input.date().toString(&quot;yyyy-MM-dd&quot;)&#10;            description = self.description_input.text().strip()&#10;            &#10;            # Validate amount&#10;            if not amount_text:&#10;                QMessageBox.warning(self, &quot;Warning&quot;, &quot;Please enter an amount&quot;)&#10;                return&#10;                &#10;            try:&#10;                amount = float(amount_text.replace(&quot;,&quot;, &quot;&quot;).replace(&quot;$&quot;, &quot;&quot;))&#10;            except ValueError:&#10;                QMessageBox.warning(self, &quot;Warning&quot;, &quot;Please enter a valid number for amount&quot;)&#10;                return&#10;            &#10;            # Add to database&#10;            self.db.add_income(person, amount, date, description)&#10;            &#10;            # Clear form&#10;            self.amount_input.clear()&#10;            self.description_input.clear()&#10;            &#10;            # Refresh display&#10;            self.refresh_data()&#10;            &#10;            QMessageBox.information(self, &quot;Success&quot;, &quot;Income added successfully!&quot;)&#10;            &#10;        except Exception as e:&#10;            QMessageBox.critical(self, &quot;Error&quot;, f&quot;Failed to add income: {str(e)}&quot;)&#10;            &#10;    def delete_selected_income(self):&#10;        &quot;&quot;&quot;Delete selected income entries&quot;&quot;&quot;&#10;        selected_rows = []&#10;        for row in range(self.income_table.rowCount()):&#10;            if self.income_table.item(row, 0) and self.income_table.item(row, 0).isSelected():&#10;                selected_rows.append(row)&#10;            elif any(self.income_table.item(row, col) and self.income_table.item(row, col).isSelected()&#10;                    for col in range(self.income_table.columnCount())):&#10;                selected_rows.append(row)&#10;&#10;        if not selected_rows:&#10;            QMessageBox.warning(self, &quot;Warning&quot;, &quot;Please select one or more income entries to delete.&quot;)&#10;            return&#10;&#10;        # Confirm deletion&#10;        reply = QMessageBox.question(&#10;            self,&#10;            &quot;Confirm Deletion&quot;,&#10;            f&quot;Are you sure you want to delete {len(selected_rows)} income entr{'y' if len(selected_rows) == 1 else 'ies'}?\n\nThis action cannot be undone.&quot;,&#10;            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,&#10;            QMessageBox.StandardButton.No&#10;        )&#10;&#10;        if reply != QMessageBox.StandardButton.Yes:&#10;            return&#10;&#10;        try:&#10;            # Delete each selected income entry&#10;            deleted_count = 0&#10;            for row in reversed(selected_rows):  # Reverse to maintain row indices&#10;                income_id_item = self.income_table.item(row, 4)  # ID is in column 4&#10;                if income_id_item:&#10;                    income_id = int(income_id_item.text())&#10;&#10;                    # Delete from database using the model's delete method&#10;                    from database.models import IncomeModel&#10;                    IncomeModel.delete(self.db, income_id)&#10;                    deleted_count += 1&#10;&#10;            # Refresh the table&#10;            self.refresh_data()&#10;&#10;            QMessageBox.information(&#10;                self,&#10;                &quot;Success&quot;,&#10;                f&quot;Successfully deleted {deleted_count} income entr{'y' if deleted_count == 1 else 'ies'}.&quot;&#10;            )&#10;&#10;        except Exception as e:&#10;            QMessageBox.critical(self, &quot;Error&quot;, f&quot;Failed to delete income entries: {str(e)}&quot;)&#10;&#10;    def refresh_data(self):&#10;        &quot;&quot;&quot;Refresh the income data display&quot;&quot;&quot;&#10;        try:&#10;            # Build filter parameters&#10;            person_filter = None if self.filter_person.currentText() == &quot;All&quot; else self.filter_person.currentText()&#10;            &#10;            # Date filters&#10;            start_date = None&#10;            end_date = None&#10;            &#10;            if self.filter_month.currentIndex() &gt; 0 and self.filter_year.currentText() != &quot;All&quot;:&#10;                year = int(self.filter_year.currentText())&#10;                month = self.filter_month.currentIndex()&#10;                start_date = f&quot;{year:04d}-{month:02d}-01&quot;&#10;                if month == 12:&#10;                    end_date = f&quot;{year+1:04d}-01-01&quot;&#10;                else:&#10;                    end_date = f&quot;{year:04d}-{month+1:02d}-01&quot;&#10;            &#10;            # Get income data&#10;            income_data = self.db.get_income(start_date, end_date, person_filter)&#10;            &#10;            # Clear and populate table&#10;            self.income_table.setRowCount(0)&#10;            &#10;            jeff_total = 0&#10;            vanessa_total = 0&#10;            &#10;            for income in income_data:&#10;                row = self.income_table.rowCount()&#10;                self.income_table.insertRow(row)&#10;                &#10;                self.income_table.setItem(row, 0, QTableWidgetItem(income['date']))&#10;                self.income_table.setItem(row, 1, QTableWidgetItem(income['person']))&#10;                &#10;                amount = income['amount']&#10;                self.income_table.setItem(row, 2, QTableWidgetItem(f&quot;${amount:,.2f}&quot;))&#10;                self.income_table.setItem(row, 3, QTableWidgetItem(income.get('description', '')))&#10;                self.income_table.setItem(row, 4, QTableWidgetItem(str(income['id'])))&#10;                &#10;                # Calculate totals for current month&#10;                if income['person'] == 'Jeff':&#10;                    jeff_total += amount&#10;                else:&#10;                    vanessa_total += amount&#10;            &#10;            # Update summary cards&#10;            self.jeff_summary.value_label.setText(f&quot;${jeff_total:,.2f}&quot;)&#10;            self.vanessa_summary.value_label.setText(f&quot;${vanessa_total:,.2f}&quot;)&#10;            self.total_summary.value_label.setText(f&quot;${jeff_total + vanessa_total:,.2f}&quot;)&#10;            &#10;        except Exception as e:&#10;            print(f&quot;Error refreshing income data: {e}&quot;)&#10;&#10;&#10;class ExpensesSubTab(QWidget):&#10;    &quot;&quot;&quot;Sub-tab for managing expense entries&quot;&quot;&quot;&#10;    &#10;    def __init__(self):&#10;        super().__init__()&#10;        self.db = DatabaseManager()&#10;        self.category_manager = get_category_manager()&#10;        self.categories_data = self.category_manager.get_categories()&#10;        self.init_ui()&#10;        self.load_categories()  # Add this line to populate category dropdowns&#10;        self.refresh_data()&#10;&#10;    def init_ui(self):&#10;        &quot;&quot;&quot;Initialize the Expenses UI&quot;&quot;&quot;&#10;        layout = QVBoxLayout()&#10;        &#10;        # Top section - Add Expense Form&#10;        form_group = QGroupBox(&quot;Add Expense&quot;)&#10;        form_layout = QGridLayout()&#10;        &#10;        # Row 1&#10;        form_layout.addWidget(QLabel(&quot;Person:&quot;), 0, 0)&#10;        self.person_combo = QComboBox()&#10;        self.person_combo.addItems([&quot;Jeff&quot;, &quot;Vanessa&quot;])&#10;        form_layout.addWidget(self.person_combo, 0, 1)&#10;        &#10;        form_layout.addWidget(QLabel(&quot;Amount:&quot;), 0, 2)&#10;        self.amount_input = QLineEdit()&#10;        self.amount_input.setPlaceholderText(&quot;Enter expense amount&quot;)&#10;        form_layout.addWidget(self.amount_input, 0, 3)&#10;        &#10;        form_layout.addWidget(QLabel(&quot;Date:&quot;), 0, 4)&#10;        self.date_input = QDateEdit()&#10;        self.date_input.setDate(QDate.currentDate())&#10;        self.date_input.setCalendarPopup(True)&#10;        form_layout.addWidget(self.date_input, 0, 5)&#10;        &#10;        # Row 2&#10;        form_layout.addWidget(QLabel(&quot;Category:&quot;), 1, 0)&#10;        self.category_combo = QComboBox()&#10;        self.category_combo.currentTextChanged.connect(self.on_category_changed)&#10;        form_layout.addWidget(self.category_combo, 1, 1)&#10;        &#10;        form_layout.addWidget(QLabel(&quot;Subcategory:&quot;), 1, 2)&#10;        self.subcategory_combo = QComboBox()&#10;        form_layout.addWidget(self.subcategory_combo, 1, 3)&#10;        &#10;        form_layout.addWidget(QLabel(&quot;Payment Method:&quot;), 1, 4)&#10;        self.payment_combo = QComboBox()&#10;        self.payment_combo.addItems([&quot;Cash&quot;, &quot;Credit Card&quot;, &quot;Debit Card&quot;, &quot;Check&quot;, &quot;Transfer&quot;, &quot;Other&quot;])&#10;        form_layout.addWidget(self.payment_combo, 1, 5)&#10;        &#10;        # Row 3&#10;        form_layout.addWidget(QLabel(&quot;Description:&quot;), 2, 0)&#10;        self.description_input = QLineEdit()&#10;        self.description_input.setPlaceholderText(&quot;Optional description&quot;)&#10;        form_layout.addWidget(self.description_input, 2, 1, 1, 4)&#10;&#10;        # Add realized checkbox&#10;        self.realized_checkbox = QCheckBox(&quot;Already taken from joint checking&quot;)&#10;        self.realized_checkbox.setToolTip(&quot;Check if this expense has already been paid from the joint checking account&quot;)&#10;        form_layout.addWidget(self.realized_checkbox, 2, 5)&#10;&#10;        # Row 4 - Buttons&#10;        button_layout = QHBoxLayout()&#10;&#10;        add_btn = QPushButton(&quot;Add Expense&quot;)&#10;        add_btn.setStyleSheet(&quot;&quot;&quot;&#10;            QPushButton {&#10;                background-color: #2a82da;&#10;                color: white;&#10;                padding: 8px;&#10;                font-weight: bold;&#10;                border-radius: 4px;&#10;            }&#10;            QPushButton:hover {&#10;                background-color: #1e5fa8;&#10;            }&#10;        &quot;&quot;&quot;)&#10;        add_btn.clicked.connect(self.add_expense)&#10;        button_layout.addWidget(add_btn)&#10;        &#10;        import_btn = QPushButton(&quot;Import from File&quot;)&#10;        import_btn.setStyleSheet(&quot;&quot;&quot;&#10;            QPushButton {&#10;                background-color: #5cb85c;&#10;                color: white;&#10;                padding: 8px;&#10;                font-weight: bold;&#10;                border-radius: 4px;&#10;            }&#10;            QPushButton:hover {&#10;                background-color: #449d44;&#10;            }&#10;        &quot;&quot;&quot;)&#10;        import_btn.clicked.connect(self.import_expenses)&#10;        button_layout.addWidget(import_btn)&#10;        &#10;        button_layout.addStretch()&#10;        &#10;        form_layout.addLayout(button_layout, 3, 0, 1, 6)&#10;        &#10;        form_group.setLayout(form_layout)&#10;        layout.addWidget(form_group)&#10;        &#10;        # Monthly Summary Section&#10;        summary_layout = QHBoxLayout()&#10;        &#10;        # Jeff's Expenses Summary&#10;        self.jeff_summary = self.create_summary_card(&quot;Jeff's Monthly Expenses&quot;, &quot;$0.00&quot;)&#10;        summary_layout.addWidget(self.jeff_summary)&#10;        &#10;        # Vanessa's Expenses Summary&#10;        self.vanessa_summary = self.create_summary_card(&quot;Vanessa's Monthly Expenses&quot;, &quot;$0.00&quot;)&#10;        summary_layout.addWidget(self.vanessa_summary)&#10;        &#10;        # Total Expenses Summary&#10;        self.total_summary = self.create_summary_card(&quot;Total Monthly Expenses&quot;, &quot;$0.00&quot;)&#10;        summary_layout.addWidget(self.total_summary)&#10;        &#10;        # Top Category Summary&#10;        self.top_category_summary = self.create_summary_card(&quot;Top Category&quot;, &quot;None&quot;)&#10;        summary_layout.addWidget(self.top_category_summary)&#10;        &#10;        layout.addLayout(summary_layout)&#10;        &#10;        # Expense History Table&#10;        history_group = QGroupBox(&quot;Expense History&quot;)&#10;        history_layout = QVBoxLayout()&#10;        &#10;        # Filter controls&#10;        filter_layout = QHBoxLayout()&#10;        &#10;        filter_layout.addWidget(QLabel(&quot;Filter by:&quot;))&#10;        &#10;        self.filter_person = QComboBox()&#10;        self.filter_person.addItems([&quot;All&quot;, &quot;Jeff&quot;, &quot;Vanessa&quot;])&#10;        self.filter_person.currentTextChanged.connect(self.refresh_data)&#10;        filter_layout.addWidget(self.filter_person)&#10;        &#10;        self.filter_category = QComboBox()&#10;        self.filter_category.addItems([&quot;All Categories&quot;])&#10;        self.filter_category.currentTextChanged.connect(self.refresh_data)&#10;        filter_layout.addWidget(self.filter_category)&#10;        &#10;        filter_layout.addWidget(QLabel(&quot;Month:&quot;))&#10;        self.filter_month = QComboBox()&#10;        self.filter_month.addItems([&#10;            &quot;All&quot;, &quot;January&quot;, &quot;February&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;, &quot;June&quot;,&#10;            &quot;July&quot;, &quot;August&quot;, &quot;September&quot;, &quot;October&quot;, &quot;November&quot;, &quot;December&quot;&#10;        ])&#10;        self.filter_month.setCurrentIndex(datetime.now().month)&#10;        self.filter_month.currentIndexChanged.connect(self.refresh_data)&#10;        filter_layout.addWidget(self.filter_month)&#10;        &#10;        filter_layout.addWidget(QLabel(&quot;Year:&quot;))&#10;        self.filter_year = QComboBox()&#10;        current_year = datetime.now().year&#10;        self.filter_year.addItems([&quot;All&quot;] + [str(year) for year in range(current_year - 2, current_year + 2)])&#10;        self.filter_year.setCurrentText(str(current_year))&#10;        self.filter_year.currentTextChanged.connect(self.refresh_data)&#10;        filter_layout.addWidget(self.filter_year)&#10;        &#10;        filter_layout.addStretch()&#10;        &#10;        # Export and Delete buttons&#10;        export_btn = QPushButton(&quot;Export to CSV&quot;)&#10;        export_btn.clicked.connect(self.export_expenses)&#10;        filter_layout.addWidget(export_btn)&#10;        &#10;        delete_btn = QPushButton(&quot;Delete Selected&quot;)&#10;        delete_btn.clicked.connect(self.delete_selected_expenses)&#10;        filter_layout.addWidget(delete_btn)&#10;        &#10;        history_layout.addLayout(filter_layout)&#10;        &#10;        # Expense table&#10;        self.expense_table = QTableWidget()&#10;        self.expense_table.setColumnCount(8)&#10;        self.expense_table.setHorizontalHeaderLabels([&#10;            &quot;Date&quot;, &quot;Person&quot;, &quot;Amount&quot;, &quot;Category&quot;, &quot;Subcategory&quot;, &#10;            &quot;Description&quot;, &quot;Payment&quot;, &quot;ID&quot;&#10;        ])&#10;        self.expense_table.hideColumn(7)  # Hide ID column&#10;        &#10;        # Set column widths&#10;        header = self.expense_table.horizontalHeader()&#10;        for i in range(7):&#10;            if i == 5:  # Description column&#10;                header.setSectionResizeMode(i, QHeaderView.ResizeMode.Stretch)&#10;            else:&#10;                header.setSectionResizeMode(i, QHeaderView.ResizeMode.ResizeToContents)&#10;        &#10;        history_layout.addWidget(self.expense_table)&#10;        history_group.setLayout(history_layout)&#10;        &#10;        layout.addWidget(history_group)&#10;        self.setLayout(layout)&#10;        &#10;    def create_summary_card(self, title, value):&#10;        &quot;&quot;&quot;Create a summary card widget&quot;&quot;&quot;&#10;        group = QGroupBox(title)&#10;        group.setStyleSheet(&quot;&quot;&quot;&#10;            QGroupBox {&#10;                font-weight: bold;&#10;                border: 2px solid #555;&#10;                border-radius: 5px;&#10;                margin-top: 10px;&#10;                padding-top: 10px;&#10;                min-width: 150px;&#10;            }&#10;        &quot;&quot;&quot;)&#10;        &#10;        layout = QVBoxLayout()&#10;        value_label = QLabel(value)&#10;        value_label.setAlignment(Qt.AlignmentFlag.AlignCenter)&#10;        value_label.setFont(QFont(&quot;Arial&quot;, 14, QFont.Weight.Bold))&#10;        value_label.setStyleSheet(&quot;color: #d9534f;&quot;)&#10;        layout.addWidget(value_label)&#10;        &#10;        group.setLayout(layout)&#10;        group.value_label = value_label  # Store reference for updating&#10;        return group&#10;        &#10;    def load_categories(self):&#10;        &quot;&quot;&quot;Load categories from the centralized category manager&quot;&quot;&quot;&#10;        try:&#10;            # Get categories from centralized manager&#10;            self.categories_data = self.category_manager.get_categories()&#10;&#10;            # Populate category combo&#10;            self.category_combo.clear()&#10;            self.category_combo.addItems(sorted(self.categories_data.keys()))&#10;            &#10;            # Populate filter category combo&#10;            self.filter_category.clear()&#10;            self.filter_category.addItems([&quot;All Categories&quot;] + sorted(self.categories_data.keys()))&#10;            &#10;        except Exception as e:&#10;            print(f&quot;Error loading categories: {e}&quot;)&#10;            &#10;    def on_category_changed(self, category):&#10;        &quot;&quot;&quot;Update subcategories when category changes&quot;&quot;&quot;&#10;        self.subcategory_combo.clear()&#10;        if category in self.categories_data:&#10;            self.subcategory_combo.addItems(self.categories_data[category])&#10;            &#10;    def add_expense(self):&#10;        &quot;&quot;&quot;Add expense entry to database&quot;&quot;&quot;&#10;        try:&#10;            person = self.person_combo.currentText()&#10;            amount_text = self.amount_input.text().strip()&#10;            date = self.date_input.date().toString(&quot;yyyy-MM-dd&quot;)&#10;            category = self.category_combo.currentText()&#10;            subcategory = self.subcategory_combo.currentText()&#10;            description = self.description_input.text().strip()&#10;            payment_method = self.payment_combo.currentText()&#10;            realized = self.realized_checkbox.isChecked()  # Get realized status&#10;&#10;            # Validate inputs&#10;            if not amount_text:&#10;                QMessageBox.warning(self, &quot;Warning&quot;, &quot;Please enter an amount&quot;)&#10;                return&#10;                &#10;            if not category or not subcategory:&#10;                QMessageBox.warning(self, &quot;Warning&quot;, &quot;Please select category and subcategory&quot;)&#10;                return&#10;                &#10;            try:&#10;                amount = float(amount_text.replace(&quot;,&quot;, &quot;&quot;).replace(&quot;$&quot;, &quot;&quot;))&#10;            except ValueError:&#10;                QMessageBox.warning(self, &quot;Warning&quot;, &quot;Please enter a valid number for amount&quot;)&#10;                return&#10;&#10;            # Add to database using the updated ExpenseModel.add method&#10;            from database.models import ExpenseModel&#10;            ExpenseModel.add(self.db, date, person, amount, category, subcategory,&#10;                           description, payment_method, realized)&#10;&#10;            # Clear form&#10;            self.amount_input.clear()&#10;            self.description_input.clear()&#10;            self.realized_checkbox.setChecked(False)  # Reset checkbox&#10;&#10;            # Refresh display&#10;            self.refresh_data()&#10;            &#10;            QMessageBox.information(self, &quot;Success&quot;, &quot;Expense added successfully!&quot;)&#10;            &#10;        except Exception as e:&#10;            QMessageBox.critical(self, &quot;Error&quot;, f&quot;Failed to add expense: {str(e)}&quot;)&#10;            &#10;    def import_expenses(self):&#10;        &quot;&quot;&quot;Import expenses from CSV or TXT file using ExpenseLoader&quot;&quot;&quot;&#10;        try:&#10;            file_path, _ = QFileDialog.getOpenFileName(&#10;                self, &#10;                &quot;Import Expenses&quot;, &#10;                &quot;&quot;, &#10;                &quot;CSV Files (*.csv);;Text Files (*.txt);;All Files (*.*)&quot;&#10;            )&#10;            &#10;            if not file_path:&#10;                return&#10;            &#10;            # Use ExpenseLoader to parse the file&#10;            loader = ExpenseLoader()&#10;            expenses = []&#10;            errors = []&#10;&#10;            if file_path.lower().endswith('.csv'):&#10;                expenses, errors = loader.load_csv_file(file_path)&#10;            elif file_path.lower().endswith('.txt'):&#10;                expenses, errors = loader.load_txt_file(file_path)&#10;            else:&#10;                # Try CSV first, then TXT&#10;                expenses, errors = loader.load_csv_file(file_path)&#10;                if not expenses and not errors:&#10;                    expenses, errors = loader.load_txt_file(file_path)&#10;&#10;            # Show errors if any&#10;            if errors:&#10;                error_dialog = QMessageBox()&#10;                error_dialog.setWindowTitle(&quot;Import Warnings&quot;)&#10;                error_dialog.setIcon(QMessageBox.Icon.Warning)&#10;                error_dialog.setText(f&quot;Found {len(errors)} issues while parsing the file:&quot;)&#10;                error_dialog.setDetailedText(&quot;\n&quot;.join(errors))&#10;                error_dialog.exec()&#10;&#10;            if not expenses:&#10;                QMessageBox.warning(self, &quot;Warning&quot;, &quot;No valid expenses found in the file&quot;)&#10;                return&#10;&#10;            # Validate expenses&#10;            valid_expenses, validation_errors = loader.validate_expenses(expenses)&#10;&#10;            if validation_errors:&#10;                error_dialog = QMessageBox()&#10;                error_dialog.setWindowTitle(&quot;Validation Errors&quot;)&#10;                error_dialog.setIcon(QMessageBox.Icon.Warning)&#10;                error_dialog.setText(f&quot;Found {len(validation_errors)} validation issues:&quot;)&#10;                error_dialog.setDetailedText(&quot;\n&quot;.join(validation_errors))&#10;                error_dialog.exec()&#10;&#10;            if not valid_expenses:&#10;                QMessageBox.warning(self, &quot;Warning&quot;, &quot;No valid expenses after validation&quot;)&#10;                return&#10;&#10;            # Use the new BulkImportPreviewDialog with proper category handling&#10;            from gui.utils.bulk_import_dialog import BulkImportPreviewDialog&#10;&#10;            # Get categories from the loader to ensure they match&#10;            loader_categories = loader.get_available_categories()&#10;&#10;            # Show preview dialog with loader categories&#10;            preview_dialog = BulkImportPreviewDialog(valid_expenses, loader_categories, self)&#10;            if preview_dialog.exec() == QDialog.DialogCode.Accepted:&#10;                final_expenses = preview_dialog.get_selected_expenses()&#10;&#10;                if final_expenses:&#10;                    # Add to database&#10;                    self.db.bulk_add_expenses(final_expenses)&#10;                    self.refresh_data()&#10;&#10;                    QMessageBox.information(&#10;                        self,&#10;                        &quot;Success&quot;, &#10;                        f&quot;Successfully imported {len(final_expenses)} expenses!\n\n&quot;&#10;                        f&quot;Parsing errors: {len(errors)}\n&quot;&#10;                        f&quot;Validation errors: {len(validation_errors)}\n&quot;&#10;                        f&quot;Successfully imported: {len(final_expenses)}&quot;&#10;                    )&#10;                    &#10;        except Exception as e:&#10;            QMessageBox.critical(self, &quot;Error&quot;, f&quot;Failed to import expenses: {str(e)}&quot;)&#10;            print(f&quot;Import error details: {e}&quot;)  # For debugging&#10;&#10;    def export_expenses(self):&#10;        &quot;&quot;&quot;Export expenses to CSV file&quot;&quot;&quot;&#10;        try:&#10;            file_path, _ = QFileDialog.getSaveFileName(&#10;                self,&#10;                &quot;Export Expenses&quot;,&#10;                f&quot;expenses_{datetime.now().strftime('%Y%m%d')}.csv&quot;,&#10;                &quot;CSV Files (*.csv)&quot;&#10;            )&#10;            &#10;            if not file_path:&#10;                return&#10;                &#10;            # Get current filter settings&#10;            person_filter = None if self.filter_person.currentText() == &quot;All&quot; else self.filter_person.currentText()&#10;            category_filter = None if self.filter_category.currentText() == &quot;All Categories&quot; else self.filter_category.currentText()&#10;            &#10;            # Build date filters&#10;            start_date = None&#10;            end_date = None&#10;            &#10;            if self.filter_month.currentIndex() &gt; 0 and self.filter_year.currentText() != &quot;All&quot;:&#10;                year = int(self.filter_year.currentText())&#10;                month = self.filter_month.currentIndex()&#10;                start_date = f&quot;{year:04d}-{month:02d}-01&quot;&#10;                if month == 12:&#10;                    end_date = f&quot;{year+1:04d}-01-01&quot;&#10;                else:&#10;                    end_date = f&quot;{year:04d}-{month+1:02d}-01&quot;&#10;            &#10;            # Get expense data&#10;            expenses = self.db.get_expenses(start_date, end_date, person_filter, category_filter)&#10;            &#10;            # Write to CSV&#10;            with open(file_path, 'w', newline='') as csvfile:&#10;                fieldnames = ['date', 'person', 'amount', 'category', 'subcategory', &#10;                            'description', 'payment_method']&#10;                writer = csv.DictWriter(csvfile, fieldnames=fieldnames)&#10;                &#10;                writer.writeheader()&#10;                for expense in expenses:&#10;                    writer.writerow({&#10;                        'date': expense['date'],&#10;                        'person': expense['person'],&#10;                        'amount': expense['amount'],&#10;                        'category': expense['category'],&#10;                        'subcategory': expense['subcategory'],&#10;                        'description': expense.get('description', ''),&#10;                        'payment_method': expense.get('payment_method', '')&#10;                    })&#10;            &#10;            QMessageBox.information(self, &quot;Success&quot;, f&quot;Expenses exported to {file_path}&quot;)&#10;            &#10;        except Exception as e:&#10;            QMessageBox.critical(self, &quot;Error&quot;, f&quot;Failed to export expenses: {str(e)}&quot;)&#10;            &#10;    def delete_selected_expenses(self):&#10;        &quot;&quot;&quot;Delete selected expense entries&quot;&quot;&quot;&#10;        selected_rows = []&#10;        for row in range(self.expense_table.rowCount()):&#10;            if self.expense_table.item(row, 0) and self.expense_table.item(row, 0).isSelected():&#10;                selected_rows.append(row)&#10;            elif any(self.expense_table.item(row, col) and self.expense_table.item(row, col).isSelected()&#10;                    for col in range(self.expense_table.columnCount())):&#10;                selected_rows.append(row)&#10;&#10;        if not selected_rows:&#10;            QMessageBox.warning(self, &quot;Warning&quot;, &quot;Please select one or more expense entries to delete.&quot;)&#10;            return&#10;&#10;        # Confirm deletion&#10;        reply = QMessageBox.question(&#10;            self,&#10;            &quot;Confirm Deletion&quot;,&#10;            f&quot;Are you sure you want to delete {len(selected_rows)} expense entr{'y' if len(selected_rows) == 1 else 'ies'}?\n\nThis action cannot be undone.&quot;,&#10;            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,&#10;            QMessageBox.StandardButton.No&#10;        )&#10;&#10;        if reply != QMessageBox.StandardButton.Yes:&#10;            return&#10;&#10;        try:&#10;            # Delete each selected expense entry&#10;            deleted_count = 0&#10;            for row in reversed(selected_rows):  # Reverse to maintain row indices&#10;                expense_id_item = self.expense_table.item(row, 7)  # ID is in column 7&#10;                if expense_id_item:&#10;                    expense_id = int(expense_id_item.text())&#10;&#10;                    # Delete from database using the model's delete method&#10;                    from database.models import ExpenseModel&#10;                    ExpenseModel.delete(self.db, expense_id)&#10;                    deleted_count += 1&#10;&#10;            # Refresh the table&#10;            self.refresh_data()&#10;&#10;            QMessageBox.information(&#10;                self,&#10;                &quot;Success&quot;,&#10;                f&quot;Successfully deleted {deleted_count} expense entr{'y' if deleted_count == 1 else 'ies'}.&quot;&#10;            )&#10;&#10;        except Exception as e:&#10;            QMessageBox.critical(self, &quot;Error&quot;, f&quot;Failed to delete expense entries: {str(e)}&quot;)&#10;&#10;    def refresh_data(self):&#10;        &quot;&quot;&quot;Refresh the expense data display&quot;&quot;&quot;&#10;        try:&#10;            # Build filter parameters&#10;            person_filter = None if self.filter_person.currentText() == &quot;All&quot; else self.filter_person.currentText()&#10;            category_filter = None if self.filter_category.currentText() == &quot;All Categories&quot; else self.filter_category.currentText()&#10;            &#10;            # Date filters&#10;            start_date = None&#10;            end_date = None&#10;            &#10;            if self.filter_month.currentIndex() &gt; 0 and self.filter_year.currentText() != &quot;All&quot;:&#10;                year = int(self.filter_year.currentText())&#10;                month = self.filter_month.currentIndex()&#10;                start_date = f&quot;{year:04d}-{month:02d}-01&quot;&#10;                if month == 12:&#10;                    end_date = f&quot;{year+1:04d}-01-01&quot;&#10;                else:&#10;                    end_date = f&quot;{year:04d}-{month+1:02d}-01&quot;&#10;            &#10;            # Get expense data&#10;            expense_data = self.db.get_expenses(start_date, end_date, person_filter, category_filter)&#10;            &#10;            # Clear and populate table&#10;            self.expense_table.setRowCount(0)&#10;            &#10;            jeff_total = 0&#10;            vanessa_total = 0&#10;            category_totals = {}&#10;            &#10;            for expense in expense_data:&#10;                row = self.expense_table.rowCount()&#10;                self.expense_table.insertRow(row)&#10;                &#10;                self.expense_table.setItem(row, 0, QTableWidgetItem(expense['date']))&#10;                self.expense_table.setItem(row, 1, QTableWidgetItem(expense['person']))&#10;                &#10;                amount = expense['amount']&#10;                amount_item = QTableWidgetItem(f&quot;${amount:,.2f}&quot;)&#10;                amount_item.setForeground(Qt.GlobalColor.red)&#10;                self.expense_table.setItem(row, 2, amount_item)&#10;                &#10;                self.expense_table.setItem(row, 3, QTableWidgetItem(expense['category']))&#10;                self.expense_table.setItem(row, 4, QTableWidgetItem(expense['subcategory']))&#10;                self.expense_table.setItem(row, 5, QTableWidgetItem(expense.get('description', '')))&#10;                self.expense_table.setItem(row, 6, QTableWidgetItem(expense.get('payment_method', '')))&#10;                self.expense_table.setItem(row, 7, QTableWidgetItem(str(expense['id'])))&#10;                &#10;                # Calculate totals&#10;                if expense['person'] == 'Jeff':&#10;                    jeff_total += amount&#10;                else:&#10;                    vanessa_total += amount&#10;                    &#10;                # Track category totals&#10;                category = expense['category']&#10;                if category not in category_totals:&#10;                    category_totals[category] = 0&#10;                category_totals[category] += amount&#10;            &#10;            # Update summary cards&#10;            self.jeff_summary.value_label.setText(f&quot;${jeff_total:,.2f}&quot;)&#10;            self.vanessa_summary.value_label.setText(f&quot;${vanessa_total:,.2f}&quot;)&#10;            self.total_summary.value_label.setText(f&quot;${jeff_total + vanessa_total:,.2f}&quot;)&#10;            &#10;            # Find top category&#10;            if category_totals:&#10;                top_category = max(category_totals, key=category_totals.get)&#10;                self.top_category_summary.value_label.setText(&#10;                    f&quot;{top_category}\n${category_totals[top_category]:,.2f}&quot;&#10;                )&#10;            else:&#10;                self.top_category_summary.value_label.setText(&quot;None&quot;)&#10;            &#10;        except Exception as e:&#10;            print(f&quot;Error refreshing expense data: {e}&quot;)&#10;&#10;&#10;class ImportDialog(QDialog):&#10;    &quot;&quot;&quot;Dialog for importing expenses from file&quot;&quot;&quot;&#10;    &#10;    def __init__(self, file_path, categories_data):&#10;        super().__init__()&#10;        self.file_path = file_path&#10;        self.categories_data = categories_data&#10;        self.parsed_expenses = []&#10;        &#10;        self.setWindowTitle(&quot;Import Expenses&quot;)&#10;        self.setModal(True)&#10;        self.setMinimumSize(800, 600)&#10;        &#10;        self.init_ui()&#10;        self.load_file()&#10;        &#10;    def init_ui(self):&#10;        &quot;&quot;&quot;Initialize the import dialog UI&quot;&quot;&quot;&#10;        layout = QVBoxLayout()&#10;        &#10;        # Instructions&#10;        instructions = QLabel(&#10;            &quot;Map the columns from your file to the expense fields. &quot;&#10;            &quot;Select the appropriate column for each field.&quot;&#10;        )&#10;        instructions.setWordWrap(True)&#10;        layout.addWidget(instructions)&#10;        &#10;        # Column mapping section&#10;        mapping_group = QGroupBox(&quot;Column Mapping&quot;)&#10;        mapping_layout = QGridLayout()&#10;        &#10;        self.column_combos = {}&#10;        fields = [&#10;            (&quot;Date&quot;, True),&#10;            (&quot;Amount&quot;, True),&#10;            (&quot;Description&quot;, False),&#10;            (&quot;Category&quot;, False),&#10;            (&quot;Subcategory&quot;, False),&#10;            (&quot;Payment Method&quot;, False)&#10;        ]&#10;        &#10;        for i, (field, required) in enumerate(fields):&#10;            label_text = f&quot;{field}:&quot; if not required else f&quot;{field}*:&quot;&#10;            mapping_layout.addWidget(QLabel(label_text), i, 0)&#10;            &#10;            combo = QComboBox()&#10;            combo.addItem(&quot;-- Not Mapped --&quot;)&#10;            self.column_combos[field] = combo&#10;            mapping_layout.addWidget(combo, i, 1)&#10;            &#10;        # Person assignment&#10;        mapping_layout.addWidget(QLabel(&quot;Assign to:&quot;), len(fields), 0)&#10;        self.person_combo = QComboBox()&#10;        self.person_combo.addItems([&quot;Jeff&quot;, &quot;Vanessa&quot;, &quot;Ask for Each&quot;])&#10;        mapping_layout.addWidget(self.person_combo, len(fields), 1)&#10;        &#10;        # Default category (if not in file)&#10;        mapping_layout.addWidget(QLabel(&quot;Default Category:&quot;), len(fields) + 1, 0)&#10;        self.default_category_combo = QComboBox()&#10;        self.default_category_combo.addItems([&quot;-- Select --&quot;] + list(self.categories_data.keys()))&#10;        mapping_layout.addWidget(self.default_category_combo, len(fields) + 1, 1)&#10;        &#10;        mapping_group.setLayout(mapping_layout)&#10;        layout.addWidget(mapping_group)&#10;        &#10;        # Preview section&#10;        preview_group = QGroupBox(&quot;Preview&quot;)&#10;        preview_layout = QVBoxLayout()&#10;        &#10;        self.preview_table = QTableWidget()&#10;        self.preview_table.setMaximumHeight(200)&#10;        preview_layout.addWidget(self.preview_table)&#10;        &#10;        preview_group.setLayout(preview_layout)&#10;        layout.addWidget(preview_group)&#10;        &#10;        # Dialog buttons&#10;        buttons = QDialogButtonBox(&#10;            QDialogButtonBox.StandardButton.Ok | QDialogButtonBox.StandardButton.Cancel&#10;        )&#10;        buttons.accepted.connect(self.process_import)&#10;        buttons.rejected.connect(self.reject)&#10;        layout.addWidget(buttons)&#10;        &#10;        self.setLayout(layout)&#10;        &#10;    def load_file(self):&#10;        &quot;&quot;&quot;Load and preview the file&quot;&quot;&quot;&#10;        try:&#10;            with open(self.file_path, 'r') as file:&#10;                # Try to detect delimiter&#10;                sample = file.read(1024)&#10;                file.seek(0)&#10;                &#10;                # Detect delimiter&#10;                if '\t' in sample:&#10;                    delimiter = '\t'&#10;                elif ',' in sample:&#10;                    delimiter = ','&#10;                else:&#10;                    delimiter = ','&#10;                &#10;                reader = csv.reader(file, delimiter=delimiter)&#10;                rows = list(reader)&#10;                &#10;                if not rows:&#10;                    QMessageBox.warning(self, &quot;Warning&quot;, &quot;The file appears to be empty&quot;)&#10;                    return&#10;                &#10;                # Assume first row is headers&#10;                headers = rows[0] if rows else []&#10;                data_rows = rows[1:6] if len(rows) &gt; 1 else []  # Preview first 5 data rows&#10;                &#10;                # Update column combos&#10;                for combo in self.column_combos.values():&#10;                    combo.clear()&#10;                    combo.addItem(&quot;-- Not Mapped --&quot;)&#10;                    combo.addItems(headers)&#10;                &#10;                # Try to auto-map columns based on header names&#10;                self.auto_map_columns(headers)&#10;                &#10;                # Update preview table&#10;                self.preview_table.setColumnCount(len(headers))&#10;                self.preview_table.setHorizontalHeaderLabels(headers)&#10;                self.preview_table.setRowCount(len(data_rows))&#10;                &#10;                for i, row in enumerate(data_rows):&#10;                    for j, value in enumerate(row):&#10;                        self.preview_table.setItem(i, j, QTableWidgetItem(value))&#10;                        &#10;        except Exception as e:&#10;            QMessageBox.critical(self, &quot;Error&quot;, f&quot;Failed to load file: {str(e)}&quot;)&#10;            &#10;    def auto_map_columns(self, headers):&#10;        &quot;&quot;&quot;Try to automatically map columns based on header names&quot;&quot;&quot;&#10;        mappings = {&#10;            &quot;Date&quot;: [&quot;date&quot;, &quot;transaction date&quot;, &quot;posted date&quot;, &quot;trans date&quot;],&#10;            &quot;Amount&quot;: [&quot;amount&quot;, &quot;debit&quot;, &quot;charge&quot;, &quot;payment&quot;],&#10;            &quot;Description&quot;: [&quot;description&quot;, &quot;memo&quot;, &quot;merchant&quot;, &quot;details&quot;],&#10;            &quot;Category&quot;: [&quot;category&quot;, &quot;type&quot;],&#10;            &quot;Subcategory&quot;: [&quot;subcategory&quot;, &quot;sub category&quot;, &quot;sub-category&quot;],&#10;            &quot;Payment Method&quot;: [&quot;payment&quot;, &quot;method&quot;, &quot;card&quot;, &quot;account&quot;]&#10;        }&#10;        &#10;        headers_lower = [h.lower() for h in headers]&#10;        &#10;        for field, keywords in mappings.items():&#10;            combo = self.column_combos[field]&#10;            for i, header in enumerate(headers_lower):&#10;                for keyword in keywords:&#10;                    if keyword in header:&#10;                        combo.setCurrentIndex(i + 1)  # +1 because of &quot;-- Not Mapped --&quot;&#10;                        break&#10;                        &#10;    def process_import(self):&#10;        &quot;&quot;&quot;Process the import with the current mapping&quot;&quot;&quot;&#10;        try:&#10;            # Validate required fields are mapped&#10;            date_col = self.column_combos[&quot;Date&quot;].currentIndex() - 1&#10;            amount_col = self.column_combos[&quot;Amount&quot;].currentIndex() - 1&#10;            &#10;            if date_col &lt; 0 or amount_col &lt; 0:&#10;                QMessageBox.warning(self, &quot;Warning&quot;, &quot;Date and Amount columns must be mapped&quot;)&#10;                return&#10;            &#10;            # Read the entire file&#10;            with open(self.file_path, 'r') as file:&#10;                delimiter = '\t' if '\t' in file.read(1024) else ','&#10;                file.seek(0)&#10;                &#10;                reader = csv.reader(file, delimiter=delimiter)&#10;                rows = list(reader)&#10;                &#10;                if len(rows) &lt;= 1:&#10;                    QMessageBox.warning(self, &quot;Warning&quot;, &quot;No data rows found&quot;)&#10;                    return&#10;                &#10;                # Skip header row&#10;                data_rows = rows[1:]&#10;                &#10;                # Process each row&#10;                self.parsed_expenses = []&#10;                person = self.person_combo.currentText()&#10;                &#10;                for row in data_rows:&#10;                    try:&#10;                        expense = {&#10;                            'person': person if person != &quot;Ask for Each&quot; else &quot;Jeff&quot;,  # Default to Jeff&#10;                            'date': row[date_col] if date_col &gt;= 0 else &quot;&quot;,&#10;                            'amount': abs(float(row[amount_col].replace(&quot;,&quot;, &quot;&quot;).replace(&quot;$&quot;, &quot;&quot;))),&#10;                        }&#10;                        &#10;                        # Optional fields&#10;                        desc_col = self.column_combos[&quot;Description&quot;].currentIndex() - 1&#10;                        if desc_col &gt;= 0 and desc_col &lt; len(row):&#10;                            expense['description'] = row[desc_col]&#10;                        else:&#10;                            expense['description'] = &quot;&quot;&#10;                        &#10;                        cat_col = self.column_combos[&quot;Category&quot;].currentIndex() - 1&#10;                        if cat_col &gt;= 0 and cat_col &lt; len(row):&#10;                            expense['category'] = row[cat_col]&#10;                        else:&#10;                            expense['category'] = self.default_category_combo.currentText()&#10;                            &#10;                        subcat_col = self.column_combos[&quot;Subcategory&quot;].currentIndex() - 1&#10;                        if subcat_col &gt;= 0 and subcat_col &lt; len(row):&#10;                            expense['subcategory'] = row[subcat_col]&#10;                        else:&#10;                            # Use first subcategory for the category&#10;                            if expense['category'] in self.categories_data:&#10;                                expense['subcategory'] = self.categories_data[expense['category']][0]&#10;                            else:&#10;                                expense['subcategory'] = &quot;Other&quot;&#10;                        &#10;                        payment_col = self.column_combos[&quot;Payment Method&quot;].currentIndex() - 1&#10;                        if payment_col &gt;= 0 and payment_col &lt; len(row):&#10;                            expense['payment_method'] = row[payment_col]&#10;                        else:&#10;                            expense['payment_method'] = &quot;Credit Card&quot;&#10;                        &#10;                        # Validate and add&#10;                        if expense['date'] and expense['amount'] &gt; 0:&#10;                            self.parsed_expenses.append(expense)&#10;                            &#10;                    except Exception as e:&#10;                        print(f&quot;Error processing row: {e}&quot;)&#10;                        continue&#10;                &#10;                if self.parsed_expenses:&#10;                    self.accept()&#10;                else:&#10;                    QMessageBox.warning(self, &quot;Warning&quot;, &quot;No valid expenses could be parsed&quot;)&#10;                    &#10;        except Exception as e:&#10;            QMessageBox.critical(self, &quot;Error&quot;, f&quot;Failed to process import: {str(e)}&quot;)&#10;            &#10;    def get_parsed_expenses(self):&#10;        &quot;&quot;&quot;Return the parsed expenses&quot;&quot;&quot;&#10;        return self.parsed_expenses&#10;&#10;&#10;class ExpensePreviewDialog(QDialog):&#10;    &quot;&quot;&quot;Dialog for previewing expenses before import&quot;&quot;&quot;&#10;&#10;    def __init__(self, expenses, categories_data):&#10;        super().__init__()&#10;        self.expenses = expenses&#10;        self.categories_data = categories_data&#10;        self.final_expenses = []&#10;&#10;        self.setWindowTitle(&quot;Preview Expenses&quot;)&#10;        self.setModal(True)&#10;        self.setMinimumSize(800, 600)&#10;&#10;        self.init_ui()&#10;        self.populate_preview()&#10;&#10;    def init_ui(self):&#10;        &quot;&quot;&quot;Initialize the preview dialog UI&quot;&quot;&quot;&#10;        layout = QVBoxLayout()&#10;&#10;        # Instructions&#10;        instructions = QLabel(&#10;            &quot;Review the expenses below. You can edit the values, select rows and delete them, &quot;&#10;            &quot;or remove any expense that you do not want to import.&quot;&#10;        )&#10;        instructions.setWordWrap(True)&#10;        layout.addWidget(instructions)&#10;&#10;        # Preview table&#10;        self.preview_table = QTableWidget()&#10;        self.preview_table.setColumnCount(7)&#10;        self.preview_table.setHorizontalHeaderLabels([&#10;            &quot;Date&quot;, &quot;Person&quot;, &quot;Amount&quot;, &quot;Category&quot;, &quot;Subcategory&quot;, &quot;Description&quot;, &quot;Payment Method&quot;&#10;        ])&#10;&#10;        # Enable row selection&#10;        self.preview_table.setSelectionBehavior(QTableWidget.SelectionBehavior.SelectRows)&#10;        self.preview_table.setSelectionMode(QTableWidget.SelectionMode.MultiSelection)&#10;&#10;        # Set column widths&#10;        header = self.preview_table.horizontalHeader()&#10;        header.setSectionResizeMode(0, QHeaderView.ResizeMode.ResizeToContents)&#10;        header.setSectionResizeMode(1, QHeaderView.ResizeMode.ResizeToContents)&#10;        header.setSectionResizeMode(2, QHeaderView.ResizeMode.ResizeToContents)&#10;        header.setSectionResizeMode(3, QHeaderView.ResizeMode.ResizeToContents)&#10;        header.setSectionResizeMode(4, QHeaderView.ResizeMode.ResizeToContents)&#10;        header.setSectionResizeMode(5, QHeaderView.ResizeMode.Stretch)&#10;&#10;        layout.addWidget(self.preview_table)&#10;&#10;        # Action buttons layout&#10;        action_layout = QHBoxLayout()&#10;&#10;        # Delete selected button&#10;        delete_btn = QPushButton(&quot;Delete Selected&quot;)&#10;        delete_btn.setStyleSheet(&quot;&quot;&quot;&#10;            QPushButton {&#10;                background-color: #d9534f;&#10;                color: white;&#10;                padding: 8px;&#10;                font-weight: bold;&#10;                border-radius: 4px;&#10;            }&#10;            QPushButton:hover {&#10;                background-color: #c9302c;&#10;            }&#10;        &quot;&quot;&quot;)&#10;        delete_btn.clicked.connect(self.delete_selected_rows)&#10;        action_layout.addWidget(delete_btn)&#10;&#10;        action_layout.addStretch()&#10;&#10;        # Row count label&#10;        self.row_count_label = QLabel()&#10;        self.update_row_count()&#10;        action_layout.addWidget(self.row_count_label)&#10;&#10;        layout.addLayout(action_layout)&#10;&#10;        # Buttons&#10;        button_layout = QHBoxLayout()&#10;&#10;        ok_btn = QPushButton(&quot;Import All&quot;)&#10;        ok_btn.setStyleSheet(&quot;&quot;&quot;&#10;            QPushButton {&#10;                background-color: #5cb85c;&#10;                color: white;&#10;                padding: 8px;&#10;                font-weight: bold;&#10;                border-radius: 4px;&#10;            }&#10;            QPushButton:hover {&#10;                background-color: #449d44;&#10;            }&#10;        &quot;&quot;&quot;)&#10;        ok_btn.clicked.connect(self.import_all)&#10;        button_layout.addWidget(ok_btn)&#10;&#10;        cancel_btn = QPushButton(&quot;Cancel&quot;)&#10;        cancel_btn.clicked.connect(self.reject)&#10;        button_layout.addWidget(cancel_btn)&#10;&#10;        layout.addLayout(button_layout)&#10;&#10;        self.setLayout(layout)&#10;&#10;    def delete_selected_rows(self):&#10;        &quot;&quot;&quot;Delete selected rows from the preview table&quot;&quot;&quot;&#10;        try:&#10;            # Get selected rows&#10;            selected_rows = set()&#10;            for item in self.preview_table.selectedItems():&#10;                selected_rows.add(item.row())&#10;&#10;            if not selected_rows:&#10;                QMessageBox.information(self, &quot;Info&quot;, &quot;Please select one or more rows to delete.&quot;)&#10;                return&#10;&#10;            # Confirm deletion&#10;            count = len(selected_rows)&#10;            reply = QMessageBox.question(&#10;                self,&#10;                &quot;Confirm Delete&quot;,&#10;                f&quot;Are you sure you want to delete {count} selected expense{'s' if count != 1 else ''}?&quot;,&#10;                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,&#10;                QMessageBox.StandardButton.No&#10;            )&#10;&#10;            if reply != QMessageBox.StandardButton.Yes:&#10;                return&#10;&#10;            # Delete rows in reverse order to maintain row indices&#10;            for row in sorted(selected_rows, reverse=True):&#10;                self.preview_table.removeRow(row)&#10;&#10;            # Update row count display&#10;            self.update_row_count()&#10;&#10;            QMessageBox.information(self, &quot;Success&quot;, f&quot;Deleted {count} expense{'s' if count != 1 else ''}.&quot;)&#10;&#10;        except Exception as e:&#10;            QMessageBox.critical(self, &quot;Error&quot;, f&quot;Failed to delete rows: {str(e)}&quot;)&#10;&#10;    def update_row_count(self):&#10;        &quot;&quot;&quot;Update the row count label&quot;&quot;&quot;&#10;        count = self.preview_table.rowCount()&#10;        self.row_count_label.setText(f&quot;Total expenses: {count}&quot;)&#10;&#10;    def populate_preview(self):&#10;        &quot;&quot;&quot;Populate the preview table with expense data and editable subcategory dropdowns&quot;&quot;&quot;&#10;        self.preview_table.setRowCount(len(self.expenses))&#10;&#10;        for i, expense in enumerate(self.expenses):&#10;            # Standard text items for non-editable columns&#10;            self.preview_table.setItem(i, 0, QTableWidgetItem(expense['date']))&#10;            self.preview_table.setItem(i, 1, QTableWidgetItem(expense['person']))&#10;            self.preview_table.setItem(i, 2, QTableWidgetItem(f&quot;${expense['amount']:,.2f}&quot;))&#10;&#10;            # Category dropdown&#10;            category_combo = QComboBox()&#10;            category_combo.addItems(sorted(self.categories_data.keys()))&#10;            category_combo.setCurrentText(expense['category'])&#10;            category_combo.currentTextChanged.connect(lambda text, row=i: self.on_category_changed_in_table(row, text))&#10;            self.preview_table.setCellWidget(i, 3, category_combo)&#10;&#10;            # Subcategory dropdown&#10;            subcategory_combo = QComboBox()&#10;            category = expense['category']&#10;            if category in self.categories_data:&#10;                subcategory_combo.addItems(self.categories_data[category])&#10;                if expense['subcategory'] in self.categories_data[category]:&#10;                    subcategory_combo.setCurrentText(expense['subcategory'])&#10;                else:&#10;                    # If subcategory doesn't exist, show it as blank and add it as an option&#10;                    subcategory_combo.addItem(expense['subcategory'])&#10;                    subcategory_combo.setCurrentText(expense['subcategory'])&#10;            else:&#10;                # If category doesn't exist, add the subcategory as is&#10;                subcategory_combo.addItem(expense['subcategory'])&#10;                subcategory_combo.setCurrentText(expense['subcategory'])&#10;&#10;            self.preview_table.setCellWidget(i, 4, subcategory_combo)&#10;&#10;            # Regular text items for description and payment method&#10;            self.preview_table.setItem(i, 5, QTableWidgetItem(expense.get('description', '')))&#10;            self.preview_table.setItem(i, 6, QTableWidgetItem(expense.get('payment_method', '')))&#10;&#10;        # Update row count display&#10;        self.update_row_count()&#10;&#10;    def on_category_changed_in_table(self, row, category):&#10;        &quot;&quot;&quot;Update subcategory dropdown when category changes in the preview table&quot;&quot;&quot;&#10;        subcategory_combo = self.preview_table.cellWidget(row, 4)&#10;        if subcategory_combo:&#10;            subcategory_combo.clear()&#10;            if category in self.categories_data:&#10;                subcategory_combo.addItems(self.categories_data[category])&#10;            else:&#10;                subcategory_combo.addItem(&quot;Other&quot;)&#10;&#10;    def import_all(self):&#10;        &quot;&quot;&quot;Import all remaining displayed expenses&quot;&quot;&quot;&#10;        try:&#10;            # Check if there are any rows left&#10;            if self.preview_table.rowCount() == 0:&#10;                QMessageBox.warning(self, &quot;Warning&quot;, &quot;No expenses to import.&quot;)&#10;                return&#10;&#10;            # Collect final expenses from remaining rows&#10;            for i in range(self.preview_table.rowCount()):&#10;                try:&#10;                    date = self.preview_table.item(i, 0).text()&#10;                    person = self.preview_table.item(i, 1).text()&#10;                    amount_text = self.preview_table.item(i, 2).text().replace(&quot;$&quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;)&#10;&#10;                    # Get values from dropdown widgets&#10;                    category_combo = self.preview_table.cellWidget(i, 3)&#10;                    subcategory_combo = self.preview_table.cellWidget(i, 4)&#10;&#10;                    category = category_combo.currentText() if category_combo else &quot;Other&quot;&#10;                    subcategory = subcategory_combo.currentText() if subcategory_combo else &quot;Other&quot;&#10;&#10;                    description = self.preview_table.item(i, 5).text()&#10;                    payment_method = self.preview_table.item(i, 6).text()&#10;&#10;                    amount = abs(float(amount_text))  # Ensure positive amount&#10;&#10;                    expense = {&#10;                        'date': date,&#10;                        'person': person,&#10;                        'amount': amount,&#10;                        'category': category,&#10;                        'subcategory': subcategory,&#10;                        'description': description,&#10;                        'payment_method': payment_method&#10;                    }&#10;&#10;                    self.final_expenses.append(expense)&#10;&#10;                except Exception as e:&#10;                    print(f&quot;Error processing row {i}: {e}&quot;)&#10;                    continue&#10;&#10;            self.accept()&#10;&#10;        except Exception as e:&#10;            QMessageBox.critical(self, &quot;Error&quot;, f&quot;Failed to import expenses: {str(e)}&quot;)&#10;&#10;    def get_final_expenses(self):&#10;        &quot;&quot;&quot;Return the final expenses list&quot;&quot;&quot;&#10;        return self.final_expenses&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gui/tabs/overview_tab.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gui/tabs/overview_tab.py" />
              <option name="originalContent" value="&quot;&quot;&quot;&#10;Budget Overview Tab - Synopsis of spending and income for the month&#10;&quot;&quot;&quot;&#10;&#10;from PyQt6.QtWidgets import (&#10;    QWidget, QVBoxLayout, QHBoxLayout, QLabel, QPushButton,&#10;    QGroupBox, QGridLayout, QComboBox, QFrame&#10;)&#10;from PyQt6.QtCore import Qt, QDate&#10;from PyQt6.QtGui import QFont&#10;from datetime import datetime&#10;from database.db_manager import DatabaseManager&#10;&#10;class OverviewTab(QWidget):&#10;    def __init__(self):&#10;        super().__init__()&#10;        self.db = DatabaseManager()&#10;        self.refresh_data()&#10;        &#10;    def init_ui(self):&#10;        &quot;&quot;&quot;Initialize the UI&quot;&quot;&quot;&#10;        layout = QVBoxLayout()&#10;        &#10;        # Header with month selector&#10;        header_layout = QHBoxLayout()&#10;        &#10;        title = QLabel(&quot;Budget Overview&quot;)&#10;        title.setFont(QFont(&quot;Arial&quot;, 18, QFont.Weight.Bold))&#10;        header_layout.addWidget(title)&#10;        &#10;        header_layout.addStretch()&#10;        &#10;        # Month/Year selector&#10;        self.month_combo = QComboBox()&#10;        self.month_combo.addItems([&#10;            &quot;January&quot;, &quot;February&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;, &quot;June&quot;,&#10;            &quot;July&quot;, &quot;August&quot;, &quot;September&quot;, &quot;October&quot;, &quot;November&quot;, &quot;December&quot;&#10;        ])&#10;        self.month_combo.setCurrentIndex(datetime.now().month - 1)&#10;        self.month_combo.currentIndexChanged.connect(self.refresh_data)&#10;        &#10;        self.year_combo = QComboBox()&#10;        current_year = datetime.now().year&#10;        self.year_combo.addItems([str(year) for year in range(current_year - 2, current_year + 2)])&#10;        self.year_combo.setCurrentText(str(current_year))&#10;        self.year_combo.currentIndexChanged.connect(self.refresh_data)&#10;        &#10;        header_layout.addWidget(QLabel(&quot;Month:&quot;))&#10;        header_layout.addWidget(self.month_combo)&#10;        header_layout.addWidget(QLabel(&quot;Year:&quot;))&#10;        header_layout.addWidget(self.year_combo)&#10;        &#10;        refresh_btn = QPushButton(&quot;Refresh&quot;)&#10;        refresh_btn.clicked.connect(self.refresh_data)&#10;        header_layout.addWidget(refresh_btn)&#10;        &#10;        layout.addLayout(header_layout)&#10;        &#10;        # Add separator&#10;        separator = QFrame()&#10;        separator.setFrameShape(QFrame.Shape.HLine)&#10;        separator.setFrameShadow(QFrame.Shadow.Sunken)&#10;        layout.addWidget(separator)&#10;        &#10;        # Main content area with summary cards&#10;        content_layout = QGridLayout()&#10;        &#10;        # Income Summary Card&#10;        self.income_group = self.create_summary_card(&quot; Income&quot;, [&#10;            (&quot;Jeff's Income:&quot;, &quot;$0.00&quot;),&#10;            (&quot;Vanessa's Income:&quot;, &quot;$0.00&quot;),&#10;            (&quot;Total Income:&quot;, &quot;$0.00&quot;)&#10;        ])&#10;        content_layout.addWidget(self.income_group, 0, 0)&#10;        &#10;        # Expense Summary Card&#10;        self.expense_group = self.create_summary_card(&quot; Expenses&quot;, [&#10;            (&quot;Jeff's Expenses:&quot;, &quot;$0.00&quot;),&#10;            (&quot;Vanessa's Expenses:&quot;, &quot;$0.00&quot;),&#10;            (&quot;Total Expenses:&quot;, &quot;$0.00&quot;)&#10;        ])&#10;        content_layout.addWidget(self.expense_group, 0, 1)&#10;        &#10;        # Net Summary Card&#10;        self.net_group = self.create_summary_card(&quot; Net Results&quot;, [&#10;            (&quot;Net Income:&quot;, &quot;$0.00&quot;),&#10;            (&quot;Savings Rate:&quot;, &quot;0%&quot;),&#10;            (&quot;Available for Savings:&quot;, &quot;$0.00&quot;)&#10;        ])&#10;        content_layout.addWidget(self.net_group, 1, 0)&#10;        &#10;        # Top Categories Card&#10;        self.categories_group = self.create_summary_card(&quot;️ Top Categories&quot;, [&#10;            (&quot;1.&quot;, &quot;&quot;),&#10;            (&quot;2.&quot;, &quot;&quot;),&#10;            (&quot;3.&quot;, &quot;&quot;),&#10;            (&quot;4.&quot;, &quot;&quot;),&#10;            (&quot;5.&quot;, &quot;&quot;)&#10;        ])&#10;        content_layout.addWidget(self.categories_group, 1, 1)&#10;        &#10;        # Budget Health Card&#10;        self.budget_health_group = self.create_summary_card(&quot;❤️ Budget Health&quot;, [&#10;            (&quot;On Track:&quot;, &quot;0&quot;),&#10;            (&quot;Over Budget:&quot;, &quot;0&quot;),&#10;            (&quot;Under Budget:&quot;, &quot;0&quot;),&#10;            (&quot;Health Score:&quot;, &quot;0%&quot;)&#10;        ])&#10;        content_layout.addWidget(self.budget_health_group, 2, 0)&#10;        &#10;        # Quick Stats Card&#10;        self.stats_group = self.create_summary_card(&quot; Quick Stats&quot;, [&#10;            (&quot;Days in Month:&quot;, &quot;30&quot;),&#10;            (&quot;Daily Average:&quot;, &quot;$0.00&quot;),&#10;            (&quot;Projected Monthly:&quot;, &quot;$0.00&quot;),&#10;            (&quot;Days Remaining:&quot;, &quot;0&quot;)&#10;        ])&#10;        content_layout.addWidget(self.stats_group, 2, 1)&#10;        &#10;        layout.addLayout(content_layout)&#10;        layout.addStretch()&#10;        &#10;        self.setLayout(layout)&#10;        &#10;    def create_summary_card(self, title, items):&#10;        &quot;&quot;&quot;Create a summary card widget&quot;&quot;&quot;&#10;        group = QGroupBox(title)&#10;        group.setStyleSheet(&quot;&quot;&quot;&#10;            QGroupBox {&#10;                font-size: 14px;&#10;                font-weight: bold;&#10;                border: 2px solid #555;&#10;                border-radius: 5px;&#10;                margin-top: 10px;&#10;                padding-top: 10px;&#10;            }&#10;            QGroupBox::title {&#10;                subcontrol-origin: margin;&#10;                left: 10px;&#10;                padding: 0 5px 0 5px;&#10;            }&#10;        &quot;&quot;&quot;)&#10;        &#10;        layout = QGridLayout()&#10;        &#10;        self.labels = {}&#10;        self.labels = {}&#10;        for i, (label_text, value_text) in enumerate(items):&#10;            label = QLabel(label_text)&#10;            label.setStyleSheet(&quot;font-weight: normal;&quot;)&#10;            value = QLabel(value_text)&#10;            value.setStyleSheet(&quot;font-weight: bold; color: #2a82da;&quot;)&#10;            value.setAlignment(Qt.AlignmentFlag.AlignRight)&#10;            &#10;            layout.addWidget(label, i, 0)&#10;            layout.addWidget(value, i, 1)&#10;            &#10;            # Store reference to value labels for updating&#10;            key = f&quot;{title}_{label_text}&quot;&#10;            self.labels[key] = value&#10;            &#10;        group.setLayout(layout)&#10;        return group&#10;        &#10;    def refresh_data(self):&#10;        &quot;&quot;&quot;Refresh the overview data&quot;&quot;&quot;&#10;        try:&#10;            month = self.month_combo.currentIndex() + 1&#10;            year = int(self.year_combo.currentText())&#10;            &#10;            # Get monthly summary from database&#10;            summary = self.db.get_monthly_summary(year, month)&#10;            &#10;            # Update Income Card&#10;            jeff_income = summary['income'].get('Jeff', 0)&#10;            vanessa_income = summary['income'].get('Vanessa', 0)&#10;            total_income = jeff_income + vanessa_income&#10;            &#10;            self.labels[&quot; Income_Jeff's Income:&quot;].setText(f&quot;${jeff_income:,.2f}&quot;)&#10;            self.labels[&quot; Income_Vanessa's Income:&quot;].setText(f&quot;${vanessa_income:,.2f}&quot;)&#10;            self.labels[&quot; Income_Total Income:&quot;].setText(f&quot;${total_income:,.2f}&quot;)&#10;            &#10;            # Update Expense Card&#10;            jeff_expenses = summary['expenses'].get('Jeff', 0)&#10;            vanessa_expenses = summary['expenses'].get('Vanessa', 0)&#10;            total_expenses = jeff_expenses + vanessa_expenses&#10;            &#10;            self.labels[&quot; Expenses_Jeff's Expenses:&quot;].setText(f&quot;${jeff_expenses:,.2f}&quot;)&#10;            self.labels[&quot; Expenses_Vanessa's Expenses:&quot;].setText(f&quot;${vanessa_expenses:,.2f}&quot;)&#10;            self.labels[&quot; Expenses_Total Expenses:&quot;].setText(f&quot;${total_expenses:,.2f}&quot;)&#10;            &#10;            # Update Net Results Card&#10;            net_income = total_income - total_expenses&#10;            savings_rate = (net_income / total_income * 100) if total_income &gt; 0 else 0&#10;            &#10;            self.labels[&quot; Net Results_Net Income:&quot;].setText(f&quot;${net_income:,.2f}&quot;)&#10;            self.labels[&quot; Net Results_Savings Rate:&quot;].setText(f&quot;{savings_rate:.1f}%&quot;)&#10;            self.labels[&quot; Net Results_Available for Savings:&quot;].setText(f&quot;${net_income:,.2f}&quot;)&#10;            &#10;            # Update Top Categories&#10;            top_categories = sorted(summary['by_category'], key=lambda x: x['total'], reverse=True)[:5]&#10;            for i in range(5):&#10;                label_key = f&quot;️ Top Categories_{i+1}.&quot;&#10;                if i &lt; len(top_categories):&#10;                    cat = top_categories[i]&#10;                    self.labels[label_key].setText(f&quot;{cat['category']}: ${cat['total']:,.2f}&quot;)&#10;                else:&#10;                    self.labels[label_key].setText(&quot;&quot;)&#10;            &#10;            # Update Quick Stats&#10;            from calendar import monthrange&#10;            days_in_month = monthrange(year, month)[1]&#10;            current_day = datetime.now().day if datetime.now().month == month and datetime.now().year == year else days_in_month&#10;            daily_avg = total_expenses / current_day if current_day &gt; 0 else 0&#10;            projected = daily_avg * days_in_month&#10;            days_remaining = max(0, days_in_month - current_day)&#10;            &#10;            self.labels[&quot; Quick Stats_Days in Month:&quot;].setText(str(days_in_month))&#10;            self.labels[&quot; Quick Stats_Daily Average:&quot;].setText(f&quot;${daily_avg:,.2f}&quot;)&#10;            self.labels[&quot; Quick Stats_Projected Monthly:&quot;].setText(f&quot;${projected:,.2f}&quot;)&#10;            self.labels[&quot; Quick Stats_Days Remaining:&quot;].setText(str(days_remaining))&#10;            &#10;        except Exception as e:&#10;            print(f&quot;Error refreshing overview data: {e}&quot;)" />
              <option name="updatedContent" value="&quot;&quot;&quot;&#10;Budget Overview Tab - Synopsis of spending and income for the month&#10;&quot;&quot;&quot;&#10;&#10;from PyQt6.QtWidgets import (&#10;    QWidget, QVBoxLayout, QHBoxLayout, QLabel, QPushButton,&#10;    QGroupBox, QGridLayout, QComboBox, QFrame&#10;)&#10;from PyQt6.QtCore import Qt, QDate&#10;from PyQt6.QtGui import QFont&#10;from datetime import datetime&#10;from database.db_manager import DatabaseManager&#10;&#10;class OverviewTab(QWidget):&#10;    def __init__(self):&#10;        super().__init__()&#10;        self.db = DatabaseManager()&#10;        self.labels = {}  # Initialize labels dictionary&#10;        self.init_ui()&#10;        self.refresh_data()&#10;        &#10;    def init_ui(self):&#10;        &quot;&quot;&quot;Initialize the UI&quot;&quot;&quot;&#10;        layout = QVBoxLayout()&#10;        &#10;        # Header with month selector&#10;        header_layout = QHBoxLayout()&#10;        &#10;        title = QLabel(&quot;Budget Overview&quot;)&#10;        title.setFont(QFont(&quot;Arial&quot;, 18, QFont.Weight.Bold))&#10;        header_layout.addWidget(title)&#10;        &#10;        header_layout.addStretch()&#10;        &#10;        # Month/Year selector&#10;        self.month_combo = QComboBox()&#10;        self.month_combo.addItems([&#10;            &quot;January&quot;, &quot;February&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;, &quot;June&quot;,&#10;            &quot;July&quot;, &quot;August&quot;, &quot;September&quot;, &quot;October&quot;, &quot;November&quot;, &quot;December&quot;&#10;        ])&#10;        self.month_combo.setCurrentIndex(datetime.now().month - 1)&#10;        self.month_combo.currentIndexChanged.connect(self.refresh_data)&#10;        &#10;        self.year_combo = QComboBox()&#10;        current_year = datetime.now().year&#10;        self.year_combo.addItems([str(year) for year in range(current_year - 2, current_year + 2)])&#10;        self.year_combo.setCurrentText(str(current_year))&#10;        self.year_combo.currentIndexChanged.connect(self.refresh_data)&#10;        &#10;        header_layout.addWidget(QLabel(&quot;Month:&quot;))&#10;        header_layout.addWidget(self.month_combo)&#10;        header_layout.addWidget(QLabel(&quot;Year:&quot;))&#10;        header_layout.addWidget(self.year_combo)&#10;        &#10;        refresh_btn = QPushButton(&quot;Refresh&quot;)&#10;        refresh_btn.clicked.connect(self.refresh_data)&#10;        header_layout.addWidget(refresh_btn)&#10;        &#10;        layout.addLayout(header_layout)&#10;        &#10;        # Add separator&#10;        separator = QFrame()&#10;        separator.setFrameShape(QFrame.Shape.HLine)&#10;        separator.setFrameShadow(QFrame.Shadow.Sunken)&#10;        layout.addWidget(separator)&#10;        &#10;        # Main content area with summary cards&#10;        content_layout = QGridLayout()&#10;        &#10;        # Income Summary Card&#10;        self.income_group = self.create_summary_card(&quot; Income&quot;, [&#10;            (&quot;Jeff's Income:&quot;, &quot;$0.00&quot;),&#10;            (&quot;Vanessa's Income:&quot;, &quot;$0.00&quot;),&#10;            (&quot;Total Income:&quot;, &quot;$0.00&quot;)&#10;        ])&#10;        content_layout.addWidget(self.income_group, 0, 0)&#10;        &#10;        # Expense Summary Card&#10;        self.expense_group = self.create_summary_card(&quot; Expenses&quot;, [&#10;            (&quot;Jeff's Expenses:&quot;, &quot;$0.00&quot;),&#10;            (&quot;Vanessa's Expenses:&quot;, &quot;$0.00&quot;),&#10;            (&quot;Total Expenses:&quot;, &quot;$0.00&quot;)&#10;        ])&#10;        content_layout.addWidget(self.expense_group, 0, 1)&#10;        &#10;        # Net Summary Card&#10;        self.net_group = self.create_summary_card(&quot; Net Results&quot;, [&#10;            (&quot;Net Income:&quot;, &quot;$0.00&quot;),&#10;            (&quot;Savings Rate:&quot;, &quot;0%&quot;),&#10;            (&quot;Available for Savings:&quot;, &quot;$0.00&quot;)&#10;        ])&#10;        content_layout.addWidget(self.net_group, 1, 0)&#10;        &#10;        # Top Categories Card&#10;        self.categories_group = self.create_summary_card(&quot;️ Top Categories&quot;, [&#10;            (&quot;1.&quot;, &quot;&quot;),&#10;            (&quot;2.&quot;, &quot;&quot;),&#10;            (&quot;3.&quot;, &quot;&quot;),&#10;            (&quot;4.&quot;, &quot;&quot;),&#10;            (&quot;5.&quot;, &quot;&quot;)&#10;        ])&#10;        content_layout.addWidget(self.categories_group, 1, 1)&#10;        &#10;        # Budget Health Card&#10;        self.budget_health_group = self.create_summary_card(&quot;❤️ Budget Health&quot;, [&#10;            (&quot;On Track:&quot;, &quot;0&quot;),&#10;            (&quot;Over Budget:&quot;, &quot;0&quot;),&#10;            (&quot;Under Budget:&quot;, &quot;0&quot;),&#10;            (&quot;Health Score:&quot;, &quot;0%&quot;)&#10;        ])&#10;        content_layout.addWidget(self.budget_health_group, 2, 0)&#10;        &#10;        # Quick Stats Card&#10;        self.stats_group = self.create_summary_card(&quot; Quick Stats&quot;, [&#10;            (&quot;Days in Month:&quot;, &quot;30&quot;),&#10;            (&quot;Daily Average:&quot;, &quot;$0.00&quot;),&#10;            (&quot;Projected Monthly:&quot;, &quot;$0.00&quot;),&#10;            (&quot;Days Remaining:&quot;, &quot;0&quot;)&#10;        ])&#10;        content_layout.addWidget(self.stats_group, 2, 1)&#10;        &#10;        layout.addLayout(content_layout)&#10;        layout.addStretch()&#10;        &#10;        self.setLayout(layout)&#10;        &#10;    def create_summary_card(self, title, items):&#10;        &quot;&quot;&quot;Create a summary card widget&quot;&quot;&quot;&#10;        group = QGroupBox(title)&#10;        group.setStyleSheet(&quot;&quot;&quot;&#10;            QGroupBox {&#10;                font-size: 14px;&#10;                font-weight: bold;&#10;                border: 2px solid #555;&#10;                border-radius: 5px;&#10;                margin-top: 10px;&#10;                padding-top: 10px;&#10;            }&#10;            QGroupBox::title {&#10;                subcontrol-origin: margin;&#10;                left: 10px;&#10;                padding: 0 5px 0 5px;&#10;            }&#10;        &quot;&quot;&quot;)&#10;        &#10;        layout = QGridLayout()&#10;        &#10;        for i, (label_text, value_text) in enumerate(items):&#10;            label = QLabel(label_text)&#10;            label.setStyleSheet(&quot;font-weight: normal;&quot;)&#10;            value = QLabel(value_text)&#10;            value.setStyleSheet(&quot;font-weight: bold; color: #2a82da;&quot;)&#10;            value.setAlignment(Qt.AlignmentFlag.AlignRight)&#10;            &#10;            layout.addWidget(label, i, 0)&#10;            layout.addWidget(value, i, 1)&#10;            &#10;            # Store reference to value labels for updating with consistent key format&#10;            key = f&quot;{title}_{label_text}&quot;&#10;            self.labels[key] = value&#10;            &#10;        group.setLayout(layout)&#10;        return group&#10;        &#10;    def refresh_data(self):&#10;        &quot;&quot;&quot;Refresh the overview data&quot;&quot;&quot;&#10;        try:&#10;            month = self.month_combo.currentIndex() + 1&#10;            year = int(self.year_combo.currentText())&#10;            &#10;            # Get monthly summary from database&#10;            summary = self.db.get_monthly_summary(year, month)&#10;            &#10;            # Update Income Card - use safe label access&#10;            jeff_income = summary['income'].get('Jeff', 0)&#10;            vanessa_income = summary['income'].get('Vanessa', 0)&#10;            total_income = jeff_income + vanessa_income&#10;            &#10;            self._update_label(&quot; Income&quot;, &quot;Jeff's Income:&quot;, f&quot;${jeff_income:,.2f}&quot;)&#10;            self._update_label(&quot; Income&quot;, &quot;Vanessa's Income:&quot;, f&quot;${vanessa_income:,.2f}&quot;)&#10;            self._update_label(&quot; Income&quot;, &quot;Total Income:&quot;, f&quot;${total_income:,.2f}&quot;)&#10;            &#10;            # Update Expense Card&#10;            jeff_expenses = summary['expenses'].get('Jeff', 0)&#10;            vanessa_expenses = summary['expenses'].get('Vanessa', 0)&#10;            total_expenses = jeff_expenses + vanessa_expenses&#10;            &#10;            self._update_label(&quot; Expenses&quot;, &quot;Jeff's Expenses:&quot;, f&quot;${jeff_expenses:,.2f}&quot;)&#10;            self._update_label(&quot; Expenses&quot;, &quot;Vanessa's Expenses:&quot;, f&quot;${vanessa_expenses:,.2f}&quot;)&#10;            self._update_label(&quot; Expenses&quot;, &quot;Total Expenses:&quot;, f&quot;${total_expenses:,.2f}&quot;)&#10;            &#10;            # Update Net Results Card&#10;            net_income = total_income - total_expenses&#10;            savings_rate = (net_income / total_income * 100) if total_income &gt; 0 else 0&#10;            &#10;            self._update_label(&quot; Net Results&quot;, &quot;Net Income:&quot;, f&quot;${net_income:,.2f}&quot;)&#10;            self._update_label(&quot; Net Results&quot;, &quot;Savings Rate:&quot;, f&quot;{savings_rate:.1f}%&quot;)&#10;            self._update_label(&quot; Net Results&quot;, &quot;Available for Savings:&quot;, f&quot;${net_income:,.2f}&quot;)&#10;            &#10;            # Update Top Categories&#10;            top_categories = sorted(summary['by_category'], key=lambda x: x['total'], reverse=True)[:5]&#10;            for i in range(5):&#10;                label_key = f&quot;{i+1}.&quot;&#10;                if i &lt; len(top_categories):&#10;                    cat = top_categories[i]&#10;                    self._update_label(&quot;️ Top Categories&quot;, label_key, f&quot;{cat['category']}: ${cat['total']:,.2f}&quot;)&#10;                else:&#10;                    self._update_label(&quot;️ Top Categories&quot;, label_key, &quot;&quot;)&#10;            &#10;            # Update Quick Stats&#10;            from calendar import monthrange&#10;            days_in_month = monthrange(year, month)[1]&#10;            current_day = datetime.now().day if datetime.now().month == month and datetime.now().year == year else days_in_month&#10;            daily_avg = total_expenses / current_day if current_day &gt; 0 else 0&#10;            projected = daily_avg * days_in_month&#10;            days_remaining = max(0, days_in_month - current_day)&#10;            &#10;            self._update_label(&quot; Quick Stats&quot;, &quot;Days in Month:&quot;, str(days_in_month))&#10;            self._update_label(&quot; Quick Stats&quot;, &quot;Daily Average:&quot;, f&quot;${daily_avg:,.2f}&quot;)&#10;            self._update_label(&quot; Quick Stats&quot;, &quot;Projected Monthly:&quot;, f&quot;${projected:,.2f}&quot;)&#10;            self._update_label(&quot; Quick Stats&quot;, &quot;Days Remaining:&quot;, str(days_remaining))&#10;            &#10;        except Exception as e:&#10;            print(f&quot;Error refreshing overview data: {e}&quot;)&#10;            import traceback&#10;            traceback.print_exc()&#10;    &#10;    def _update_label(self, card_title, label_text, value):&#10;        &quot;&quot;&quot;Safely update a label value&quot;&quot;&quot;&#10;        key = f&quot;{card_title}_{label_text}&quot;&#10;        if key in self.labels:&#10;            self.labels[key].setText(value)&#10;        else:&#10;            print(f&quot;Warning: Label key '{key}' not found&quot;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gui/utils/bulk_import_dialog.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gui/utils/bulk_import_dialog.py" />
              <option name="originalContent" value="&quot;&quot;&quot;&#10;Bulk Import Preview Dialog&#10;Allows users to review and edit expense categories before importing&#10;&quot;&quot;&quot;&#10;&#10;from PyQt6.QtWidgets import (&#10;    QDialog, QVBoxLayout, QHBoxLayout, QLabel, QPushButton,&#10;    QTableWidget, QTableWidgetItem, QComboBox, QHeaderView,&#10;    QDialogButtonBox, QMessageBox, QCheckBox, QGroupBox&#10;from typing import List, Dict&#10;&#10;&#10;        button_layout.addStretch()&#10;            person_combo.setCurrentText(expense['person'])&#10;            self.table.setCellWidget(row, 2, person_combo)&#10;&#10;            # Amount&#10;            amount_item = QTableWidgetItem(f&quot;${expense['amount']:,.2f}&quot;)&#10;            amount_item.setTextAlignment(Qt.AlignmentFlag.AlignRight | Qt.AlignmentFlag.AlignVCenter)&#10;            self.table.setItem(row, 3, amount_item)&#10;        self.categories_data = categories_data&#10;&#10;            # Category&#10;&#10;            # Subcategory&#10;            subcategory_combo = QComboBox()&#10;            if expense['category'] in self.categories_data:&#10;                subcategory_combo.addItems(self.categories_data[expense['category']])&#10;                if expense['subcategory'] in self.categories_data[expense['category']]:&#10;                    subcategory_combo.setCurrentText(expense['subcategory'])&#10;            self.table.setCellWidget(row, 6, subcategory_combo)&#10;&#10;            # Payment Method&#10;            payment_combo = QComboBox()&#10;            payment_combo.addItems([&quot;Cash&quot;, &quot;Credit Card&quot;, &quot;Debit Card&quot;, &quot;Check&quot;, &quot;Transfer&quot;, &quot;Other&quot;])&#10;            payment_combo.setCurrentText(expense.get('payment_method', 'Credit Card'))&#10;            self.table.setCellWidget(row, 7, payment_combo)&#10;&#10;    def on_category_changed(self, row: int, category: str):&#10;        &quot;&quot;&quot;Update subcategory options when category changes&quot;&quot;&quot;&#10;        subcategory_combo = self.table.cellWidget(row, 6)&#10;        if subcategory_combo and category in self.categories_data:&#10;            subcategory_combo.addItems(self.categories_data[category])&#10;&#10;    def select_all(self):&#10;        &quot;&quot;&quot;Select all items for import&quot;&quot;&quot;&#10;        for row in range(self.table.rowCount()):&#10;            checkbox = self.table.cellWidget(row, 0)&#10;            if checkbox:&#10;                checkbox.setChecked(True)&#10;&#10;    def select_none(self):&#10;        &quot;&quot;&quot;Deselect all items&quot;&quot;&quot;&#10;        for row in range(self.table.rowCount()):&#10;            checkbox = self.table.cellWidget(row, 0)&#10;            if checkbox:&#10;                checkbox.setChecked(False)&#10;&#10;    def update_summary(self):&#10;        &quot;&quot;&quot;Update the summary labels&quot;&quot;&quot;&#10;        selected_count = 0&#10;        selected_amount = 0.0&#10;            # Category&#10;&#10;            # Subcategory&#10;            subcategory_combo = QComboBox()&#10;&#10;    def get_selected_expenses(self) -&gt; List[Dict]:&#10;        &quot;&quot;&quot;Get the list of selected and edited expenses&quot;&quot;&quot;&#10;        selected_expenses = []&#10;&#10;        for row in range(self.table.rowCount()):&#10;            checkbox = self.table.cellWidget(row, 0)&#10;            if checkbox and checkbox.isChecked():&#10;                # Get updated values from the UI&#10;                person_combo = self.table.cellWidget(row, 2)&#10;                category_combo = self.table.cellWidget(row, 5)&#10;                subcategory_combo = self.table.cellWidget(row, 6)&#10;                payment_combo = self.table.cellWidget(row, 7)&#10;&#10;                expense = self.expenses[row].copy()&#10;                expense['subcategory'] = subcategory_combo.currentText()&#10;                expense['payment_method'] = payment_combo.currentText()&#10;&#10;        return selected_expenses&#10;" />
              <option name="updatedContent" value="&quot;&quot;&quot;&#10;Bulk Import Preview Dialog&#10;Allows users to review and edit expense categories before importing&#10;&quot;&quot;&quot;&#10;&#10;from PyQt6.QtWidgets import (&#10;    QDialog, QVBoxLayout, QHBoxLayout, QLabel, QPushButton,&#10;    QTableWidget, QTableWidgetItem, QComboBox, QHeaderView,&#10;    QDialogButtonBox, QMessageBox, QCheckBox, QGroupBox,&#10;    QInputDialog, QLineEdit&#10;)&#10;from PyQt6.QtCore import Qt&#10;from PyQt6.QtGui import QFont&#10;from typing import List, Dict&#10;from database.category_manager import get_category_manager&#10;&#10;class CustomComboBox(QComboBox):&#10;    &quot;&quot;&quot;Custom ComboBox that allows adding new items&quot;&quot;&quot;&#10;    &#10;    def __init__(self, parent=None, category_manager=None, is_subcategory=False, category_combo=None):&#10;        super().__init__(parent)&#10;        self.category_manager = category_manager&#10;        self.is_subcategory = is_subcategory&#10;        self.category_combo = category_combo&#10;        self.setEditable(True)&#10;        self.lineEdit().returnPressed.connect(self.add_new_item)&#10;        &#10;    def add_new_item(self):&#10;        &quot;&quot;&quot;Add a new item when user presses Enter&quot;&quot;&quot;&#10;        new_text = self.lineEdit().text().strip()&#10;        if not new_text:&#10;            return&#10;            &#10;        if self.is_subcategory and self.category_combo:&#10;            # Adding new subcategory&#10;            category = self.category_combo.currentText()&#10;            if category and self.category_manager:&#10;                if self.category_manager.add_subcategory(category, new_text):&#10;                    self.addItem(new_text)&#10;                    self.setCurrentText(new_text)&#10;                    QMessageBox.information(self, &quot;Success&quot;, f&quot;Added new subcategory '{new_text}' to '{category}'&quot;)&#10;                else:&#10;                    QMessageBox.warning(self, &quot;Error&quot;, f&quot;Could not add subcategory '{new_text}' (may already exist)&quot;)&#10;        else:&#10;            # Adding new category&#10;            if self.category_manager and self.category_manager.add_category(new_text):&#10;                self.addItem(new_text)&#10;                self.setCurrentText(new_text)&#10;                QMessageBox.information(self, &quot;Success&quot;, f&quot;Added new category '{new_text}'&quot;)&#10;            else:&#10;                QMessageBox.warning(self, &quot;Error&quot;, f&quot;Could not add category '{new_text}' (may already exist)&quot;)&#10;&#10;class BulkImportPreviewDialog(QDialog):&#10;    &quot;&quot;&quot;Dialog for previewing and editing bulk import data&quot;&quot;&quot;&#10;&#10;    def __init__(self, expenses: List[Dict], categories_data: Dict[str, List[str]], parent=None):&#10;        super().__init__(parent)&#10;        self.expenses = expenses&#10;        self.category_manager = get_category_manager()&#10;        # Refresh categories to get latest data&#10;        self.categories_data = self.category_manager.get_categories()&#10;        self.init_ui()&#10;        self.populate_table()&#10;&#10;    def init_ui(self):&#10;        &quot;&quot;&quot;Initialize the UI&quot;&quot;&quot;&#10;        self.setWindowTitle(&quot;Import Preview - Review Categories&quot;)&#10;        self.setModal(True)&#10;        self.resize(1200, 600)&#10;&#10;        layout = QVBoxLayout()&#10;&#10;        # Header&#10;        header_label = QLabel(&quot;Review and Edit Categories Before Import&quot;)&#10;        header_label.setFont(QFont(&quot;Arial&quot;, 14, QFont.Weight.Bold))&#10;        header_label.setAlignment(Qt.AlignmentFlag.AlignCenter)&#10;        layout.addWidget(header_label)&#10;&#10;        # Instructions&#10;        instructions = QLabel(&#10;            &quot;Review the automatically assigned categories below. &quot;&#10;            &quot;Click on category or subcategory cells to change them. &quot;&#10;            &quot;Type new categories/subcategories and press Enter to add them. &quot;&#10;            &quot;Uncheck items you don't want to import.&quot;&#10;        )&#10;        instructions.setWordWrap(True)&#10;        instructions.setStyleSheet(&quot;color: #666; padding: 10px;&quot;)&#10;        layout.addWidget(instructions)&#10;&#10;        # Summary&#10;        summary_group = QGroupBox(&quot;Import Summary&quot;)&#10;        summary_layout = QHBoxLayout()&#10;&#10;        self.total_label = QLabel(f&quot;Total Items: {len(self.expenses)}&quot;)&#10;        self.selected_label = QLabel(f&quot;Selected: {len(self.expenses)}&quot;)&#10;        self.amount_label = QLabel(f&quot;Total Amount: ${sum(exp['amount'] for exp in self.expenses):,.2f}&quot;)&#10;&#10;        summary_layout.addWidget(self.total_label)&#10;        summary_layout.addWidget(self.selected_label)&#10;        summary_layout.addWidget(self.amount_label)&#10;        summary_layout.addStretch()&#10;&#10;        summary_group.setLayout(summary_layout)&#10;        layout.addWidget(summary_group)&#10;&#10;        # Table&#10;        self.table = QTableWidget()&#10;        self.table.setColumnCount(8)&#10;        self.table.setHorizontalHeaderLabels([&#10;            &quot;Import&quot;, &quot;Date&quot;, &quot;Person&quot;, &quot;Amount&quot;, &quot;Description&quot;,&#10;            &quot;Category&quot;, &quot;Subcategory&quot;, &quot;Payment Method&quot;&#10;        ])&#10;&#10;        # Set column widths&#10;        header = self.table.horizontalHeader()&#10;        header.setSectionResizeMode(0, QHeaderView.ResizeMode.Fixed)  # Import checkbox&#10;        header.setSectionResizeMode(1, QHeaderView.ResizeMode.Fixed)  # Date&#10;        header.setSectionResizeMode(2, QHeaderView.ResizeMode.Fixed)  # Person&#10;        header.setSectionResizeMode(3, QHeaderView.ResizeMode.Fixed)  # Amount&#10;        header.setSectionResizeMode(4, QHeaderView.ResizeMode.Stretch)  # Description&#10;        header.setSectionResizeMode(5, QHeaderView.ResizeMode.Interactive)  # Category&#10;        header.setSectionResizeMode(6, QHeaderView.ResizeMode.Interactive)  # Subcategory&#10;        header.setSectionResizeMode(7, QHeaderView.ResizeMode.Fixed)  # Payment Method&#10;&#10;        self.table.setColumnWidth(0, 60)   # Import&#10;        self.table.setColumnWidth(1, 100)  # Date&#10;        self.table.setColumnWidth(2, 80)   # Person&#10;        self.table.setColumnWidth(3, 100)  # Amount&#10;        self.table.setColumnWidth(5, 120)  # Category&#10;        self.table.setColumnWidth(6, 150)  # Subcategory&#10;        self.table.setColumnWidth(7, 120)  # Payment Method&#10;&#10;        layout.addWidget(self.table)&#10;&#10;        # Buttons&#10;        button_layout = QHBoxLayout()&#10;&#10;        select_all_btn = QPushButton(&quot;Select All&quot;)&#10;        select_all_btn.clicked.connect(self.select_all)&#10;        button_layout.addWidget(select_all_btn)&#10;&#10;        select_none_btn = QPushButton(&quot;Select None&quot;)&#10;        select_none_btn.clicked.connect(self.select_none)&#10;        button_layout.addWidget(select_none_btn)&#10;&#10;        # Add refresh categories button&#10;        refresh_btn = QPushButton(&quot;Refresh Categories&quot;)&#10;        refresh_btn.clicked.connect(self.refresh_categories)&#10;        button_layout.addWidget(refresh_btn)&#10;&#10;        button_layout.addStretch()&#10;&#10;        buttons = QDialogButtonBox(&#10;            QDialogButtonBox.StandardButton.Ok | QDialogButtonBox.StandardButton.Cancel&#10;        )&#10;        buttons.accepted.connect(self.accept)&#10;        buttons.rejected.connect(self.reject)&#10;        button_layout.addWidget(buttons)&#10;&#10;        layout.addLayout(button_layout)&#10;        self.setLayout(layout)&#10;&#10;    def populate_table(self):&#10;        &quot;&quot;&quot;Populate the table with expense data&quot;&quot;&quot;&#10;        self.table.setRowCount(len(self.expenses))&#10;&#10;        for row, expense in enumerate(self.expenses):&#10;            # Import checkbox&#10;            checkbox = QCheckBox()&#10;            checkbox.setChecked(True)&#10;            checkbox.stateChanged.connect(self.update_summary)&#10;            self.table.setCellWidget(row, 0, checkbox)&#10;&#10;            # Date&#10;            self.table.setItem(row, 1, QTableWidgetItem(expense['date']))&#10;&#10;            # Person&#10;            person_combo = QComboBox()&#10;            person_combo.addItems([&quot;Jeff&quot;, &quot;Vanessa&quot;])&#10;            person_combo.setCurrentText(expense['person'])&#10;            self.table.setCellWidget(row, 2, person_combo)&#10;&#10;            # Amount&#10;            amount_item = QTableWidgetItem(f&quot;${expense['amount']:,.2f}&quot;)&#10;            amount_item.setTextAlignment(Qt.AlignmentFlag.AlignRight | Qt.AlignmentFlag.AlignVCenter)&#10;            self.table.setItem(row, 3, amount_item)&#10;&#10;            # Description&#10;            self.table.setItem(row, 4, QTableWidgetItem(expense['description']))&#10;&#10;            # Category (with ability to add new ones)&#10;            category_combo = CustomComboBox(self, self.category_manager, False)&#10;            category_combo.addItems(sorted(self.categories_data.keys()))&#10;            category_combo.setCurrentText(expense['category'])&#10;            category_combo.currentTextChanged.connect(lambda cat, r=row: self.on_category_changed(r, cat))&#10;            self.table.setCellWidget(row, 5, category_combo)&#10;&#10;            # Subcategory (with ability to add new ones)&#10;            subcategory_combo = CustomComboBox(self, self.category_manager, True, category_combo)&#10;            if expense['category'] in self.categories_data:&#10;                subcategory_combo.addItems(self.categories_data[expense['category']])&#10;                if expense['subcategory'] in self.categories_data[expense['category']]:&#10;                    subcategory_combo.setCurrentText(expense['subcategory'])&#10;            self.table.setCellWidget(row, 6, subcategory_combo)&#10;&#10;            # Payment Method&#10;            payment_combo = QComboBox()&#10;            payment_combo.addItems([&quot;Cash&quot;, &quot;Credit Card&quot;, &quot;Debit Card&quot;, &quot;Check&quot;, &quot;Transfer&quot;, &quot;Other&quot;])&#10;            payment_combo.setCurrentText(expense.get('payment_method', 'Credit Card'))&#10;            self.table.setCellWidget(row, 7, payment_combo)&#10;&#10;    def on_category_changed(self, row: int, category: str):&#10;        &quot;&quot;&quot;Update subcategory options when category changes&quot;&quot;&quot;&#10;        subcategory_combo = self.table.cellWidget(row, 6)&#10;        category_combo = self.table.cellWidget(row, 5)&#10;        &#10;        if subcategory_combo and category in self.categories_data:&#10;            subcategory_combo.clear()&#10;            subcategory_combo.addItems(self.categories_data[category])&#10;            # Update the category combo reference for the subcategory combo&#10;            subcategory_combo.category_combo = category_combo&#10;&#10;    def select_all(self):&#10;        &quot;&quot;&quot;Select all items for import&quot;&quot;&quot;&#10;        for row in range(self.table.rowCount()):&#10;            checkbox = self.table.cellWidget(row, 0)&#10;            if checkbox:&#10;                checkbox.setChecked(True)&#10;&#10;    def select_none(self):&#10;        &quot;&quot;&quot;Deselect all items&quot;&quot;&quot;&#10;        for row in range(self.table.rowCount()):&#10;            checkbox = self.table.cellWidget(row, 0)&#10;            if checkbox:&#10;                checkbox.setChecked(False)&#10;&#10;    def update_summary(self):&#10;        &quot;&quot;&quot;Update the summary labels&quot;&quot;&quot;&#10;        selected_count = 0&#10;        selected_amount = 0.0&#10;&#10;        for row in range(self.table.rowCount()):&#10;            checkbox = self.table.cellWidget(row, 0)&#10;            if checkbox and checkbox.isChecked():&#10;                selected_count += 1&#10;                selected_amount += self.expenses[row]['amount']&#10;&#10;        self.selected_label.setText(f&quot;Selected: {selected_count}&quot;)&#10;        self.amount_label.setText(f&quot;Total Amount: ${selected_amount:,.2f}&quot;)&#10;&#10;    def get_selected_expenses(self) -&gt; List[Dict]:&#10;        &quot;&quot;&quot;Get the list of selected and edited expenses&quot;&quot;&quot;&#10;        selected_expenses = []&#10;&#10;        for row in range(self.table.rowCount()):&#10;            checkbox = self.table.cellWidget(row, 0)&#10;            if checkbox and checkbox.isChecked():&#10;                # Get updated values from the UI&#10;                person_combo = self.table.cellWidget(row, 2)&#10;                category_combo = self.table.cellWidget(row, 5)&#10;                subcategory_combo = self.table.cellWidget(row, 6)&#10;                payment_combo = self.table.cellWidget(row, 7)&#10;&#10;                expense = self.expenses[row].copy()&#10;                expense['person'] = person_combo.currentText()&#10;                expense['category'] = category_combo.currentText()&#10;                expense['subcategory'] = subcategory_combo.currentText()&#10;                expense['payment_method'] = payment_combo.currentText()&#10;&#10;                selected_expenses.append(expense)&#10;&#10;        return selected_expenses&#10;&#10;    def refresh_categories(self):&#10;        &quot;&quot;&quot;Refresh categories from the category manager&quot;&quot;&quot;&#10;        self.category_manager.refresh()&#10;        self.categories_data = self.category_manager.get_categories()&#10;        &#10;        # Update all category combos&#10;        for row in range(self.table.rowCount()):&#10;            category_combo = self.table.cellWidget(row, 5)&#10;            subcategory_combo = self.table.cellWidget(row, 6)&#10;            &#10;            if category_combo:&#10;                current_category = category_combo.currentText()&#10;                category_combo.clear()&#10;                category_combo.addItems(sorted(self.categories_data.keys()))&#10;                if current_category in self.categories_data:&#10;                    category_combo.setCurrentText(current_category)&#10;            &#10;            if subcategory_combo and current_category in self.categories_data:&#10;                current_subcategory = subcategory_combo.currentText()&#10;                subcategory_combo.clear()&#10;                subcategory_combo.addItems(self.categories_data[current_category])&#10;                if current_subcategory in self.categories_data[current_category]:&#10;                    subcategory_combo.setCurrentText(current_subcategory)&#10;        &#10;        QMessageBox.information(self, &quot;Success&quot;, &quot;Categories refreshed successfully!&quot;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gui/utils/styles.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gui/utils/styles.py" />
              <option name="originalContent" value="&quot;&quot;&quot;&#10;Application styling and themes&#10;&quot;&quot;&quot;&#10;&#10;def get_app_stylesheet():&#10;    &quot;&quot;&quot;Get the main application stylesheet with enterprise/professional theme&quot;&quot;&quot;&#10;    return &quot;&quot;&quot;&#10;    /* Main Application Window - Distinct Border &amp; Blue Light Reduction */&#10;    QMainWindow {&#10;        background-color: #faf8f5;  /* Warm off-white to reduce blue light */&#10;        color: #2d3748;  /* Warmer dark gray instead of pure black */&#10;        font-family: &quot;Segoe UI&quot;, &quot;Roboto&quot;, &quot;Arial&quot;, sans-serif;&#10;        border: 4px solid #2c5530;  /* Thick dark green border for main window */&#10;        border-radius: 12px;&#10;    }&#10;    &#10;    /* Tab Widget Styling - Thicker Frames */&#10;    QTabWidget::pane {&#10;        border: 4px solid #1e3a8a;  /* Increased from 2px to 4px */&#10;        background-color: #fffef8;  /* Warm white background */&#10;        border-radius: 8px;&#10;        margin-top: 2px;&#10;    }&#10;    &#10;    QTabBar::tab {&#10;        background-color: #f0ede8;  /* Warmer tab background */&#10;        color: #4a5568;  /* Warmer text color */&#10;        padding: 12px 24px;  /* Increased padding */&#10;        margin-right: 2px;&#10;        margin-bottom: 2px;&#10;        border-top-left-radius: 8px;&#10;        border-top-right-radius: 8px;&#10;        min-width: 140px;&#10;        font-weight: 600;&#10;        border: 3px solid #d4c5b9;  /* Thicker border */&#10;    }&#10;    &#10;    QTabBar::tab:selected {&#10;        background-color: #fffef8;  /* Warm white */&#10;        border: 4px solid #1e3a8a;  /* Thicker selected border */&#10;        border-bottom: none;&#10;        color: #1e3a8a;&#10;        font-weight: bold;&#10;    }&#10;    &#10;    QTabBar::tab:hover:!selected {&#10;        background-color: #f7f1e8;  /* Warm hover color */&#10;        border-color: #3b82f6;&#10;    }&#10;    &#10;    /* Enhanced Group Box (Section Delimitation) - Much Thicker Frames */&#10;    QGroupBox {&#10;        font-weight: bold;&#10;        font-size: 14px;&#10;        color: #2c5530;  /* Dark green for better contrast */&#10;        border: 5px solid #2c5530;  /* Much thicker border (increased from 2px to 5px) */&#10;        border-radius: 12px;&#10;        margin-top: 1.2ex;&#10;        padding-top: 18px;&#10;        background-color: #fffef8;  /* Warm white background */&#10;        box-shadow: 0 4px 8px rgba(44, 85, 48, 0.15);  /* Enhanced shadow */&#10;    }&#10;    &#10;    QGroupBox::title {&#10;        subcontrol-origin: margin;&#10;        left: 18px;&#10;        padding: 0 12px;&#10;        background-color: #fffef8;&#10;        color: #2c5530;&#10;        font-weight: bold;&#10;        font-size: 15px;&#10;    }&#10;    &#10;    /* Table Styling - Thicker Frames */&#10;    QTableWidget {&#10;        background-color: #fffef8;  /* Warm white */&#10;        alternate-background-color: #f8f6f0;  /* Warm alternating rows */&#10;        selection-background-color: #e6f3ff;  /* Soft blue selection */&#10;        selection-color: #1e3a8a;&#10;        border: 4px solid #2c5530;  /* Thicker green border */&#10;        border-radius: 8px;&#10;        gridline-color: #e8e2d4;  /* Warm gridlines */&#10;        font-size: 13px;&#10;    }&#10;    &#10;    QHeaderView::section {&#10;        background-color: #2c5530;  /* Dark green headers */&#10;        color: #ffffff;&#10;        padding: 14px 10px;  /* Increased padding */&#10;        border: 2px solid #1e3d24;  /* Thicker header borders */&#10;        font-weight: bold;&#10;        font-size: 13px;&#10;    }&#10;    &#10;    QHeaderView::section:first {&#10;        border-top-left-radius: 6px;&#10;    }&#10;    &#10;    QHeaderView::section:last {&#10;        border-top-right-radius: 6px;&#10;    }&#10;    &#10;    /* Professional Button Styling - Thicker Borders */&#10;    QPushButton {&#10;        background-color: #2c5530;  /* Dark green buttons */&#10;        color: #ffffff;&#10;        border: 3px solid #2c5530;  /* Thicker button border */&#10;        padding: 12px 20px;  /* Increased padding */&#10;        border-radius: 8px;&#10;        font-weight: 600;&#10;        font-size: 13px;&#10;        min-width: 100px;&#10;        min-height: 24px;&#10;    }&#10;    &#10;    QPushButton:hover {&#10;        background-color: #38663d;&#10;        border-color: #38663d;&#10;        box-shadow: 0 3px 6px rgba(44, 85, 48, 0.3);&#10;    }&#10;    &#10;    QPushButton:pressed {&#10;        background-color: #1e3d24;&#10;        border-color: #1e3d24;&#10;    }&#10;    &#10;    QPushButton:disabled {&#10;        background-color: #a0a0a0;&#10;        border-color: #a0a0a0;&#10;        color: #ffffff;&#10;    }&#10;    &#10;    /* Form Elements - Thicker Borders */&#10;    QLineEdit, QComboBox, QSpinBox, QDoubleSpinBox, QDateEdit {&#10;        padding: 10px 14px;  /* Increased padding */&#10;        border: 3px solid #d4c5b9;  /* Thicker warm border */&#10;        border-radius: 8px;&#10;        background-color: #fffef8;&#10;        font-size: 13px;&#10;        min-height: 24px;&#10;        color: #2d3748;&#10;    }&#10;    &#10;    QLineEdit:focus, QComboBox:focus, QSpinBox:focus, QDoubleSpinBox:focus, QDateEdit:focus {&#10;        border-color: #2c5530;  /* Green focus border */&#10;        outline: none;&#10;        box-shadow: 0 0 0 3px rgba(44, 85, 48, 0.15);&#10;    }&#10;    &#10;    QComboBox::drop-down {&#10;        border: none;&#10;        width: 24px;&#10;    }&#10;    &#10;    QComboBox::down-arrow {&#10;        border: 2px solid #2c5530;&#10;        width: 10px;&#10;        height: 10px;&#10;        background-color: #2c5530;&#10;    }&#10;    &#10;    /* Enhanced Labels - Warmer Colors */&#10;    QLabel {&#10;        color: #4a5568;  /* Warmer gray text */&#10;        font-size: 13px;&#10;    }&#10;    &#10;    /* Professional Frames/Separators - Much Thicker */&#10;    QFrame[frameShape=&quot;4&quot;] { /* HLine */&#10;        border: none;&#10;        background-color: #2c5530;&#10;        max-height: 4px;  /* Much thicker separator */&#10;        margin: 15px 0;&#10;    }&#10;    &#10;    QFrame[frameShape=&quot;5&quot;] { /* VLine */&#10;        border: none;&#10;        background-color: #2c5530;&#10;        max-width: 4px;  /* Much thicker separator */&#10;        margin: 0 15px;&#10;    }&#10;    &#10;    /* Enhanced Chart Container - Thicker Border */&#10;    .chart-container {&#10;        background-color: #fffef8;&#10;        border: 4px solid #2c5530;  /* Much thicker chart borders */&#10;        border-radius: 12px;&#10;        padding: 20px;&#10;        margin: 8px;&#10;        box-shadow: 0 4px 8px rgba(44, 85, 48, 0.15);&#10;    }&#10;    &#10;    /* Professional Metric Cards - Thicker Borders */&#10;    .metric-card {&#10;        background-color: #fffef8;&#10;        border: 4px solid #2c5530;  /* Much thicker card borders */&#10;        border-radius: 12px;&#10;        padding: 24px;&#10;        margin: 12px;&#10;        box-shadow: 0 6px 12px rgba(44, 85, 48, 0.15);&#10;    }&#10;    &#10;    .metric-value {&#10;        font-size: 28px;&#10;        font-weight: bold;&#10;        color: #2c5530;  /* Green metric values */&#10;        margin-bottom: 8px;&#10;    }&#10;    &#10;    .metric-label {&#10;        font-size: 14px;&#10;        color: #6b7280;&#10;        font-weight: 500;&#10;        margin-top: 8px;&#10;    }&#10;    &#10;    /* Section Headers - Enhanced */&#10;    .section-header {&#10;        background-color: #2c5530;  /* Dark green headers */&#10;        color: #ffffff;&#10;        padding: 15px 18px;  /* Increased padding */&#10;        font-weight: bold;&#10;        font-size: 16px;&#10;        border-radius: 8px 8px 0 0;&#10;        margin-bottom: 0;&#10;        border: 3px solid #2c5530;&#10;    }&#10;    &#10;    /* Content Areas - Thicker Borders */&#10;    .content-section {&#10;        background-color: #fffef8;&#10;        border: 4px solid #2c5530;  /* Much thicker content borders */&#10;        border-radius: 12px;&#10;        padding: 20px;&#10;        margin: 8px;&#10;        box-shadow: 0 4px 8px rgba(44, 85, 48, 0.1);&#10;    }&#10;    &#10;    /* Enhanced Scrollbars - Thicker */&#10;    QScrollBar:vertical {&#10;        background-color: #f8f6f0;&#10;        width: 16px;  /* Thicker scrollbar */&#10;        border-radius: 8px;&#10;        border: 2px solid #d4c5b9;&#10;    }&#10;    &#10;    QScrollBar::handle:vertical {&#10;        background-color: #2c5530;&#10;        border-radius: 6px;&#10;        min-height: 30px;&#10;        border: 1px solid #1e3d24;&#10;    }&#10;    &#10;    QScrollBar::handle:vertical:hover {&#10;        background-color: #38663d;&#10;    }&#10;    &#10;    QScrollBar:horizontal {&#10;        background-color: #f8f6f0;&#10;        height: 16px;  /* Thicker scrollbar */&#10;        border-radius: 8px;&#10;        border: 2px solid #d4c5b9;&#10;    }&#10;    &#10;    QScrollBar::handle:horizontal {&#10;        background-color: #2c5530;&#10;        border-radius: 6px;&#10;        min-width: 30px;&#10;        border: 1px solid #1e3d24;&#10;    }&#10;    &#10;    QScrollBar::handle:horizontal:hover {&#10;        background-color: #38663d;&#10;    }&#10;    &#10;    /* Menu Styling - Updated Colors */&#10;    QMenuBar {&#10;        background-color: #2c5530;  /* Dark green menu bar */&#10;        color: #ffffff;&#10;        border-bottom: 3px solid #1e3d24;  /* Thicker border */&#10;        font-weight: 600;&#10;        padding: 4px;&#10;    }&#10;    &#10;    QMenuBar::item {&#10;        padding: 10px 15px;  /* Increased padding */&#10;        background-color: transparent;&#10;        border-radius: 6px;&#10;    }&#10;    &#10;    QMenuBar::item:selected {&#10;        background-color: #38663d;&#10;        border-radius: 6px;&#10;    }&#10;    &#10;    QMenu {&#10;        background-color: #fffef8;&#10;        border: 3px solid #2c5530;  /* Thicker menu border */&#10;        border-radius: 8px;&#10;        padding: 6px;&#10;    }&#10;    &#10;    QMenu::item {&#10;        padding: 10px 15px;&#10;        border-radius: 6px;&#10;        color: #2d3748;&#10;    }&#10;    &#10;    QMenu::item:selected {&#10;        background-color: #f7f1e8;&#10;        color: #2c5530;&#10;    }&#10;    &quot;&quot;&quot;&#10;&#10;def get_chart_colors():&#10;    &quot;&quot;&quot;Get consistent colors for charts - Eye-friendly warm theme&quot;&quot;&quot;&#10;    return [&#10;        '#2c5530',  # Primary Dark Green&#10;        '#38663d',  # Medium Green&#10;        '#4a7c59',  # Forest Green&#10;        '#5c9275',  # Sage Green&#10;        '#6ea891',  # Teal Green&#10;        '#8bb9a3',  # Light Green&#10;        '#7b6143',  # Warm Brown&#10;        '#9d7f5f',  # Light Brown&#10;        '#b8967b',  # Tan&#10;        '#d4c5b9',  # Warm Beige&#10;        '#8a6b47',  # Golden Brown&#10;        '#a68b5b',  # Olive&#10;    ]&#10;" />
              <option name="updatedContent" value="&quot;&quot;&quot;&#10;Application styling and themes&#10;&quot;&quot;&quot;&#10;&#10;def get_app_stylesheet():&#10;    &quot;&quot;&quot;Get the main application stylesheet with enterprise/professional theme&quot;&quot;&quot;&#10;    return &quot;&quot;&quot;&#10;    /* Main Application Window - Distinct Border &amp; Blue Light Reduction */&#10;    QMainWindow {&#10;        background-color: #faf8f5;  /* Warm off-white to reduce blue light */&#10;        color: #2d3748;  /* Warmer dark gray instead of pure black */&#10;        font-family: &quot;Segoe UI&quot;, &quot;Roboto&quot;, &quot;Arial&quot;, sans-serif;&#10;        border: 4px solid #2c5530;  /* Thick dark green border for main window */&#10;        border-radius: 12px;&#10;    }&#10;    &#10;    /* Tab Widget Styling - Thicker Frames */&#10;    QTabWidget::pane {&#10;        border: 4px solid #1e3a8a;  /* Increased from 2px to 4px */&#10;        background-color: #fffef8;  /* Warm white background */&#10;        border-radius: 8px;&#10;        margin-top: 2px;&#10;    }&#10;    &#10;    QTabBar::tab {&#10;        background-color: #f0ede8;  /* Warmer tab background */&#10;        color: #4a5568;  /* Warmer text color */&#10;        padding: 12px 24px;  /* Increased padding */&#10;        margin-right: 2px;&#10;        margin-bottom: 2px;&#10;        border-top-left-radius: 8px;&#10;        border-top-right-radius: 8px;&#10;        min-width: 140px;&#10;        font-weight: 600;&#10;        border: 3px solid #d4c5b9;  /* Thicker border */&#10;    }&#10;    &#10;    QTabBar::tab:selected {&#10;        background-color: #fffef8;  /* Warm white */&#10;        border: 4px solid #1e3a8a;  /* Thicker selected border */&#10;        border-bottom: none;&#10;        color: #1e3a8a;&#10;        font-weight: bold;&#10;    }&#10;    &#10;    QTabBar::tab:hover:!selected {&#10;        background-color: #f7f1e8;  /* Warm hover color */&#10;        border-color: #3b82f6;&#10;    }&#10;    &#10;    /* Enhanced Group Box (Section Delimitation) - Much Thicker Frames */&#10;    QGroupBox {&#10;        font-weight: bold;&#10;        font-size: 14px;&#10;        color: #2c5530;  /* Dark green for better contrast */&#10;        border: 5px solid #2c5530;  /* Much thicker border (increased from 2px to 5px) */&#10;        border-radius: 12px;&#10;        margin-top: 1.2ex;&#10;        padding-top: 18px;&#10;        background-color: #fffef8;  /* Warm white background */&#10;        box-shadow: 0 4px 8px rgba(44, 85, 48, 0.15);  /* Enhanced shadow */&#10;    }&#10;    &#10;    QGroupBox::title {&#10;        subcontrol-origin: margin;&#10;        left: 18px;&#10;        padding: 0 12px;&#10;        background-color: #fffef8;&#10;        color: #2c5530;&#10;        font-weight: bold;&#10;        font-size: 15px;&#10;    }&#10;    &#10;    /* Table Styling - Thicker Frames and FIXED TEXT VISIBILITY */&#10;    QTableWidget {&#10;        background-color: #fffef8;  /* Warm white */&#10;        alternate-background-color: #f8f6f0;  /* Warm alternating rows */&#10;        selection-background-color: #e6f3ff;  /* Soft blue selection */&#10;        selection-color: #1e3a8a;&#10;        border: 4px solid #2c5530;  /* Thicker green border */&#10;        border-radius: 8px;&#10;        gridline-color: #e8e2d4;  /* Warm gridlines */&#10;        font-size: 13px;&#10;        color: #2d3748;  /* EXPLICIT TEXT COLOR FOR VISIBILITY */&#10;    }&#10;    &#10;    /* Table Items - CRITICAL FOR TEXT VISIBILITY */&#10;    QTableWidget::item {&#10;        color: #2d3748;  /* Dark text for visibility */&#10;        background-color: transparent;&#10;        padding: 8px;&#10;        border: none;&#10;    }&#10;    &#10;    QTableWidget::item:selected {&#10;        background-color: #e6f3ff;  /* Light blue selection */&#10;        color: #1e3a8a;  /* Dark blue text when selected */&#10;    }&#10;    &#10;    QTableWidget::item:hover {&#10;        background-color: #f0f4f8;  /* Light hover effect */&#10;        color: #2d3748;&#10;    }&#10;    &#10;    QHeaderView::section {&#10;        background-color: #2c5530;  /* Dark green headers */&#10;        color: #ffffff;&#10;        padding: 14px 10px;  /* Increased padding */&#10;        border: 2px solid #1e3d24;  /* Thicker header borders */&#10;        font-weight: bold;&#10;        font-size: 13px;&#10;    }&#10;    &#10;    QHeaderView::section:first {&#10;        border-top-left-radius: 6px;&#10;    }&#10;    &#10;    QHeaderView::section:last {&#10;        border-top-right-radius: 6px;&#10;    }&#10;    &#10;    /* Professional Button Styling - Thicker Borders */&#10;    QPushButton {&#10;        background-color: #2c5530;  /* Dark green buttons */&#10;        color: #ffffff;&#10;        border: 3px solid #2c5530;  /* Thicker button border */&#10;        padding: 12px 20px;  /* Increased padding */&#10;        border-radius: 8px;&#10;        font-weight: 600;&#10;        font-size: 13px;&#10;        min-width: 100px;&#10;        min-height: 24px;&#10;    }&#10;    &#10;    QPushButton:hover {&#10;        background-color: #38663d;&#10;        border-color: #38663d;&#10;        box-shadow: 0 3px 6px rgba(44, 85, 48, 0.3);&#10;    }&#10;    &#10;    QPushButton:pressed {&#10;        background-color: #1e3d24;&#10;        border-color: #1e3d24;&#10;    }&#10;    &#10;    QPushButton:disabled {&#10;        background-color: #a0a0a0;&#10;        border-color: #a0a0a0;&#10;        color: #ffffff;&#10;    }&#10;    &#10;    /* Form Elements - Thicker Borders and FIXED TEXT VISIBILITY */&#10;    QLineEdit, QComboBox, QSpinBox, QDoubleSpinBox, QDateEdit {&#10;        padding: 10px 14px;  /* Increased padding */&#10;        border: 3px solid #d4c5b9;  /* Thicker warm border */&#10;        border-radius: 8px;&#10;        background-color: #fffef8;&#10;        font-size: 13px;&#10;        min-height: 24px;&#10;        color: #2d3748;  /* EXPLICIT TEXT COLOR FOR VISIBILITY */&#10;    }&#10;    &#10;    QLineEdit:focus, QComboBox:focus, QSpinBox:focus, QDoubleSpinBox:focus, QDateEdit:focus {&#10;        border-color: #2c5530;  /* Green focus border */&#10;        outline: none;&#10;        box-shadow: 0 0 0 3px rgba(44, 85, 48, 0.15);&#10;    }&#10;    &#10;    /* ComboBox Dropdown Styling */&#10;    QComboBox {&#10;        color: #2d3748;  /* Explicit text color */&#10;    }&#10;    &#10;    QComboBox::drop-down {&#10;        border: none;&#10;        width: 24px;&#10;        background-color: #2c5530;&#10;        border-top-right-radius: 5px;&#10;        border-bottom-right-radius: 5px;&#10;    }&#10;    &#10;    QComboBox::down-arrow {&#10;        image: none;&#10;        border-left: 5px solid transparent;&#10;        border-right: 5px solid transparent;&#10;        border-top: 5px solid #ffffff;&#10;        width: 0;&#10;        height: 0;&#10;    }&#10;    &#10;    QComboBox QAbstractItemView {&#10;        background-color: #fffef8;&#10;        color: #2d3748;  /* Dropdown item text color */&#10;        selection-background-color: #e6f3ff;&#10;        selection-color: #1e3a8a;&#10;        border: 2px solid #2c5530;&#10;        border-radius: 4px;&#10;    }&#10;    &#10;    QComboBox QAbstractItemView::item {&#10;        color: #2d3748;  /* Dropdown item text color */&#10;        padding: 8px;&#10;        min-height: 20px;&#10;    }&#10;    &#10;    QComboBox QAbstractItemView::item:hover {&#10;        background-color: #f0f4f8;&#10;        color: #2d3748;&#10;    }&#10;    &#10;    QComboBox QAbstractItemView::item:selected {&#10;        background-color: #e6f3ff;&#10;        color: #1e3a8a;&#10;    }&#10;    &#10;    /* Enhanced Labels - Warmer Colors */&#10;    QLabel {&#10;        color: #4a5568;  /* Warmer gray text */&#10;        font-size: 13px;&#10;    }&#10;    &#10;    /* Text Edit Fields */&#10;    QTextEdit {&#10;        background-color: #fffef8;&#10;        color: #2d3748;  /* EXPLICIT TEXT COLOR */&#10;        border: 3px solid #d4c5b9;&#10;        border-radius: 8px;&#10;        padding: 10px;&#10;        font-size: 13px;&#10;    }&#10;    &#10;    QTextEdit:focus {&#10;        border-color: #2c5530;&#10;        outline: none;&#10;        box-shadow: 0 0 0 3px rgba(44, 85, 48, 0.15);&#10;    }&#10;    &#10;    /* Checkbox Styling */&#10;    QCheckBox {&#10;        color: #2d3748;  /* Text color for checkbox labels */&#10;        font-size: 13px;&#10;        spacing: 8px;&#10;    }&#10;    &#10;    QCheckBox::indicator {&#10;        width: 18px;&#10;        height: 18px;&#10;        border: 2px solid #d4c5b9;&#10;        border-radius: 3px;&#10;        background-color: #fffef8;&#10;    }&#10;    &#10;    QCheckBox::indicator:hover {&#10;        border-color: #2c5530;&#10;    }&#10;    &#10;    QCheckBox::indicator:checked {&#10;        background-color: #2c5530;&#10;        border-color: #2c5530;&#10;        image: url(data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' viewBox='0 0 12 12'%3E%3Cpath fill='white' d='M10.28 2.28L4.5 8.06 1.72 5.28l.56-.56L4.5 6.94l5.22-5.22z'/%3E%3C/svg%3E);&#10;    }&#10;    &#10;    /* Professional Frames/Separators - Much Thicker */&#10;    QFrame[frameShape=&quot;4&quot;] { /* HLine */&#10;        border: none;&#10;        background-color: #2c5530;&#10;        max-height: 4px;  /* Much thicker separator */&#10;        margin: 15px 0;&#10;    }&#10;    &#10;    QFrame[frameShape=&quot;5&quot;] { /* VLine */&#10;        border: none;&#10;        background-color: #2c5530;&#10;        max-width: 4px;  /* Much thicker separator */&#10;        margin: 0 15px;&#10;    }&#10;    &#10;    /* Enhanced Chart Container - Thicker Border */&#10;    .chart-container {&#10;        background-color: #fffef8;&#10;        border: 4px solid #2c5530;  /* Much thicker chart borders */&#10;        border-radius: 12px;&#10;        padding: 20px;&#10;        margin: 8px;&#10;        box-shadow: 0 4px 8px rgba(44, 85, 48, 0.15);&#10;    }&#10;    &#10;    /* Professional Metric Cards - Thicker Borders */&#10;    .metric-card {&#10;        background-color: #fffef8;&#10;        border: 4px solid #2c5530;  /* Much thicker card borders */&#10;        border-radius: 12px;&#10;        padding: 24px;&#10;        margin: 12px;&#10;        box-shadow: 0 6px 12px rgba(44, 85, 48, 0.15);&#10;    }&#10;    &#10;    .metric-value {&#10;        font-size: 28px;&#10;        font-weight: bold;&#10;        color: #2c5530;  /* Green metric values */&#10;        margin-bottom: 8px;&#10;    }&#10;    &#10;    .metric-label {&#10;        font-size: 14px;&#10;        color: #6b7280;&#10;        font-weight: 500;&#10;        margin-top: 8px;&#10;    }&#10;    &#10;    /* Section Headers - Enhanced */&#10;    .section-header {&#10;        background-color: #2c5530;  /* Dark green headers */&#10;        color: #ffffff;&#10;        padding: 15px 18px;  /* Increased padding */&#10;        font-weight: bold;&#10;        font-size: 16px;&#10;        border-radius: 8px 8px 0 0;&#10;        margin-bottom: 0;&#10;        border: 3px solid #2c5530;&#10;    }&#10;    &#10;    /* Content Areas - Thicker Borders */&#10;    .content-section {&#10;        background-color: #fffef8;&#10;        border: 4px solid #2c5530;  /* Much thicker content borders */&#10;        border-radius: 12px;&#10;        padding: 20px;&#10;        margin: 8px;&#10;        box-shadow: 0 4px 8px rgba(44, 85, 48, 0.1);&#10;    }&#10;    &#10;    /* Enhanced Scrollbars - Thicker */&#10;    QScrollBar:vertical {&#10;        background-color: #f8f6f0;&#10;        width: 16px;  /* Thicker scrollbar */&#10;        border-radius: 8px;&#10;        border: 2px solid #d4c5b9;&#10;    }&#10;    &#10;    QScrollBar::handle:vertical {&#10;        background-color: #2c5530;&#10;        border-radius: 6px;&#10;        min-height: 30px;&#10;        border: 1px solid #1e3d24;&#10;    }&#10;    &#10;    QScrollBar::handle:vertical:hover {&#10;        background-color: #38663d;&#10;    }&#10;    &#10;    QScrollBar:horizontal {&#10;        background-color: #f8f6f0;&#10;        height: 16px;  /* Thicker scrollbar */&#10;        border-radius: 8px;&#10;        border: 2px solid #d4c5b9;&#10;    }&#10;    &#10;    QScrollBar::handle:horizontal {&#10;        background-color: #2c5530;&#10;        border-radius: 6px;&#10;        min-width: 30px;&#10;        border: 1px solid #1e3d24;&#10;    }&#10;    &#10;    QScrollBar::handle:horizontal:hover {&#10;        background-color: #38663d;&#10;    }&#10;    &#10;    QScrollBar::add-line, QScrollBar::sub-line {&#10;        border: none;&#10;        background: none;&#10;    }&#10;    &quot;&quot;&quot;&#10;&#10;def get_chart_colors():&#10;    &quot;&quot;&quot;Get consistent colors for charts - Eye-friendly warm theme&quot;&quot;&quot;&#10;    return [&#10;        '#2c5530',  # Primary Dark Green&#10;        '#38663d',  # Medium Green&#10;        '#4a7c59',  # Forest Green&#10;        '#5c9275',  # Sage Green&#10;        '#6ea891',  # Teal Green&#10;        '#8bb9a3',  # Light Green&#10;        '#7b6143',  # Warm Brown&#10;        '#9d7f5f',  # Light Brown&#10;        '#b8967b',  # Tan&#10;        '#d4c5b9',  # Warm Beige&#10;        '#8a6b47',  # Golden Brown&#10;        '#a68b5b',  # Olive&#10;    ]" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/../budget_tab.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/../budget_tab.py" />
              <option name="updatedContent" value="    def add_expense(self):&#10;        &quot;&quot;&quot;Add expense entry to database&quot;&quot;&quot;&#10;        try:&#10;            person = self.person_combo.currentText()&#10;            amount_text = self.amount_input.text().strip()&#10;            date = self.date_input.date().toString(&quot;yyyy-MM-dd&quot;)&#10;            category = self.category_combo.currentText()&#10;            subcategory = self.subcategory_combo.currentText()&#10;            description = self.description_input.text().strip()&#10;            payment_method = self.payment_combo.currentText()&#10;            realized = self.realized_checkbox.isChecked()  # Get realized status&#10;            &#10;            # Validate inputs&#10;            if not amount_text:&#10;                QMessageBox.warning(self, &quot;Warning&quot;, &quot;Please enter an amount&quot;)&#10;                return&#10;                &#10;            if not category or not subcategory:&#10;                QMessageBox.warning(self, &quot;Warning&quot;, &quot;Please select category and subcategory&quot;)&#10;                return&#10;                &#10;            try:&#10;                amount = float(amount_text.replace(&quot;,&quot;, &quot;&quot;).replace(&quot;$&quot;, &quot;&quot;))&#10;            except ValueError:&#10;                QMessageBox.warning(self, &quot;Warning&quot;, &quot;Please enter a valid number for amount&quot;)&#10;                return&#10;            &#10;            # Add to database using the updated ExpenseModel.add method&#10;            from database.models import ExpenseModel&#10;            ExpenseModel.add(self.db, date, person, amount, category, subcategory, &#10;                           description, payment_method, realized)&#10;            &#10;            # Clear form&#10;            self.amount_input.clear()&#10;            self.description_input.clear()&#10;            self.realized_checkbox.setChecked(False)  # Reset checkbox&#10;            &#10;            # Refresh display&#10;            self.refresh_data()&#10;            &#10;            QMessageBox.information(self, &quot;Success&quot;, &quot;Expense added successfully!&quot;)&#10;            &#10;        except Exception as e:&#10;            QMessageBox.critical(self, &quot;Error&quot;, f&quot;Failed to add expense: {str(e)}&quot;)" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>