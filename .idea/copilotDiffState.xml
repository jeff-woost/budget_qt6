<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/database/db_manager.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/database/db_manager.py" />
              <option name="originalContent" value="&quot;&quot;&quot;&#10;Database management module for the budget application&#10;&quot;&quot;&quot;&#10;&#10;import sqlite3&#10;import os&#10;from datetime import datetime&#10;from typing import List, Dict, Tuple, Optional&#10;import json&#10;&#10;class DatabaseManager:&#10;    def __init__(self, db_path: str = &quot;budget_tracker.db&quot;):&#10;        &quot;&quot;&quot;Initialize database connection&quot;&quot;&quot;&#10;        self.db_path = db_path&#10;        self.conn = None&#10;        self.cursor = None&#10;        &#10;    def connect(self):&#10;        &quot;&quot;&quot;Establish database connection&quot;&quot;&quot;&#10;        self.conn = sqlite3.connect(self.db_path)&#10;        self.conn.row_factory = sqlite3.Row&#10;        self.cursor = self.conn.cursor()&#10;        &#10;    def disconnect(self):&#10;        &quot;&quot;&quot;Close database connection&quot;&quot;&quot;&#10;        if self.conn:&#10;            self.conn.close()&#10;            &#10;    def execute(self, query, params=None):&#10;        &quot;&quot;&quot;Execute a SQL query and return cursor (for compatibility)&quot;&quot;&quot;&#10;        # Always ensure we have a fresh connection&#10;        self.connect()&#10;        &#10;        if params:&#10;            result = self.cursor.execute(query, params)&#10;        else:&#10;            result = self.cursor.execute(query)&#10;            &#10;        return result&#10;        &#10;    def commit(self):&#10;        &quot;&quot;&quot;Commit current transaction&quot;&quot;&quot;&#10;        if self.conn:&#10;            self.conn.commit()&#10;            &#10;    def initialize_database(self):&#10;        &quot;&quot;&quot;Create all necessary tables&quot;&quot;&quot;&#10;        self.connect()&#10;        &#10;        # Categories table&#10;        self.cursor.execute('''&#10;            CREATE TABLE IF NOT EXISTS categories (&#10;                id INTEGER PRIMARY KEY AUTOINCREMENT,&#10;                category TEXT NOT NULL,&#10;                subcategory TEXT NOT NULL,&#10;                UNIQUE(category, subcategory)&#10;            )&#10;        ''')&#10;        &#10;        # Income table&#10;        self.cursor.execute('''&#10;            CREATE TABLE IF NOT EXISTS income (&#10;                id INTEGER PRIMARY KEY AUTOINCREMENT,&#10;                person TEXT NOT NULL,&#10;                amount REAL NOT NULL,&#10;                date DATE NOT NULL,&#10;                description TEXT,&#10;                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP&#10;            )&#10;        ''')&#10;        &#10;        # Expenses table&#10;        self.cursor.execute('''&#10;            CREATE TABLE IF NOT EXISTS expenses (&#10;                id INTEGER PRIMARY KEY AUTOINCREMENT,&#10;                person TEXT NOT NULL,&#10;                amount REAL NOT NULL,&#10;                date DATE NOT NULL,&#10;                category TEXT NOT NULL,&#10;                subcategory TEXT NOT NULL,&#10;                description TEXT,&#10;                payment_method TEXT,&#10;                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP&#10;            )&#10;        ''')&#10;        &#10;        # Net worth assets table&#10;        self.cursor.execute('''&#10;            CREATE TABLE IF NOT EXISTS net_worth_assets (&#10;                id INTEGER PRIMARY KEY AUTOINCREMENT,&#10;                person TEXT NOT NULL,&#10;                asset_type TEXT NOT NULL,&#10;                asset_name TEXT NOT NULL,&#10;                value REAL NOT NULL,&#10;                date DATE NOT NULL,&#10;                notes TEXT,&#10;                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP&#10;            )&#10;        ''')&#10;        &#10;        # Savings goals table&#10;        self.cursor.execute('''&#10;            CREATE TABLE IF NOT EXISTS savings_goals (&#10;                id INTEGER PRIMARY KEY AUTOINCREMENT,&#10;                goal_name TEXT NOT NULL UNIQUE,&#10;                target_amount REAL NOT NULL,&#10;                current_amount REAL DEFAULT 0,&#10;                target_date DATE,&#10;                priority INTEGER DEFAULT 1,&#10;                notes TEXT,&#10;                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP&#10;            )&#10;        ''')&#10;        &#10;        # Savings allocations table&#10;        self.cursor.execute('''&#10;            CREATE TABLE IF NOT EXISTS savings_allocations (&#10;                id INTEGER PRIMARY KEY AUTOINCREMENT,&#10;                goal_id INTEGER NOT NULL,&#10;                amount REAL NOT NULL,&#10;                date DATE NOT NULL,&#10;                notes TEXT,&#10;                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,&#10;                FOREIGN KEY (goal_id) REFERENCES savings_goals (id)&#10;            )&#10;        ''')&#10;        &#10;        # Budget targets table&#10;        self.cursor.execute('''&#10;            CREATE TABLE IF NOT EXISTS budget_targets (&#10;                id INTEGER PRIMARY KEY AUTOINCREMENT,&#10;                category TEXT NOT NULL,&#10;                subcategory TEXT,&#10;                monthly_target REAL NOT NULL,&#10;                year INTEGER NOT NULL,&#10;                month INTEGER NOT NULL,&#10;                UNIQUE(category, subcategory, year, month)&#10;            )&#10;        ''')&#10;        &#10;        self.conn.commit()&#10;        self.load_default_categories()&#10;        self.disconnect()&#10;        &#10;    def load_default_categories(self):&#10;        &quot;&quot;&quot;Load categories from CSV file&quot;&quot;&quot;&#10;        categories = [&#10;            (&quot;Housing&quot;, &quot;Mortgage&quot;),&#10;            (&quot;Housing&quot;, &quot;Special Assessment&quot;),&#10;            (&quot;Housing&quot;, &quot;Additional Principal&quot;),&#10;            (&quot;Housing&quot;, &quot;Lima Apartment Wires&quot;),&#10;            (&quot;Housing&quot;, &quot;Lima Apartment Fees&quot;),&#10;            (&quot;Housing&quot;, &quot;Escrow&quot;),&#10;            (&quot;Housing&quot;, &quot;HOA&quot;),&#10;            (&quot;Housing&quot;, &quot;Reserves&quot;),&#10;            (&quot;Housing&quot;, &quot;Condo Insurance&quot;),&#10;            (&quot;Housing&quot;, &quot;Property Taxes&quot;),&#10;            (&quot;Housing&quot;, &quot;Labor&quot;),&#10;            (&quot;Utilities&quot;, &quot;Optimum&quot;),&#10;            (&quot;Utilities&quot;, &quot;PSEG&quot;),&#10;            (&quot;Utilities&quot;, &quot;Cell Phone&quot;),&#10;            (&quot;Utilities&quot;, &quot;Car Insurance&quot;),&#10;            (&quot;Utilities&quot;, &quot;Gloria&quot;),&#10;            (&quot;Utilities&quot;, &quot;Insurance&quot;),&#10;            (&quot;Utilities&quot;, &quot;Taxi / Transit&quot;),&#10;            (&quot;Utilities&quot;, &quot;Bus Pass&quot;),&#10;            (&quot;Utilities&quot;, &quot;Misc Utility&quot;),&#10;            (&quot;Food&quot;, &quot;Food (Groceries)&quot;),&#10;            (&quot;Food&quot;, &quot;Food (Take Out)&quot;),&#10;            (&quot;Food&quot;, &quot;Food (Dining Out)&quot;),&#10;            (&quot;Food&quot;, &quot;Food (Other)&quot;),&#10;            (&quot;Food&quot;, &quot;Food (Party)&quot;),&#10;            (&quot;Food&quot;, &quot;Food (Guests)&quot;),&#10;            (&quot;Food&quot;, &quot;Food (Work)&quot;),&#10;            (&quot;Food&quot;, &quot;Food (Special Occasion)&quot;),&#10;            (&quot;Healthcare&quot;, &quot;Jeff Doctor&quot;),&#10;            (&quot;Healthcare&quot;, &quot;Prescriptions&quot;),&#10;            (&quot;Healthcare&quot;, &quot;Vitamins&quot;),&#10;            (&quot;Healthcare&quot;, &quot;Other Doctor Visits&quot;),&#10;            (&quot;Healthcare&quot;, &quot;Haircut&quot;),&#10;            (&quot;Healthcare&quot;, &quot;Hygenie&quot;),&#10;            (&quot;Healthcare&quot;, &quot;Family&quot;),&#10;            (&quot;Healthcare&quot;, &quot;Fertility&quot;),&#10;            (&quot;Healthcare&quot;, &quot;Co-Pay&quot;),&#10;            (&quot;Healthcare&quot;, &quot;Baker&quot;),&#10;            (&quot;Healthcare&quot;, &quot;HC Subscriptions&quot;),&#10;            (&quot;Healthcare&quot;, &quot;Joaquin Health Care&quot;),&#10;            (&quot;Healthcare&quot;, &quot;Zoe Health Care&quot;),&#10;            (&quot;Healthcare&quot;, &quot;Misc Health Care&quot;),&#10;            (&quot;Childcare&quot;, &quot;Village Classes&quot;),&#10;            (&quot;Childcare&quot;, &quot;Baby Sitting&quot;),&#10;            (&quot;Childcare&quot;, &quot;Clothing&quot;),&#10;            (&quot;Childcare&quot;, &quot;Diapers&quot;),&#10;            (&quot;Childcare&quot;, &quot;Necessities&quot;),&#10;            (&quot;Childcare&quot;, &quot;Accessories&quot;),&#10;            (&quot;Childcare&quot;, &quot;Toys&quot;),&#10;            (&quot;Childcare&quot;, &quot;Food / Snacks&quot;),&#10;            (&quot;Childcare&quot;, &quot;Haircut&quot;),&#10;            (&quot;Childcare&quot;, &quot;Activities&quot;),&#10;            (&quot;Childcare&quot;, &quot;Uber / Lyft&quot;),&#10;            (&quot;Childcare&quot;, &quot;Misc.&quot;),&#10;            (&quot;Vehicles&quot;, &quot;Vehicle Fixes&quot;),&#10;            (&quot;Vehicles&quot;, &quot;Vehicle Other&quot;),&#10;            (&quot;Vehicles&quot;, &quot;Gas&quot;),&#10;            (&quot;Vehicles&quot;, &quot;DMV&quot;),&#10;            (&quot;Vehicles&quot;, &quot;Parts&quot;),&#10;            (&quot;Vehicles&quot;, &quot;Tires / Wheels&quot;),&#10;            (&quot;Vehicles&quot;, &quot;Insurance&quot;),&#10;            (&quot;Vehicles&quot;, &quot;Oil Changes&quot;),&#10;            (&quot;Vehicles&quot;, &quot;Car Wash&quot;),&#10;            (&quot;Vehicles&quot;, &quot;Parking&quot;),&#10;            (&quot;Vehicles&quot;, &quot;Tolls&quot;),&#10;            (&quot;Home&quot;, &quot;Home Necessities&quot;),&#10;            (&quot;Home&quot;, &quot;Home Décor&quot;),&#10;            (&quot;Home&quot;, &quot;House Cleaning&quot;),&#10;            (&quot;Home&quot;, &quot;Bathroom&quot;),&#10;            (&quot;Home&quot;, &quot;Bedrooms&quot;),&#10;            (&quot;Home&quot;, &quot;Kitchen&quot;),&#10;            (&quot;Home&quot;, &quot;Tools / Hardware&quot;),&#10;            (&quot;Home&quot;, &quot;Storage&quot;),&#10;            (&quot;Home&quot;, &quot;Homeware&quot;),&#10;            (&quot;Home&quot;, &quot;Subscriptions&quot;),&#10;            (&quot;Other&quot;, &quot;Gifts&quot;),&#10;            (&quot;Other&quot;, &quot;Taxes&quot;),&#10;            (&quot;Other&quot;, &quot;Donations&quot;),&#10;            (&quot;Other&quot;, &quot;Gatherings&quot;),&#10;            (&quot;Other&quot;, &quot;Parties&quot;),&#10;            (&quot;Other&quot;, &quot;Clothes&quot;),&#10;            (&quot;Other&quot;, &quot;Shoes&quot;),&#10;            (&quot;Other&quot;, &quot;Pets&quot;),&#10;            (&quot;Other&quot;, &quot;Target AutoPay&quot;),&#10;            (&quot;Other&quot;, &quot;Stupid Tax&quot;),&#10;            (&quot;Other&quot;, &quot;Amazon Prime&quot;),&#10;            (&quot;Other&quot;, &quot;Fees&quot;),&#10;            (&quot;Other&quot;, &quot;Reversal&quot;),&#10;            (&quot;Other&quot;, &quot;Entertainment&quot;),&#10;            (&quot;Other&quot;, &quot;Other&quot;),&#10;            (&quot;Vacation&quot;, &quot;Flights/Travel&quot;),&#10;            (&quot;Vacation&quot;, &quot;Rental Car&quot;),&#10;            (&quot;Vacation&quot;, &quot;Airport&quot;),&#10;            (&quot;Vacation&quot;, &quot;Taxi&quot;),&#10;            (&quot;Vacation&quot;, &quot;Food&quot;),&#10;            (&quot;Vacation&quot;, &quot;Eating Out&quot;),&#10;            (&quot;Vacation&quot;, &quot;Gas&quot;),&#10;            (&quot;Vacation&quot;, &quot;Activities&quot;),&#10;            (&quot;Vacation&quot;, &quot;Bedding&quot;),&#10;            (&quot;Vacation&quot;, &quot;Fees&quot;),&#10;            (&quot;Vacation&quot;, &quot;Physical Goods&quot;),&#10;            (&quot;Vacation&quot;, &quot;Housing&quot;),&#10;            (&quot;Vacation&quot;, &quot;Necessities&quot;)&#10;        ]&#10;        &#10;        for category, subcategory in categories:&#10;            try:&#10;                self.cursor.execute(&#10;                    &quot;INSERT OR IGNORE INTO categories (category, subcategory) VALUES (?, ?)&quot;,&#10;                    (category, subcategory)&#10;                )&#10;            except Exception as e:&#10;                print(f&quot;Error inserting category {category}/{subcategory}: {e}&quot;)&#10;        &#10;        self.conn.commit()&#10;    &#10;    # Income methods&#10;    def add_income(self, person: str, amount: float, date: str, description: str = None):&#10;        &quot;&quot;&quot;Add income entry&quot;&quot;&quot;&#10;        self.connect()&#10;        self.cursor.execute(&#10;            &quot;INSERT INTO income (person, amount, date, description) VALUES (?, ?, ?, ?)&quot;,&#10;            (person, amount, date, description)&#10;        )&#10;        self.conn.commit()&#10;        self.disconnect()&#10;        &#10;    def get_income(self, start_date: str = None, end_date: str = None, person: str = None):&#10;        &quot;&quot;&quot;Get income entries with optional filters&quot;&quot;&quot;&#10;        self.connect()&#10;        query = &quot;SELECT * FROM income WHERE 1=1&quot;&#10;        params = []&#10;        &#10;        if start_date:&#10;            query += &quot; AND date &gt;= ?&quot;&#10;            params.append(start_date)&#10;        if end_date:&#10;            query += &quot; AND date &lt;= ?&quot;&#10;            params.append(end_date)&#10;        if person:&#10;            query += &quot; AND person = ?&quot;&#10;            params.append(person)&#10;            &#10;        query += &quot; ORDER BY date DESC&quot;&#10;        &#10;        self.cursor.execute(query, params)&#10;        results = [dict(row) for row in self.cursor.fetchall()]&#10;        self.disconnect()&#10;        return results&#10;    &#10;    # Expense methods&#10;    def add_expense(self, person: str, amount: float, date: str, category: str, &#10;                   subcategory: str, description: str = None, payment_method: str = None):&#10;        &quot;&quot;&quot;Add expense entry&quot;&quot;&quot;&#10;        self.connect()&#10;        self.cursor.execute(&#10;            &quot;&quot;&quot;INSERT INTO expenses (person, amount, date, category, subcategory, &#10;               description, payment_method) VALUES (?, ?, ?, ?, ?, ?, ?)&quot;&quot;&quot;,&#10;            (person, amount, date, category, subcategory, description, payment_method)&#10;        )&#10;        self.conn.commit()&#10;        self.disconnect()&#10;        &#10;    def get_expenses(self, start_date: str = None, end_date: str = None, &#10;                    person: str = None, category: str = None):&#10;        &quot;&quot;&quot;Get expense entries with optional filters&quot;&quot;&quot;&#10;        self.connect()&#10;        query = &quot;SELECT * FROM expenses WHERE 1=1&quot;&#10;        params = []&#10;        &#10;        if start_date:&#10;            query += &quot; AND date &gt;= ?&quot;&#10;            params.append(start_date)&#10;        if end_date:&#10;            query += &quot; AND date &lt;= ?&quot;&#10;            params.append(end_date)&#10;        if person:&#10;            query += &quot; AND person = ?&quot;&#10;            params.append(person)&#10;        if category:&#10;            query += &quot; AND category = ?&quot;&#10;            params.append(category)&#10;            &#10;        query += &quot; ORDER BY date DESC&quot;&#10;        &#10;        self.cursor.execute(query, params)&#10;        results = [dict(row) for row in self.cursor.fetchall()]&#10;        self.disconnect()&#10;        return results&#10;    &#10;    def bulk_add_expenses(self, expenses: List[Dict]):&#10;        &quot;&quot;&quot;Add multiple expense entries at once&quot;&quot;&quot;&#10;        self.connect()&#10;        for expense in expenses:&#10;            self.cursor.execute(&#10;                &quot;&quot;&quot;INSERT INTO expenses (person, amount, date, category, subcategory, &#10;                   description, payment_method) VALUES (?, ?, ?, ?, ?, ?, ?)&quot;&quot;&quot;,&#10;                (expense['person'], expense['amount'], expense['date'], &#10;                 expense['category'], expense['subcategory'], &#10;                 expense.get('description'), expense.get('payment_method'))&#10;            )&#10;        self.conn.commit()&#10;        self.disconnect()&#10;    &#10;    # Net worth methods&#10;    def add_asset(self, person: str, asset_type: str, asset_name: str, &#10;                 value: float, date: str, notes: str = None):&#10;        &quot;&quot;&quot;Add or update net worth asset&quot;&quot;&quot;&#10;        self.connect()&#10;        self.cursor.execute(&#10;            &quot;&quot;&quot;INSERT INTO net_worth_assets (person, asset_type, asset_name, &#10;               value, date, notes) VALUES (?, ?, ?, ?, ?, ?)&quot;&quot;&quot;,&#10;            (person, asset_type, asset_name, value, date, notes)&#10;        )&#10;        self.conn.commit()&#10;        self.disconnect()&#10;        &#10;    def get_assets(self, date: str = None, person: str = None):&#10;        &quot;&quot;&quot;Get net worth assets&quot;&quot;&quot;&#10;        self.connect()&#10;        &#10;        if date:&#10;            # Get most recent values for each asset up to the specified date&#10;            query = &quot;&quot;&quot;&#10;                SELECT * FROM net_worth_assets &#10;                WHERE id IN (&#10;                    SELECT MAX(id) FROM net_worth_assets &#10;                    WHERE date &lt;= ? &#10;                    GROUP BY person, asset_type, asset_name&#10;                )&#10;            &quot;&quot;&quot;&#10;            params = [date]&#10;        else:&#10;            # Get most recent values for all assets&#10;            query = &quot;&quot;&quot;&#10;                SELECT * FROM net_worth_assets &#10;                WHERE id IN (&#10;                    SELECT MAX(id) FROM net_worth_assets &#10;                    GROUP BY person, asset_type, asset_name&#10;                )&#10;            &quot;&quot;&quot;&#10;            params = []&#10;        &#10;        if person:&#10;            query += &quot; AND person = ?&quot;&#10;            params.append(person)&#10;            &#10;        self.cursor.execute(query, params)&#10;        results = [dict(row) for row in self.cursor.fetchall()]&#10;        self.disconnect()&#10;        return results&#10;    &#10;    # Savings goals methods&#10;    def add_savings_goal(self, goal_name: str, target_amount: float, &#10;                        target_date: str = None, priority: int = 1, notes: str = None):&#10;        &quot;&quot;&quot;Add a new savings goal&quot;&quot;&quot;&#10;        self.connect()&#10;        self.cursor.execute(&#10;            &quot;&quot;&quot;INSERT INTO savings_goals (goal_name, target_amount, target_date, &#10;               priority, notes) VALUES (?, ?, ?, ?, ?)&quot;&quot;&quot;,&#10;            (goal_name, target_amount, target_date, priority, notes)&#10;        )&#10;        self.conn.commit()&#10;        self.disconnect()&#10;        &#10;    def get_savings_goals(self):&#10;        &quot;&quot;&quot;Get all savings goals&quot;&quot;&quot;&#10;        self.connect()&#10;        self.cursor.execute(&#10;            &quot;SELECT * FROM savings_goals ORDER BY priority, goal_name&quot;&#10;        )&#10;        results = [dict(row) for row in self.cursor.fetchall()]&#10;        self.disconnect()&#10;        return results&#10;    &#10;    def allocate_to_goal(self, goal_id: int, amount: float, date: str, notes: str = None):&#10;        &quot;&quot;&quot;Allocate money to a savings goal&quot;&quot;&quot;&#10;        self.connect()&#10;        &#10;        # Add allocation record&#10;        self.cursor.execute(&#10;            &quot;&quot;&quot;INSERT INTO savings_allocations (goal_id, amount, date, notes) &#10;               VALUES (?, ?, ?, ?)&quot;&quot;&quot;,&#10;            (goal_id, amount, date, notes)&#10;        )&#10;        &#10;        # Update current amount in goals table&#10;        self.cursor.execute(&#10;            &quot;UPDATE savings_goals SET current_amount = current_amount + ? WHERE id = ?&quot;,&#10;            (amount, goal_id)&#10;        )&#10;        &#10;        self.conn.commit()&#10;        self.disconnect()&#10;    &#10;    # Budget targets methods&#10;    def set_budget_target(self, category: str, monthly_target: float, &#10;                         year: int, month: int, subcategory: str = None):&#10;        &quot;&quot;&quot;Set or update budget target for a category&quot;&quot;&quot;&#10;        self.connect()&#10;        self.cursor.execute(&#10;            &quot;&quot;&quot;INSERT OR REPLACE INTO budget_targets &#10;               (category, subcategory, monthly_target, year, month) &#10;               VALUES (?, ?, ?, ?, ?)&quot;&quot;&quot;,&#10;            (category, subcategory, monthly_target, year, month)&#10;        )&#10;        self.conn.commit()&#10;        self.disconnect()&#10;        &#10;    def get_budget_targets(self, year: int, month: int):&#10;        &quot;&quot;&quot;Get budget targets for a specific month&quot;&quot;&quot;&#10;        self.connect()&#10;        self.cursor.execute(&#10;            &quot;SELECT * FROM budget_targets WHERE year = ? AND month = ?&quot;,&#10;            (year, month)&#10;        )&#10;        results = [dict(row) for row in self.cursor.fetchall()]&#10;        self.disconnect()&#10;        return results&#10;    &#10;    # Analytics methods&#10;    def get_monthly_summary(self, year: int, month: int):&#10;        &quot;&quot;&quot;Get income and expense summary for a month&quot;&quot;&quot;&#10;        self.connect()&#10;        &#10;        start_date = f&quot;{year:04d}-{month:02d}-01&quot;&#10;        if month == 12:&#10;            end_date = f&quot;{year+1:04d}-01-01&quot;&#10;        else:&#10;            end_date = f&quot;{year:04d}-{month+1:02d}-01&quot;&#10;        &#10;        # Get total income&#10;        self.cursor.execute(&#10;            &quot;&quot;&quot;SELECT person, SUM(amount) as total &#10;               FROM income &#10;               WHERE date &gt;= ? AND date &lt; ? &#10;               GROUP BY person&quot;&quot;&quot;,&#10;            (start_date, end_date)&#10;        )&#10;        income_data = {row['person']: row['total'] for row in self.cursor.fetchall()}&#10;        &#10;        # Get total expenses&#10;        self.cursor.execute(&#10;            &quot;&quot;&quot;SELECT person, SUM(amount) as total &#10;               FROM expenses &#10;               WHERE date &gt;= ? AND date &lt; ? &#10;               GROUP BY person&quot;&quot;&quot;,&#10;            (start_date, end_date)&#10;        )&#10;        expense_data = {row['person']: row['total'] for row in self.cursor.fetchall()}&#10;        &#10;        # Get expenses by category&#10;        self.cursor.execute(&#10;            &quot;&quot;&quot;SELECT category, subcategory, SUM(amount) as total &#10;               FROM expenses &#10;               WHERE date &gt;= ? AND date &lt; ? &#10;               GROUP BY category, subcategory&#10;               ORDER BY category, subcategory&quot;&quot;&quot;,&#10;            (start_date, end_date)&#10;        )&#10;        category_data = [dict(row) for row in self.cursor.fetchall()]&#10;        &#10;        self.disconnect()&#10;        &#10;        return {&#10;            'income': income_data,&#10;            'expenses': expense_data,&#10;            'by_category': category_data&#10;        }&#10;    &#10;    def get_categories(self):&#10;        &quot;&quot;&quot;Get all categories and subcategories&quot;&quot;&quot;&#10;        self.connect()&#10;        self.cursor.execute(&quot;SELECT DISTINCT category, subcategory FROM categories ORDER BY category, subcategory&quot;)&#10;        results = [dict(row) for row in self.cursor.fetchall()]&#10;        self.disconnect()&#10;        return results&#10;    &#10;    def get_trend_data(self, months: int = 12):&#10;        &quot;&quot;&quot;Get trend data for the last N months&quot;&quot;&quot;&#10;        self.connect()&#10;        &#10;        # Get monthly totals for income and expenses&#10;        query = &quot;&quot;&quot;&#10;            SELECT &#10;                strftime('%Y-%m', date) as month,&#10;                'income' as type,&#10;                person,&#10;                SUM(amount) as total&#10;            FROM income&#10;            WHERE date &gt;= date('now', '-{} months')&#10;            GROUP BY month, person&#10;            &#10;            UNION ALL&#10;            &#10;            SELECT &#10;                strftime('%Y-%m', date) as month,&#10;                'expense' as type,&#10;                person,&#10;                SUM(amount) as total&#10;            FROM expenses&#10;            WHERE date &gt;= date('now', '-{} months')&#10;            GROUP BY month, person&#10;            &#10;            ORDER BY month, type, person&#10;        &quot;&quot;&quot;.format(months)&#10;        &#10;        self.cursor.execute(query)&#10;        results = [dict(row) for row in self.cursor.fetchall()]&#10;        self.disconnect()&#10;        return results" />
              <option name="updatedContent" value="&quot;&quot;&quot;&#10;Database management module for the budget application&#10;&quot;&quot;&quot;&#10;&#10;import sqlite3&#10;import os&#10;from datetime import datetime&#10;from typing import List, Dict, Tuple, Optional&#10;import json&#10;&#10;class DatabaseManager:&#10;    def __init__(self, db_path: str = &quot;budget_tracker.db&quot;):&#10;        &quot;&quot;&quot;Initialize database connection&quot;&quot;&quot;&#10;        self.db_path = db_path&#10;        self.conn = None&#10;        self.cursor = None&#10;        &#10;    def connect(self):&#10;        &quot;&quot;&quot;Establish database connection&quot;&quot;&quot;&#10;        self.conn = sqlite3.connect(self.db_path)&#10;        self.conn.row_factory = sqlite3.Row&#10;        self.cursor = self.conn.cursor()&#10;        &#10;    def disconnect(self):&#10;        &quot;&quot;&quot;Close database connection&quot;&quot;&quot;&#10;        if self.conn:&#10;            self.conn.close()&#10;            &#10;    def execute(self, query, params=None):&#10;        &quot;&quot;&quot;Execute a SQL query and return cursor (for compatibility)&quot;&quot;&quot;&#10;        # Always ensure we have a fresh connection&#10;        self.connect()&#10;        &#10;        if params:&#10;            result = self.cursor.execute(query, params)&#10;        else:&#10;            result = self.cursor.execute(query)&#10;            &#10;        return result&#10;        &#10;    def commit(self):&#10;        &quot;&quot;&quot;Commit current transaction&quot;&quot;&quot;&#10;        if self.conn:&#10;            self.conn.commit()&#10;            &#10;    def initialize_database(self):&#10;        &quot;&quot;&quot;Create all necessary tables&quot;&quot;&quot;&#10;        self.connect()&#10;        &#10;        # Categories table&#10;        self.cursor.execute('''&#10;            CREATE TABLE IF NOT EXISTS categories (&#10;                id INTEGER PRIMARY KEY AUTOINCREMENT,&#10;                category TEXT NOT NULL,&#10;                subcategory TEXT NOT NULL,&#10;                UNIQUE(category, subcategory)&#10;            )&#10;        ''')&#10;        &#10;        # Income table&#10;        self.cursor.execute('''&#10;            CREATE TABLE IF NOT EXISTS income (&#10;                id INTEGER PRIMARY KEY AUTOINCREMENT,&#10;                person TEXT NOT NULL,&#10;                amount REAL NOT NULL,&#10;                date DATE NOT NULL,&#10;                description TEXT,&#10;                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP&#10;            )&#10;        ''')&#10;        &#10;        # Expenses table&#10;        self.cursor.execute('''&#10;            CREATE TABLE IF NOT EXISTS expenses (&#10;                id INTEGER PRIMARY KEY AUTOINCREMENT,&#10;                person TEXT NOT NULL,&#10;                amount REAL NOT NULL,&#10;                date DATE NOT NULL,&#10;                category TEXT NOT NULL,&#10;                subcategory TEXT NOT NULL,&#10;                description TEXT,&#10;                payment_method TEXT,&#10;                realized BOOLEAN DEFAULT 0,&#10;                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP&#10;            )&#10;        ''')&#10;        &#10;        # Add realized column to existing expenses table if it doesn't exist&#10;        try:&#10;            self.cursor.execute('ALTER TABLE expenses ADD COLUMN realized BOOLEAN DEFAULT 0')&#10;            self.conn.commit()&#10;        except sqlite3.OperationalError:&#10;            # Column already exists&#10;            pass&#10;        &#10;        # Net worth assets table&#10;        self.cursor.execute('''&#10;            CREATE TABLE IF NOT EXISTS net_worth_assets (&#10;                id INTEGER PRIMARY KEY AUTOINCREMENT,&#10;                person TEXT NOT NULL,&#10;                asset_type TEXT NOT NULL,&#10;                asset_name TEXT NOT NULL,&#10;                value REAL NOT NULL,&#10;                date DATE NOT NULL,&#10;                notes TEXT,&#10;                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP&#10;            )&#10;        ''')&#10;        &#10;        # Savings goals table&#10;        self.cursor.execute('''&#10;            CREATE TABLE IF NOT EXISTS savings_goals (&#10;                id INTEGER PRIMARY KEY AUTOINCREMENT,&#10;                goal_name TEXT NOT NULL UNIQUE,&#10;                target_amount REAL NOT NULL,&#10;                current_amount REAL DEFAULT 0,&#10;                target_date DATE,&#10;                priority INTEGER DEFAULT 1,&#10;                notes TEXT,&#10;                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP&#10;            )&#10;        ''')&#10;        &#10;        # Savings allocations table&#10;        self.cursor.execute('''&#10;            CREATE TABLE IF NOT EXISTS savings_allocations (&#10;                id INTEGER PRIMARY KEY AUTOINCREMENT,&#10;                goal_id INTEGER NOT NULL,&#10;                amount REAL NOT NULL,&#10;                date DATE NOT NULL,&#10;                notes TEXT,&#10;                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,&#10;                FOREIGN KEY (goal_id) REFERENCES savings_goals (id)&#10;            )&#10;        ''')&#10;        &#10;        # Budget targets table&#10;        self.cursor.execute('''&#10;            CREATE TABLE IF NOT EXISTS budget_targets (&#10;                id INTEGER PRIMARY KEY AUTOINCREMENT,&#10;                category TEXT NOT NULL,&#10;                subcategory TEXT,&#10;                monthly_target REAL NOT NULL,&#10;                year INTEGER NOT NULL,&#10;                month INTEGER NOT NULL,&#10;                UNIQUE(category, subcategory, year, month)&#10;            )&#10;        ''')&#10;        &#10;        self.conn.commit()&#10;        self.load_default_categories()&#10;        self.disconnect()&#10;        &#10;    def load_default_categories(self):&#10;        &quot;&quot;&quot;Load categories from CSV file&quot;&quot;&quot;&#10;        categories = [&#10;            (&quot;Housing&quot;, &quot;Mortgage&quot;),&#10;            (&quot;Housing&quot;, &quot;Special Assessment&quot;),&#10;            (&quot;Housing&quot;, &quot;Additional Principal&quot;),&#10;            (&quot;Housing&quot;, &quot;Lima Apartment Wires&quot;),&#10;            (&quot;Housing&quot;, &quot;Lima Apartment Fees&quot;),&#10;            (&quot;Housing&quot;, &quot;Escrow&quot;),&#10;            (&quot;Housing&quot;, &quot;HOA&quot;),&#10;            (&quot;Housing&quot;, &quot;Reserves&quot;),&#10;            (&quot;Housing&quot;, &quot;Condo Insurance&quot;),&#10;            (&quot;Housing&quot;, &quot;Property Taxes&quot;),&#10;            (&quot;Housing&quot;, &quot;Labor&quot;),&#10;            (&quot;Utilities&quot;, &quot;Optimum&quot;),&#10;            (&quot;Utilities&quot;, &quot;PSEG&quot;),&#10;            (&quot;Utilities&quot;, &quot;Cell Phone&quot;),&#10;            (&quot;Utilities&quot;, &quot;Car Insurance&quot;),&#10;            (&quot;Utilities&quot;, &quot;Gloria&quot;),&#10;            (&quot;Utilities&quot;, &quot;Insurance&quot;),&#10;            (&quot;Utilities&quot;, &quot;Taxi / Transit&quot;),&#10;            (&quot;Utilities&quot;, &quot;Bus Pass&quot;),&#10;            (&quot;Utilities&quot;, &quot;Misc Utility&quot;),&#10;            (&quot;Food&quot;, &quot;Food (Groceries)&quot;),&#10;            (&quot;Food&quot;, &quot;Food (Take Out)&quot;),&#10;            (&quot;Food&quot;, &quot;Food (Dining Out)&quot;),&#10;            (&quot;Food&quot;, &quot;Food (Other)&quot;),&#10;            (&quot;Food&quot;, &quot;Food (Party)&quot;),&#10;            (&quot;Food&quot;, &quot;Food (Guests)&quot;),&#10;            (&quot;Food&quot;, &quot;Food (Work)&quot;),&#10;            (&quot;Food&quot;, &quot;Food (Special Occasion)&quot;),&#10;            (&quot;Healthcare&quot;, &quot;Jeff Doctor&quot;),&#10;            (&quot;Healthcare&quot;, &quot;Prescriptions&quot;),&#10;            (&quot;Healthcare&quot;, &quot;Vitamins&quot;),&#10;            (&quot;Healthcare&quot;, &quot;Other Doctor Visits&quot;),&#10;            (&quot;Healthcare&quot;, &quot;Haircut&quot;),&#10;            (&quot;Healthcare&quot;, &quot;Hygenie&quot;),&#10;            (&quot;Healthcare&quot;, &quot;Family&quot;),&#10;            (&quot;Healthcare&quot;, &quot;Fertility&quot;),&#10;            (&quot;Healthcare&quot;, &quot;Co-Pay&quot;),&#10;            (&quot;Healthcare&quot;, &quot;Baker&quot;),&#10;            (&quot;Healthcare&quot;, &quot;HC Subscriptions&quot;),&#10;            (&quot;Healthcare&quot;, &quot;Joaquin Health Care&quot;),&#10;            (&quot;Healthcare&quot;, &quot;Zoe Health Care&quot;),&#10;            (&quot;Healthcare&quot;, &quot;Misc Health Care&quot;),&#10;            (&quot;Childcare&quot;, &quot;Village Classes&quot;),&#10;            (&quot;Childcare&quot;, &quot;Baby Sitting&quot;),&#10;            (&quot;Childcare&quot;, &quot;Clothing&quot;),&#10;            (&quot;Childcare&quot;, &quot;Diapers&quot;),&#10;            (&quot;Childcare&quot;, &quot;Necessities&quot;),&#10;            (&quot;Childcare&quot;, &quot;Accessories&quot;),&#10;            (&quot;Childcare&quot;, &quot;Toys&quot;),&#10;            (&quot;Childcare&quot;, &quot;Food / Snacks&quot;),&#10;            (&quot;Childcare&quot;, &quot;Haircut&quot;),&#10;            (&quot;Childcare&quot;, &quot;Activities&quot;),&#10;            (&quot;Childcare&quot;, &quot;Uber / Lyft&quot;),&#10;            (&quot;Childcare&quot;, &quot;Misc.&quot;),&#10;            (&quot;Vehicles&quot;, &quot;Vehicle Fixes&quot;),&#10;            (&quot;Vehicles&quot;, &quot;Vehicle Other&quot;),&#10;            (&quot;Vehicles&quot;, &quot;Gas&quot;),&#10;            (&quot;Vehicles&quot;, &quot;DMV&quot;),&#10;            (&quot;Vehicles&quot;, &quot;Parts&quot;),&#10;            (&quot;Vehicles&quot;, &quot;Tires / Wheels&quot;),&#10;            (&quot;Vehicles&quot;, &quot;Insurance&quot;),&#10;            (&quot;Vehicles&quot;, &quot;Oil Changes&quot;),&#10;            (&quot;Vehicles&quot;, &quot;Car Wash&quot;),&#10;            (&quot;Vehicles&quot;, &quot;Parking&quot;),&#10;            (&quot;Vehicles&quot;, &quot;Tolls&quot;),&#10;            (&quot;Home&quot;, &quot;Home Necessities&quot;),&#10;            (&quot;Home&quot;, &quot;Home Décor&quot;),&#10;            (&quot;Home&quot;, &quot;House Cleaning&quot;),&#10;            (&quot;Home&quot;, &quot;Bathroom&quot;),&#10;            (&quot;Home&quot;, &quot;Bedrooms&quot;),&#10;            (&quot;Home&quot;, &quot;Kitchen&quot;),&#10;            (&quot;Home&quot;, &quot;Tools / Hardware&quot;),&#10;            (&quot;Home&quot;, &quot;Storage&quot;),&#10;            (&quot;Home&quot;, &quot;Homeware&quot;),&#10;            (&quot;Home&quot;, &quot;Subscriptions&quot;),&#10;            (&quot;Other&quot;, &quot;Gifts&quot;),&#10;            (&quot;Other&quot;, &quot;Taxes&quot;),&#10;            (&quot;Other&quot;, &quot;Donations&quot;),&#10;            (&quot;Other&quot;, &quot;Gatherings&quot;),&#10;            (&quot;Other&quot;, &quot;Parties&quot;),&#10;            (&quot;Other&quot;, &quot;Clothes&quot;),&#10;            (&quot;Other&quot;, &quot;Shoes&quot;),&#10;            (&quot;Other&quot;, &quot;Pets&quot;),&#10;            (&quot;Other&quot;, &quot;Target AutoPay&quot;),&#10;            (&quot;Other&quot;, &quot;Stupid Tax&quot;),&#10;            (&quot;Other&quot;, &quot;Amazon Prime&quot;),&#10;            (&quot;Other&quot;, &quot;Fees&quot;),&#10;            (&quot;Other&quot;, &quot;Reversal&quot;),&#10;            (&quot;Other&quot;, &quot;Entertainment&quot;),&#10;            (&quot;Other&quot;, &quot;Other&quot;),&#10;            (&quot;Vacation&quot;, &quot;Flights/Travel&quot;),&#10;            (&quot;Vacation&quot;, &quot;Rental Car&quot;),&#10;            (&quot;Vacation&quot;, &quot;Airport&quot;),&#10;            (&quot;Vacation&quot;, &quot;Taxi&quot;),&#10;            (&quot;Vacation&quot;, &quot;Food&quot;),&#10;            (&quot;Vacation&quot;, &quot;Eating Out&quot;),&#10;            (&quot;Vacation&quot;, &quot;Gas&quot;),&#10;            (&quot;Vacation&quot;, &quot;Activities&quot;),&#10;            (&quot;Vacation&quot;, &quot;Bedding&quot;),&#10;            (&quot;Vacation&quot;, &quot;Fees&quot;),&#10;            (&quot;Vacation&quot;, &quot;Physical Goods&quot;),&#10;            (&quot;Vacation&quot;, &quot;Housing&quot;),&#10;            (&quot;Vacation&quot;, &quot;Necessities&quot;)&#10;        ]&#10;        &#10;        for category, subcategory in categories:&#10;            try:&#10;                self.cursor.execute(&#10;                    &quot;INSERT OR IGNORE INTO categories (category, subcategory) VALUES (?, ?)&quot;,&#10;                    (category, subcategory)&#10;                )&#10;            except Exception as e:&#10;                print(f&quot;Error inserting category {category}/{subcategory}: {e}&quot;)&#10;        &#10;        self.conn.commit()&#10;    &#10;    # Income methods&#10;    def add_income(self, person: str, amount: float, date: str, description: str = None):&#10;        &quot;&quot;&quot;Add income entry&quot;&quot;&quot;&#10;        self.connect()&#10;        self.cursor.execute(&#10;            &quot;INSERT INTO income (person, amount, date, description) VALUES (?, ?, ?, ?)&quot;,&#10;            (person, amount, date, description)&#10;        )&#10;        self.conn.commit()&#10;        self.disconnect()&#10;        &#10;    def get_income(self, start_date: str = None, end_date: str = None, person: str = None):&#10;        &quot;&quot;&quot;Get income entries with optional filters&quot;&quot;&quot;&#10;        self.connect()&#10;        query = &quot;SELECT * FROM income WHERE 1=1&quot;&#10;        params = []&#10;        &#10;        if start_date:&#10;            query += &quot; AND date &gt;= ?&quot;&#10;            params.append(start_date)&#10;        if end_date:&#10;            query += &quot; AND date &lt;= ?&quot;&#10;            params.append(end_date)&#10;        if person:&#10;            query += &quot; AND person = ?&quot;&#10;            params.append(person)&#10;            &#10;        query += &quot; ORDER BY date DESC&quot;&#10;        &#10;        self.cursor.execute(query, params)&#10;        results = [dict(row) for row in self.cursor.fetchall()]&#10;        self.disconnect()&#10;        return results&#10;    &#10;    # Expense methods&#10;    def add_expense(self, person: str, amount: float, date: str, category: str, &#10;                   subcategory: str, description: str = None, payment_method: str = None):&#10;        &quot;&quot;&quot;Add expense entry&quot;&quot;&quot;&#10;        self.connect()&#10;        self.cursor.execute(&#10;            &quot;&quot;&quot;INSERT INTO expenses (person, amount, date, category, subcategory, &#10;               description, payment_method) VALUES (?, ?, ?, ?, ?, ?, ?)&quot;&quot;&quot;,&#10;            (person, amount, date, category, subcategory, description, payment_method)&#10;        )&#10;        self.conn.commit()&#10;        self.disconnect()&#10;        &#10;    def get_expenses(self, start_date: str = None, end_date: str = None, &#10;                    person: str = None, category: str = None):&#10;        &quot;&quot;&quot;Get expense entries with optional filters&quot;&quot;&quot;&#10;        self.connect()&#10;        query = &quot;SELECT * FROM expenses WHERE 1=1&quot;&#10;        params = []&#10;        &#10;        if start_date:&#10;            query += &quot; AND date &gt;= ?&quot;&#10;            params.append(start_date)&#10;        if end_date:&#10;            query += &quot; AND date &lt;= ?&quot;&#10;            params.append(end_date)&#10;        if person:&#10;            query += &quot; AND person = ?&quot;&#10;            params.append(person)&#10;        if category:&#10;            query += &quot; AND category = ?&quot;&#10;            params.append(category)&#10;            &#10;        query += &quot; ORDER BY date DESC&quot;&#10;        &#10;        self.cursor.execute(query, params)&#10;        results = [dict(row) for row in self.cursor.fetchall()]&#10;        self.disconnect()&#10;        return results&#10;    &#10;    def bulk_add_expenses(self, expenses: List[Dict]):&#10;        &quot;&quot;&quot;Add multiple expense entries at once&quot;&quot;&quot;&#10;        self.connect()&#10;        for expense in expenses:&#10;            self.cursor.execute(&#10;                &quot;&quot;&quot;INSERT INTO expenses (person, amount, date, category, subcategory, &#10;                   description, payment_method) VALUES (?, ?, ?, ?, ?, ?, ?)&quot;&quot;&quot;,&#10;                (expense['person'], expense['amount'], expense['date'], &#10;                 expense['category'], expense['subcategory'], &#10;                 expense.get('description'), expense.get('payment_method'))&#10;            )&#10;        self.conn.commit()&#10;        self.disconnect()&#10;    &#10;    # Net worth methods&#10;    def add_asset(self, person: str, asset_type: str, asset_name: str, &#10;                 value: float, date: str, notes: str = None):&#10;        &quot;&quot;&quot;Add or update net worth asset&quot;&quot;&quot;&#10;        self.connect()&#10;        self.cursor.execute(&#10;            &quot;&quot;&quot;INSERT INTO net_worth_assets (person, asset_type, asset_name, &#10;               value, date, notes) VALUES (?, ?, ?, ?, ?, ?)&quot;&quot;&quot;,&#10;            (person, asset_type, asset_name, value, date, notes)&#10;        )&#10;        self.conn.commit()&#10;        self.disconnect()&#10;        &#10;    def get_assets(self, date: str = None, person: str = None):&#10;        &quot;&quot;&quot;Get net worth assets&quot;&quot;&quot;&#10;        self.connect()&#10;        &#10;        if date:&#10;            # Get most recent values for each asset up to the specified date&#10;            query = &quot;&quot;&quot;&#10;                SELECT * FROM net_worth_assets &#10;                WHERE id IN (&#10;                    SELECT MAX(id) FROM net_worth_assets &#10;                    WHERE date &lt;= ? &#10;                    GROUP BY person, asset_type, asset_name&#10;                )&#10;            &quot;&quot;&quot;&#10;            params = [date]&#10;        else:&#10;            # Get most recent values for all assets&#10;            query = &quot;&quot;&quot;&#10;                SELECT * FROM net_worth_assets &#10;                WHERE id IN (&#10;                    SELECT MAX(id) FROM net_worth_assets &#10;                    GROUP BY person, asset_type, asset_name&#10;                )&#10;            &quot;&quot;&quot;&#10;            params = []&#10;        &#10;        if person:&#10;            query += &quot; AND person = ?&quot;&#10;            params.append(person)&#10;            &#10;        self.cursor.execute(query, params)&#10;        results = [dict(row) for row in self.cursor.fetchall()]&#10;        self.disconnect()&#10;        return results&#10;    &#10;    # Savings goals methods&#10;    def add_savings_goal(self, goal_name: str, target_amount: float, &#10;                        target_date: str = None, priority: int = 1, notes: str = None):&#10;        &quot;&quot;&quot;Add a new savings goal&quot;&quot;&quot;&#10;        self.connect()&#10;        self.cursor.execute(&#10;            &quot;&quot;&quot;INSERT INTO savings_goals (goal_name, target_amount, target_date, &#10;               priority, notes) VALUES (?, ?, ?, ?, ?)&quot;&quot;&quot;,&#10;            (goal_name, target_amount, target_date, priority, notes)&#10;        )&#10;        self.conn.commit()&#10;        self.disconnect()&#10;        &#10;    def get_savings_goals(self):&#10;        &quot;&quot;&quot;Get all savings goals&quot;&quot;&quot;&#10;        self.connect()&#10;        self.cursor.execute(&#10;            &quot;SELECT * FROM savings_goals ORDER BY priority, goal_name&quot;&#10;        )&#10;        results = [dict(row) for row in self.cursor.fetchall()]&#10;        self.disconnect()&#10;        return results&#10;    &#10;    def allocate_to_goal(self, goal_id: int, amount: float, date: str, notes: str = None):&#10;        &quot;&quot;&quot;Allocate money to a savings goal&quot;&quot;&quot;&#10;        self.connect()&#10;        &#10;        # Add allocation record&#10;        self.cursor.execute(&#10;            &quot;&quot;&quot;INSERT INTO savings_allocations (goal_id, amount, date, notes) &#10;               VALUES (?, ?, ?, ?)&quot;&quot;&quot;,&#10;            (goal_id, amount, date, notes)&#10;        )&#10;        &#10;        # Update current amount in goals table&#10;        self.cursor.execute(&#10;            &quot;UPDATE savings_goals SET current_amount = current_amount + ? WHERE id = ?&quot;,&#10;            (amount, goal_id)&#10;        )&#10;        &#10;        self.conn.commit()&#10;        self.disconnect()&#10;    &#10;    # Budget targets methods&#10;    def set_budget_target(self, category: str, monthly_target: float, &#10;                         year: int, month: int, subcategory: str = None):&#10;        &quot;&quot;&quot;Set or update budget target for a category&quot;&quot;&quot;&#10;        self.connect()&#10;        self.cursor.execute(&#10;            &quot;&quot;&quot;INSERT OR REPLACE INTO budget_targets &#10;               (category, subcategory, monthly_target, year, month) &#10;               VALUES (?, ?, ?, ?, ?)&quot;&quot;&quot;,&#10;            (category, subcategory, monthly_target, year, month)&#10;        )&#10;        self.conn.commit()&#10;        self.disconnect()&#10;        &#10;    def get_budget_targets(self, year: int, month: int):&#10;        &quot;&quot;&quot;Get budget targets for a specific month&quot;&quot;&quot;&#10;        self.connect()&#10;        self.cursor.execute(&#10;            &quot;SELECT * FROM budget_targets WHERE year = ? AND month = ?&quot;,&#10;            (year, month)&#10;        )&#10;        results = [dict(row) for row in self.cursor.fetchall()]&#10;        self.disconnect()&#10;        return results&#10;    &#10;    # Analytics methods&#10;    def get_monthly_summary(self, year: int, month: int):&#10;        &quot;&quot;&quot;Get income and expense summary for a month&quot;&quot;&quot;&#10;        self.connect()&#10;        &#10;        start_date = f&quot;{year:04d}-{month:02d}-01&quot;&#10;        if month == 12:&#10;            end_date = f&quot;{year+1:04d}-01-01&quot;&#10;        else:&#10;            end_date = f&quot;{year:04d}-{month+1:02d}-01&quot;&#10;        &#10;        # Get total income&#10;        self.cursor.execute(&#10;            &quot;&quot;&quot;SELECT person, SUM(amount) as total &#10;               FROM income &#10;               WHERE date &gt;= ? AND date &lt; ? &#10;               GROUP BY person&quot;&quot;&quot;,&#10;            (start_date, end_date)&#10;        )&#10;        income_data = {row['person']: row['total'] for row in self.cursor.fetchall()}&#10;        &#10;        # Get total expenses&#10;        self.cursor.execute(&#10;            &quot;&quot;&quot;SELECT person, SUM(amount) as total &#10;               FROM expenses &#10;               WHERE date &gt;= ? AND date &lt; ? &#10;               GROUP BY person&quot;&quot;&quot;,&#10;            (start_date, end_date)&#10;        )&#10;        expense_data = {row['person']: row['total'] for row in self.cursor.fetchall()}&#10;        &#10;        # Get expenses by category&#10;        self.cursor.execute(&#10;            &quot;&quot;&quot;SELECT category, subcategory, SUM(amount) as total &#10;               FROM expenses &#10;               WHERE date &gt;= ? AND date &lt; ? &#10;               GROUP BY category, subcategory&#10;               ORDER BY category, subcategory&quot;&quot;&quot;,&#10;            (start_date, end_date)&#10;        )&#10;        category_data = [dict(row) for row in self.cursor.fetchall()]&#10;        &#10;        self.disconnect()&#10;        &#10;        return {&#10;            'income': income_data,&#10;            'expenses': expense_data,&#10;            'by_category': category_data&#10;        }&#10;    &#10;    def get_categories(self):&#10;        &quot;&quot;&quot;Get all categories and subcategories&quot;&quot;&quot;&#10;        self.connect()&#10;        self.cursor.execute(&quot;SELECT DISTINCT category, subcategory FROM categories ORDER BY category, subcategory&quot;)&#10;        results = [dict(row) for row in self.cursor.fetchall()]&#10;        self.disconnect()&#10;        return results&#10;    &#10;    def get_trend_data(self, months: int = 12):&#10;        &quot;&quot;&quot;Get trend data for the last N months&quot;&quot;&quot;&#10;        self.connect()&#10;        &#10;        # Get monthly totals for income and expenses&#10;        query = &quot;&quot;&quot;&#10;            SELECT &#10;                strftime('%Y-%m', date) as month,&#10;                'income' as type,&#10;                person,&#10;                SUM(amount) as total&#10;            FROM income&#10;            WHERE date &gt;= date('now', '-{} months')&#10;            GROUP BY month, person&#10;            &#10;            UNION ALL&#10;            &#10;            SELECT &#10;                strftime('%Y-%m', date) as month,&#10;                'expense' as type,&#10;                person,&#10;                SUM(amount) as total&#10;            FROM expenses&#10;            WHERE date &gt;= date('now', '-{} months')&#10;            GROUP BY month, person&#10;            &#10;            ORDER BY month, type, person&#10;        &quot;&quot;&quot;.format(months)&#10;        &#10;        self.cursor.execute(query)&#10;        results = [dict(row) for row in self.cursor.fetchall()]&#10;        self.disconnect()&#10;        return results" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/database/models.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/database/models.py" />
              <option name="originalContent" value="&quot;&quot;&quot;&#10;Database models and operations&#10;&quot;&quot;&quot;&#10;&#10;from datetime import datetime, date&#10;&#10;class IncomeModel:&#10;    &quot;&quot;&quot;Model for income operations&quot;&quot;&quot;&#10;    &#10;    @staticmethod&#10;    def add(db, date_str, person, amount, source, notes):&#10;        &quot;&quot;&quot;Add income entry&quot;&quot;&quot;&#10;        db.execute('''&#10;            INSERT INTO income (date, person, amount, source, notes)&#10;            VALUES (?, ?, ?, ?, ?)&#10;        ''', (date_str, person, amount, source, notes))&#10;        db.commit()&#10;        &#10;    @staticmethod&#10;    def get_all(db, limit=50):&#10;        &quot;&quot;&quot;Get all income entries&quot;&quot;&quot;&#10;        return db.execute('''&#10;            SELECT * FROM income&#10;            ORDER BY date DESC&#10;            LIMIT ?&#10;        ''', (limit,)).fetchall()&#10;        &#10;    @staticmethod&#10;    def get_by_month(db, month_start, month_end):&#10;        &quot;&quot;&quot;Get income for a specific month&quot;&quot;&quot;&#10;        return db.execute('''&#10;            SELECT * FROM income&#10;            WHERE date &gt;= ? AND date &lt;= ?&#10;            ORDER BY date DESC&#10;        ''', (month_start, month_end)).fetchall()&#10;        &#10;    @staticmethod&#10;    def get_total_by_month(db, month_start, month_end):&#10;        &quot;&quot;&quot;Get total income for a month&quot;&quot;&quot;&#10;        result = db.execute('''&#10;            SELECT COALESCE(SUM(amount), 0) as total&#10;            FROM income&#10;            WHERE date &gt;= ? AND date &lt;= ?&#10;        ''', (month_start, month_end)).fetchone()&#10;        return result['total'] if result else 0&#10;        &#10;    @staticmethod&#10;    def delete(db, income_id):&#10;        &quot;&quot;&quot;Delete income entry&quot;&quot;&quot;&#10;        db.execute('DELETE FROM income WHERE id = ?', (income_id,))&#10;        db.commit()&#10;&#10;class ExpenseModel:&#10;    &quot;&quot;&quot;Model for expense operations&quot;&quot;&quot;&#10;    &#10;    @staticmethod&#10;    def add(db, date_str, person, amount, category, subcategory, description, payment_method):&#10;        &quot;&quot;&quot;Add expense entry&quot;&quot;&quot;&#10;        db.execute('''&#10;            INSERT INTO expenses (date, person, amount, category, subcategory, description, payment_method)&#10;            VALUES (?, ?, ?, ?, ?, ?, ?)&#10;        ''', (date_str, person, amount, category, subcategory, description, payment_method))&#10;        db.commit()&#10;        &#10;    @staticmethod&#10;    def get_all(db, limit=50):&#10;        &quot;&quot;&quot;Get all expense entries&quot;&quot;&quot;&#10;        return db.execute('''&#10;            SELECT * FROM expenses&#10;            ORDER BY date DESC&#10;            LIMIT ?&#10;        ''', (limit,)).fetchall()&#10;        &#10;    @staticmethod&#10;    def get_by_month(db, month_start, month_end):&#10;        &quot;&quot;&quot;Get expenses for a specific month&quot;&quot;&quot;&#10;        return db.execute('''&#10;            SELECT * FROM expenses&#10;            WHERE date &gt;= ? AND date &lt;= ?&#10;            ORDER BY date DESC&#10;        ''', (month_start, month_end)).fetchall()&#10;        &#10;    @staticmethod&#10;    def get_total_by_month(db, month_start, month_end):&#10;        &quot;&quot;&quot;Get total expenses for a month&quot;&quot;&quot;&#10;        result = db.execute('''&#10;            SELECT COALESCE(SUM(amount), 0) as total&#10;            FROM expenses&#10;            WHERE date &gt;= ? AND date &lt;= ?&#10;        ''', (month_start, month_end)).fetchone()&#10;        return result['total'] if result else 0&#10;        &#10;    @staticmethod&#10;    def get_by_category(db, month_start, month_end):&#10;        &quot;&quot;&quot;Get expenses grouped by category&quot;&quot;&quot;&#10;        return db.execute('''&#10;            SELECT category, subcategory, SUM(amount) as total&#10;            FROM expenses&#10;            WHERE date &gt;= ? AND date &lt;= ?&#10;            GROUP BY category, subcategory&#10;            ORDER BY category, subcategory&#10;        ''', (month_start, month_end)).fetchall()&#10;        &#10;    @staticmethod&#10;    def delete(db, expense_id):&#10;        &quot;&quot;&quot;Delete expense entry&quot;&quot;&quot;&#10;        db.execute('DELETE FROM expenses WHERE id = ?', (expense_id,))&#10;        db.commit()&#10;&#10;class NetWorthModel:&#10;    &quot;&quot;&quot;Model for net worth operations&quot;&quot;&quot;&#10;    &#10;    @staticmethod&#10;    def add_or_update(db, asset_type, asset_name, value, person):&#10;        &quot;&quot;&quot;Add or update asset&quot;&quot;&quot;&#10;        # Check if asset exists&#10;        existing = db.execute('''&#10;            SELECT id FROM net_worth&#10;            WHERE asset_name = ? AND date = date('now')&#10;        ''', (asset_name,)).fetchone()&#10;        &#10;        if existing:&#10;            db.execute('''&#10;                UPDATE net_worth&#10;                SET value = ?, asset_type = ?, person = ?&#10;                WHERE id = ?&#10;            ''', (value, asset_type, person, existing['id']))&#10;        else:&#10;            db.execute('''&#10;                INSERT INTO net_worth (date, asset_type, asset_name, value, person)&#10;                VALUES (date('now'), ?, ?, ?, ?)&#10;            ''', (asset_type, asset_name, value, person))&#10;        db.commit()&#10;        &#10;    @staticmethod&#10;    def get_current(db):&#10;        &quot;&quot;&quot;Get current assets&quot;&quot;&quot;&#10;        return db.execute('''&#10;            SELECT * FROM net_worth&#10;            WHERE date = (SELECT MAX(date) FROM net_worth)&#10;            ORDER BY value DESC&#10;        ''').fetchall()&#10;        &#10;    @staticmethod&#10;    def get_total(db):&#10;        &quot;&quot;&quot;Get total net worth&quot;&quot;&quot;&#10;        result = db.execute('''&#10;            SELECT COALESCE(SUM(value), 0) as total&#10;            FROM net_worth&#10;            WHERE date = (SELECT MAX(date) FROM net_worth)&#10;        ''').fetchone()&#10;        return result['total'] if result else 0&#10;        &#10;    @staticmethod&#10;    def delete(db, asset_name):&#10;        &quot;&quot;&quot;Delete asset&quot;&quot;&quot;&#10;        db.execute('DELETE FROM net_worth WHERE asset_name = ?', (asset_name,))&#10;        db.commit()&#10;&#10;class SavingsGoalModel:&#10;    &quot;&quot;&quot;Model for savings goal operations&quot;&quot;&quot;&#10;    &#10;    @staticmethod&#10;    def add(db, goal_name, target_amount, target_date, priority):&#10;        &quot;&quot;&quot;Add savings goal&quot;&quot;&quot;&#10;        db.execute('''&#10;            INSERT INTO savings_goals (goal_name, target_amount, target_date, priority)&#10;            VALUES (?, ?, ?, ?)&#10;        ''', (goal_name, target_amount, target_date, priority))&#10;        db.commit()&#10;        &#10;    @staticmethod&#10;    def get_all(db):&#10;        &quot;&quot;&quot;Get all savings goals&quot;&quot;&quot;&#10;        return db.execute('''&#10;            SELECT * FROM savings_goals&#10;            ORDER BY priority&#10;        ''').fetchall()&#10;        &#10;    @staticmethod&#10;    def update_amount(db, goal_id, amount):&#10;        &quot;&quot;&quot;Update goal current amount&quot;&quot;&quot;&#10;        db.execute('''&#10;            UPDATE savings_goals&#10;            SET current_amount = current_amount + ?&#10;            WHERE id = ?&#10;        ''', (amount, goal_id))&#10;        db.commit()&#10;        &#10;    @staticmethod&#10;    def delete(db, goal_id):&#10;        &quot;&quot;&quot;Delete savings goal&quot;&quot;&quot;&#10;        db.execute('DELETE FROM savings_goals WHERE id = ?', (goal_id,))&#10;        db.commit()" />
              <option name="updatedContent" value="&quot;&quot;&quot;&#10;Database models and operations&#10;&quot;&quot;&quot;&#10;&#10;from datetime import datetime, date&#10;&#10;class IncomeModel:&#10;    &quot;&quot;&quot;Model for income operations&quot;&quot;&quot;&#10;    &#10;    @staticmethod&#10;    def add(db, date_str, person, amount, source, notes):&#10;        &quot;&quot;&quot;Add income entry&quot;&quot;&quot;&#10;        db.execute('''&#10;            INSERT INTO income (date, person, amount, source, notes)&#10;            VALUES (?, ?, ?, ?, ?)&#10;        ''', (date_str, person, amount, source, notes))&#10;        db.commit()&#10;        &#10;    @staticmethod&#10;    def get_all(db, limit=50):&#10;        &quot;&quot;&quot;Get all income entries&quot;&quot;&quot;&#10;        return db.execute('''&#10;            SELECT * FROM income&#10;            ORDER BY date DESC&#10;            LIMIT ?&#10;        ''', (limit,)).fetchall()&#10;        &#10;    @staticmethod&#10;    def get_by_month(db, month_start, month_end):&#10;        &quot;&quot;&quot;Get income for a specific month&quot;&quot;&quot;&#10;        return db.execute('''&#10;            SELECT * FROM income&#10;            WHERE date &gt;= ? AND date &lt;= ?&#10;            ORDER BY date DESC&#10;        ''', (month_start, month_end)).fetchall()&#10;        &#10;    @staticmethod&#10;    def get_total_by_month(db, month_start, month_end):&#10;        &quot;&quot;&quot;Get total income for a month&quot;&quot;&quot;&#10;        result = db.execute('''&#10;            SELECT COALESCE(SUM(amount), 0) as total&#10;            FROM income&#10;            WHERE date &gt;= ? AND date &lt;= ?&#10;        ''', (month_start, month_end)).fetchone()&#10;        return result['total'] if result else 0&#10;        &#10;    @staticmethod&#10;    def delete(db, income_id):&#10;        &quot;&quot;&quot;Delete income entry&quot;&quot;&quot;&#10;        db.execute('DELETE FROM income WHERE id = ?', (income_id,))&#10;        db.commit()&#10;&#10;class ExpenseModel:&#10;    &quot;&quot;&quot;Model for expense operations&quot;&quot;&quot;&#10;    &#10;    @staticmethod&#10;    def add(db, date_str, person, amount, category, subcategory, description, payment_method, realized=False):&#10;        &quot;&quot;&quot;Add expense entry&quot;&quot;&quot;&#10;        db.execute('''&#10;            INSERT INTO expenses (date, person, amount, category, subcategory, description, payment_method, realized)&#10;            VALUES (?, ?, ?, ?, ?, ?, ?, ?)&#10;        ''', (date_str, person, amount, category, subcategory, description, payment_method, realized))&#10;        db.commit()&#10;        &#10;    @staticmethod&#10;    def get_all(db, limit=50):&#10;        &quot;&quot;&quot;Get all expense entries&quot;&quot;&quot;&#10;        return db.execute('''&#10;            SELECT * FROM expenses&#10;            ORDER BY date DESC&#10;            LIMIT ?&#10;        ''', (limit,)).fetchall()&#10;        &#10;    @staticmethod&#10;    def get_by_month(db, month_start, month_end):&#10;        &quot;&quot;&quot;Get expenses for a specific month&quot;&quot;&quot;&#10;        return db.execute('''&#10;            SELECT * FROM expenses&#10;            WHERE date &gt;= ? AND date &lt;= ?&#10;            ORDER BY date DESC&#10;        ''', (month_start, month_end)).fetchall()&#10;        &#10;    @staticmethod&#10;    def get_total_by_month(db, month_start, month_end):&#10;        &quot;&quot;&quot;Get total expenses for a month&quot;&quot;&quot;&#10;        result = db.execute('''&#10;            SELECT COALESCE(SUM(amount), 0) as total&#10;            FROM expenses&#10;            WHERE date &gt;= ? AND date &lt;= ?&#10;        ''', (month_start, month_end)).fetchone()&#10;        return result['total'] if result else 0&#10;        &#10;    @staticmethod&#10;    def get_by_category(db, month_start, month_end):&#10;        &quot;&quot;&quot;Get expenses grouped by category&quot;&quot;&quot;&#10;        return db.execute('''&#10;            SELECT category, subcategory, SUM(amount) as total&#10;            FROM expenses&#10;            WHERE date &gt;= ? AND date &lt;= ?&#10;            GROUP BY category, subcategory&#10;            ORDER BY category, subcategory&#10;        ''', (month_start, month_end)).fetchall()&#10;    &#10;    @staticmethod&#10;    def get_unrealized_by_person(db, month_start, month_end):&#10;        &quot;&quot;&quot;Get unrealized expenses by person for a specific month&quot;&quot;&quot;&#10;        return db.execute('''&#10;            SELECT person, COALESCE(SUM(amount), 0) as total&#10;            FROM expenses&#10;            WHERE date &gt;= ? AND date &lt;= ? AND realized = 0&#10;            GROUP BY person&#10;        ''', (month_start, month_end)).fetchall()&#10;    &#10;    @staticmethod&#10;    def get_unrealized_expenses(db, month_start, month_end):&#10;        &quot;&quot;&quot;Get all unrealized expenses for a specific month&quot;&quot;&quot;&#10;        return db.execute('''&#10;            SELECT * FROM expenses&#10;            WHERE date &gt;= ? AND date &lt;= ? AND realized = 0&#10;            ORDER BY person, date DESC&#10;        ''', (month_start, month_end)).fetchall()&#10;    &#10;    @staticmethod&#10;    def mark_as_realized(db, expense_id):&#10;        &quot;&quot;&quot;Mark an expense as realized&quot;&quot;&quot;&#10;        db.execute('UPDATE expenses SET realized = 1 WHERE id = ?', (expense_id,))&#10;        db.commit()&#10;    &#10;    @staticmethod&#10;    def mark_as_unrealized(db, expense_id):&#10;        &quot;&quot;&quot;Mark an expense as unrealized&quot;&quot;&quot;&#10;        db.execute('UPDATE expenses SET realized = 0 WHERE id = ?', (expense_id,))&#10;        db.commit()&#10;        &#10;    @staticmethod&#10;    def delete(db, expense_id):&#10;        &quot;&quot;&quot;Delete expense entry&quot;&quot;&quot;&#10;        db.execute('DELETE FROM expenses WHERE id = ?', (expense_id,))&#10;        db.commit()&#10;&#10;class NetWorthModel:&#10;    &quot;&quot;&quot;Model for net worth operations&quot;&quot;&quot;&#10;    &#10;    @staticmethod&#10;    def add_or_update(db, asset_type, asset_name, value, person):&#10;        &quot;&quot;&quot;Add or update asset&quot;&quot;&quot;&#10;        # Check if asset exists&#10;        existing = db.execute('''&#10;            SELECT id FROM net_worth&#10;            WHERE asset_name = ? AND date = date('now')&#10;        ''', (asset_name,)).fetchone()&#10;        &#10;        if existing:&#10;            db.execute('''&#10;                UPDATE net_worth&#10;                SET value = ?, asset_type = ?, person = ?&#10;                WHERE id = ?&#10;            ''', (value, asset_type, person, existing['id']))&#10;        else:&#10;            db.execute('''&#10;                INSERT INTO net_worth (date, asset_type, asset_name, value, person)&#10;                VALUES (date('now'), ?, ?, ?, ?)&#10;            ''', (asset_type, asset_name, value, person))&#10;        db.commit()&#10;        &#10;    @staticmethod&#10;    def get_current(db):&#10;        &quot;&quot;&quot;Get current assets&quot;&quot;&quot;&#10;        return db.execute('''&#10;            SELECT * FROM net_worth&#10;            WHERE date = (SELECT MAX(date) FROM net_worth)&#10;            ORDER BY value DESC&#10;        ''').fetchall()&#10;        &#10;    @staticmethod&#10;    def get_total(db):&#10;        &quot;&quot;&quot;Get total net worth&quot;&quot;&quot;&#10;        result = db.execute('''&#10;            SELECT COALESCE(SUM(value), 0) as total&#10;            FROM net_worth&#10;            WHERE date = (SELECT MAX(date) FROM net_worth)&#10;        ''').fetchone()&#10;        return result['total'] if result else 0&#10;        &#10;    @staticmethod&#10;    def delete(db, asset_name):&#10;        &quot;&quot;&quot;Delete asset&quot;&quot;&quot;&#10;        db.execute('DELETE FROM net_worth WHERE asset_name = ?', (asset_name,))&#10;        db.commit()&#10;&#10;class SavingsGoalModel:&#10;    &quot;&quot;&quot;Model for savings goal operations&quot;&quot;&quot;&#10;    &#10;    @staticmethod&#10;    def add(db, goal_name, target_amount, target_date, priority):&#10;        &quot;&quot;&quot;Add savings goal&quot;&quot;&quot;&#10;        db.execute('''&#10;            INSERT INTO savings_goals (goal_name, target_amount, target_date, priority)&#10;            VALUES (?, ?, ?, ?)&#10;        ''', (goal_name, target_amount, target_date, priority))&#10;        db.commit()&#10;        &#10;    @staticmethod&#10;    def get_all(db):&#10;        &quot;&quot;&quot;Get all savings goals&quot;&quot;&quot;&#10;        return db.execute('''&#10;            SELECT * FROM savings_goals&#10;            ORDER BY priority&#10;        ''').fetchall()&#10;        &#10;    @staticmethod&#10;    def update_amount(db, goal_id, amount):&#10;        &quot;&quot;&quot;Update goal current amount&quot;&quot;&quot;&#10;        db.execute('''&#10;            UPDATE savings_goals&#10;            SET current_amount = current_amount + ?&#10;            WHERE id = ?&#10;        ''', (amount, goal_id))&#10;        db.commit()&#10;        &#10;    @staticmethod&#10;    def delete(db, goal_id):&#10;        &quot;&quot;&quot;Delete savings goal&quot;&quot;&quot;&#10;        db.execute('DELETE FROM savings_goals WHERE id = ?', (goal_id,))&#10;        db.commit()" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gui/tabs/budget_tab.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gui/tabs/budget_tab.py" />
              <option name="originalContent" value="&quot;&quot;&quot;&#10;Budget Tab - Manages income and expenses with two sub-tabs&#10;&quot;&quot;&quot;&#10;&#10;from PyQt6.QtWidgets import (&#10;    QWidget, QVBoxLayout, QHBoxLayout, QLabel, QPushButton,&#10;    QTableWidget, QTableWidgetItem, QGroupBox, QGridLayout,&#10;    QComboBox, QLineEdit, QDateEdit, QTabWidget,&#10;    QHeaderView, QMessageBox, QFileDialog, QDialog,&#10;    QDialogButtonBox&#10;)&#10;from PyQt6.QtCore import Qt, QDate&#10;from PyQt6.QtGui import QFont&#10;from datetime import datetime&#10;import csv&#10;import os&#10;from database.db_manager import DatabaseManager&#10;from gui.utils.expense_loader import ExpenseLoader&#10;&#10;class BudgetTab(QWidget):&#10;    def __init__(self):&#10;        super().__init__()&#10;        self.db = DatabaseManager()&#10;        self.init_ui()&#10;        &#10;    def init_ui(self):&#10;        &quot;&quot;&quot;Initialize the UI with Income and Expenses sub-tabs&quot;&quot;&quot;&#10;        layout = QVBoxLayout()&#10;        &#10;        # Header&#10;        header_layout = QHBoxLayout()&#10;        title = QLabel(&quot;Budget Management&quot;)&#10;        title.setFont(QFont(&quot;Arial&quot;, 18, QFont.Weight.Bold))&#10;        header_layout.addWidget(title)&#10;        header_layout.addStretch()&#10;        &#10;        layout.addLayout(header_layout)&#10;        &#10;        # Create sub-tabs for Income and Expenses&#10;        self.sub_tabs = QTabWidget()&#10;        &#10;        # Income Tab&#10;        self.income_tab = IncomeSubTab()&#10;        self.sub_tabs.addTab(self.income_tab, &quot; Income&quot;)&#10;        &#10;        # Expenses Tab&#10;        self.expenses_tab = ExpensesSubTab()&#10;        self.sub_tabs.addTab(self.expenses_tab, &quot; Expenses&quot;)&#10;        &#10;        layout.addWidget(self.sub_tabs)&#10;        self.setLayout(layout)&#10;        &#10;    def refresh_data(self):&#10;        &quot;&quot;&quot;Refresh data in both sub-tabs&quot;&quot;&quot;&#10;        self.income_tab.refresh_data()&#10;        self.expenses_tab.refresh_data()&#10;&#10;&#10;class IncomeSubTab(QWidget):&#10;    &quot;&quot;&quot;Sub-tab for managing income entries&quot;&quot;&quot;&#10;    &#10;    def __init__(self):&#10;        super().__init__()&#10;        self.db = DatabaseManager()&#10;        self.init_ui()&#10;        self.refresh_data()&#10;        &#10;    def init_ui(self):&#10;        &quot;&quot;&quot;Initialize the Income UI&quot;&quot;&quot;&#10;        layout = QVBoxLayout()&#10;        &#10;        # Top section - Add Income Form&#10;        form_group = QGroupBox(&quot;Add Income&quot;)&#10;        form_layout = QGridLayout()&#10;        &#10;        # Person selector&#10;        form_layout.addWidget(QLabel(&quot;Person:&quot;), 0, 0)&#10;        self.person_combo = QComboBox()&#10;        self.person_combo.addItems([&quot;Jeff&quot;, &quot;Vanessa&quot;])&#10;        form_layout.addWidget(self.person_combo, 0, 1)&#10;        &#10;        # Amount&#10;        form_layout.addWidget(QLabel(&quot;Amount:&quot;), 0, 2)&#10;        self.amount_input = QLineEdit()&#10;        self.amount_input.setPlaceholderText(&quot;Enter income amount&quot;)&#10;        form_layout.addWidget(self.amount_input, 0, 3)&#10;        &#10;        # Date&#10;        form_layout.addWidget(QLabel(&quot;Date:&quot;), 1, 0)&#10;        self.date_input = QDateEdit()&#10;        self.date_input.setDate(QDate.currentDate())&#10;        self.date_input.setCalendarPopup(True)&#10;        form_layout.addWidget(self.date_input, 1, 1)&#10;        &#10;        # Description&#10;        form_layout.addWidget(QLabel(&quot;Description:&quot;), 1, 2)&#10;        self.description_input = QLineEdit()&#10;        self.description_input.setPlaceholderText(&quot;e.g., Monthly Salary, Bonus, etc.&quot;)&#10;        form_layout.addWidget(self.description_input, 1, 3)&#10;        &#10;        # Add button&#10;        add_btn = QPushButton(&quot;Add Income&quot;)&#10;        add_btn.setStyleSheet(&quot;&quot;&quot;&#10;            QPushButton {&#10;                background-color: #2a82da;&#10;                color: white;&#10;                padding: 8px;&#10;                font-weight: bold;&#10;                border-radius: 4px;&#10;            }&#10;            QPushButton:hover {&#10;                background-color: #1e5fa8;&#10;            }&#10;        &quot;&quot;&quot;)&#10;        add_btn.clicked.connect(self.add_income)&#10;        form_layout.addWidget(add_btn, 2, 0, 1, 4)&#10;        &#10;        form_group.setLayout(form_layout)&#10;        layout.addWidget(form_group)&#10;        &#10;        # Monthly Summary Section&#10;        summary_layout = QHBoxLayout()&#10;        &#10;        # Jeff's Income Summary&#10;        self.jeff_summary = self.create_summary_card(&quot;Jeff's Monthly Income&quot;, &quot;$0.00&quot;)&#10;        summary_layout.addWidget(self.jeff_summary)&#10;        &#10;        # Vanessa's Income Summary&#10;        self.vanessa_summary = self.create_summary_card(&quot;Vanessa's Monthly Income&quot;, &quot;$0.00&quot;)&#10;        summary_layout.addWidget(self.vanessa_summary)&#10;        &#10;        # Total Income Summary&#10;        self.total_summary = self.create_summary_card(&quot;Total Monthly Income&quot;, &quot;$0.00&quot;)&#10;        summary_layout.addWidget(self.total_summary)&#10;        &#10;        layout.addLayout(summary_layout)&#10;        &#10;        # Income History Table&#10;        history_group = QGroupBox(&quot;Income History&quot;)&#10;        history_layout = QVBoxLayout()&#10;        &#10;        # Filter controls&#10;        filter_layout = QHBoxLayout()&#10;        &#10;        filter_layout.addWidget(QLabel(&quot;Filter by:&quot;))&#10;        &#10;        self.filter_person = QComboBox()&#10;        self.filter_person.addItems([&quot;All&quot;, &quot;Jeff&quot;, &quot;Vanessa&quot;])&#10;        self.filter_person.currentTextChanged.connect(self.refresh_data)&#10;        filter_layout.addWidget(self.filter_person)&#10;        &#10;        filter_layout.addWidget(QLabel(&quot;Month:&quot;))&#10;        self.filter_month = QComboBox()&#10;        self.filter_month.addItems([&#10;            &quot;All&quot;, &quot;January&quot;, &quot;February&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;, &quot;June&quot;,&#10;            &quot;July&quot;, &quot;August&quot;, &quot;September&quot;, &quot;October&quot;, &quot;November&quot;, &quot;December&quot;&#10;        ])&#10;        self.filter_month.setCurrentIndex(datetime.now().month)&#10;        self.filter_month.currentIndexChanged.connect(self.refresh_data)&#10;        filter_layout.addWidget(self.filter_month)&#10;        &#10;        filter_layout.addWidget(QLabel(&quot;Year:&quot;))&#10;        self.filter_year = QComboBox()&#10;        current_year = datetime.now().year&#10;        self.filter_year.addItems([&quot;All&quot;] + [str(year) for year in range(current_year - 2, current_year + 2)])&#10;        self.filter_year.setCurrentText(str(current_year))&#10;        self.filter_year.currentTextChanged.connect(self.refresh_data)&#10;        filter_layout.addWidget(self.filter_year)&#10;        &#10;        filter_layout.addStretch()&#10;        &#10;        # Delete button&#10;        delete_btn = QPushButton(&quot;Delete Selected&quot;)&#10;        delete_btn.clicked.connect(self.delete_selected_income)&#10;        filter_layout.addWidget(delete_btn)&#10;        &#10;        history_layout.addLayout(filter_layout)&#10;        &#10;        # Income table&#10;        self.income_table = QTableWidget()&#10;        self.income_table.setColumnCount(5)&#10;        self.income_table.setHorizontalHeaderLabels([&#10;            &quot;Date&quot;, &quot;Person&quot;, &quot;Amount&quot;, &quot;Description&quot;, &quot;ID&quot;&#10;        ])&#10;        self.income_table.hideColumn(4)  # Hide ID column&#10;        &#10;        # Set column widths&#10;        header = self.income_table.horizontalHeader()&#10;        header.setSectionResizeMode(0, QHeaderView.ResizeMode.ResizeToContents)&#10;        header.setSectionResizeMode(1, QHeaderView.ResizeMode.ResizeToContents)&#10;        header.setSectionResizeMode(2, QHeaderView.ResizeMode.ResizeToContents)&#10;        header.setSectionResizeMode(3, QHeaderView.ResizeMode.Stretch)&#10;        &#10;        history_layout.addWidget(self.income_table)&#10;        history_group.setLayout(history_layout)&#10;        &#10;        layout.addWidget(history_group)&#10;        self.setLayout(layout)&#10;        &#10;    def create_summary_card(self, title, value):&#10;        &quot;&quot;&quot;Create a summary card widget&quot;&quot;&quot;&#10;        group = QGroupBox(title)&#10;        group.setStyleSheet(&quot;&quot;&quot;&#10;            QGroupBox {&#10;                font-weight: bold;&#10;                border: 2px solid #555;&#10;                border-radius: 5px;&#10;                margin-top: 10px;&#10;                padding-top: 10px;&#10;            }&#10;        &quot;&quot;&quot;)&#10;        &#10;        layout = QVBoxLayout()&#10;        value_label = QLabel(value)&#10;        value_label.setAlignment(Qt.AlignmentFlag.AlignCenter)&#10;        value_label.setFont(QFont(&quot;Arial&quot;, 16, QFont.Weight.Bold))&#10;        value_label.setStyleSheet(&quot;color: #2a82da;&quot;)&#10;        layout.addWidget(value_label)&#10;        &#10;        group.setLayout(layout)&#10;        group.value_label = value_label  # Store reference for updating&#10;        return group&#10;        &#10;    def add_income(self):&#10;        &quot;&quot;&quot;Add income entry to database&quot;&quot;&quot;&#10;        try:&#10;            person = self.person_combo.currentText()&#10;            amount_text = self.amount_input.text().strip()&#10;            date = self.date_input.date().toString(&quot;yyyy-MM-dd&quot;)&#10;            description = self.description_input.text().strip()&#10;            &#10;            # Validate amount&#10;            if not amount_text:&#10;                QMessageBox.warning(self, &quot;Warning&quot;, &quot;Please enter an amount&quot;)&#10;                return&#10;                &#10;            try:&#10;                amount = float(amount_text.replace(&quot;,&quot;, &quot;&quot;).replace(&quot;$&quot;, &quot;&quot;))&#10;            except ValueError:&#10;                QMessageBox.warning(self, &quot;Warning&quot;, &quot;Please enter a valid number for amount&quot;)&#10;                return&#10;            &#10;            # Add to database&#10;            self.db.add_income(person, amount, date, description)&#10;            &#10;            # Clear form&#10;            self.amount_input.clear()&#10;            self.description_input.clear()&#10;            &#10;            # Refresh display&#10;            self.refresh_data()&#10;            &#10;            QMessageBox.information(self, &quot;Success&quot;, &quot;Income added successfully!&quot;)&#10;            &#10;        except Exception as e:&#10;            QMessageBox.critical(self, &quot;Error&quot;, f&quot;Failed to add income: {str(e)}&quot;)&#10;            &#10;    def delete_selected_income(self):&#10;        &quot;&quot;&quot;Delete selected income entries&quot;&quot;&quot;&#10;        selected_rows = []&#10;        for row in range(self.income_table.rowCount()):&#10;            if self.income_table.item(row, 0) and self.income_table.item(row, 0).isSelected():&#10;                selected_rows.append(row)&#10;            elif any(self.income_table.item(row, col) and self.income_table.item(row, col).isSelected()&#10;                    for col in range(self.income_table.columnCount())):&#10;                selected_rows.append(row)&#10;&#10;        if not selected_rows:&#10;            QMessageBox.warning(self, &quot;Warning&quot;, &quot;Please select one or more income entries to delete.&quot;)&#10;            return&#10;&#10;        # Confirm deletion&#10;        reply = QMessageBox.question(&#10;            self,&#10;            &quot;Confirm Deletion&quot;,&#10;            f&quot;Are you sure you want to delete {len(selected_rows)} income entr{'y' if len(selected_rows) == 1 else 'ies'}?\n\nThis action cannot be undone.&quot;,&#10;            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,&#10;            QMessageBox.StandardButton.No&#10;        )&#10;&#10;        if reply != QMessageBox.StandardButton.Yes:&#10;            return&#10;&#10;        try:&#10;            # Delete each selected income entry&#10;            deleted_count = 0&#10;            for row in reversed(selected_rows):  # Reverse to maintain row indices&#10;                income_id_item = self.income_table.item(row, 4)  # ID is in column 4&#10;                if income_id_item:&#10;                    income_id = int(income_id_item.text())&#10;&#10;                    # Delete from database using the model's delete method&#10;                    from database.models import IncomeModel&#10;                    IncomeModel.delete(self.db, income_id)&#10;                    deleted_count += 1&#10;&#10;            # Refresh the table&#10;            self.refresh_data()&#10;&#10;            QMessageBox.information(&#10;                self,&#10;                &quot;Success&quot;,&#10;                f&quot;Successfully deleted {deleted_count} income entr{'y' if deleted_count == 1 else 'ies'}.&quot;&#10;            )&#10;&#10;        except Exception as e:&#10;            QMessageBox.critical(self, &quot;Error&quot;, f&quot;Failed to delete income entries: {str(e)}&quot;)&#10;&#10;    def refresh_data(self):&#10;        &quot;&quot;&quot;Refresh the income data display&quot;&quot;&quot;&#10;        try:&#10;            # Build filter parameters&#10;            person_filter = None if self.filter_person.currentText() == &quot;All&quot; else self.filter_person.currentText()&#10;            &#10;            # Date filters&#10;            start_date = None&#10;            end_date = None&#10;            &#10;            if self.filter_month.currentIndex() &gt; 0 and self.filter_year.currentText() != &quot;All&quot;:&#10;                year = int(self.filter_year.currentText())&#10;                month = self.filter_month.currentIndex()&#10;                start_date = f&quot;{year:04d}-{month:02d}-01&quot;&#10;                if month == 12:&#10;                    end_date = f&quot;{year+1:04d}-01-01&quot;&#10;                else:&#10;                    end_date = f&quot;{year:04d}-{month+1:02d}-01&quot;&#10;            &#10;            # Get income data&#10;            income_data = self.db.get_income(start_date, end_date, person_filter)&#10;            &#10;            # Clear and populate table&#10;            self.income_table.setRowCount(0)&#10;            &#10;            jeff_total = 0&#10;            vanessa_total = 0&#10;            &#10;            for income in income_data:&#10;                row = self.income_table.rowCount()&#10;                self.income_table.insertRow(row)&#10;                &#10;                self.income_table.setItem(row, 0, QTableWidgetItem(income['date']))&#10;                self.income_table.setItem(row, 1, QTableWidgetItem(income['person']))&#10;                &#10;                amount = income['amount']&#10;                self.income_table.setItem(row, 2, QTableWidgetItem(f&quot;${amount:,.2f}&quot;))&#10;                self.income_table.setItem(row, 3, QTableWidgetItem(income.get('description', '')))&#10;                self.income_table.setItem(row, 4, QTableWidgetItem(str(income['id'])))&#10;                &#10;                # Calculate totals for current month&#10;                if income['person'] == 'Jeff':&#10;                    jeff_total += amount&#10;                else:&#10;                    vanessa_total += amount&#10;            &#10;            # Update summary cards&#10;            self.jeff_summary.value_label.setText(f&quot;${jeff_total:,.2f}&quot;)&#10;            self.vanessa_summary.value_label.setText(f&quot;${vanessa_total:,.2f}&quot;)&#10;            self.total_summary.value_label.setText(f&quot;${jeff_total + vanessa_total:,.2f}&quot;)&#10;            &#10;        except Exception as e:&#10;            print(f&quot;Error refreshing income data: {e}&quot;)&#10;&#10;&#10;class ExpensesSubTab(QWidget):&#10;    &quot;&quot;&quot;Sub-tab for managing expense entries&quot;&quot;&quot;&#10;    &#10;    def __init__(self):&#10;        super().__init__()&#10;        self.db = DatabaseManager()&#10;        self.categories_data = {}&#10;        self.init_ui()&#10;        self.load_categories()&#10;        self.refresh_data()&#10;        &#10;    def init_ui(self):&#10;        &quot;&quot;&quot;Initialize the Expenses UI&quot;&quot;&quot;&#10;        layout = QVBoxLayout()&#10;        &#10;        # Top section - Add Expense Form&#10;        form_group = QGroupBox(&quot;Add Expense&quot;)&#10;        form_layout = QGridLayout()&#10;        &#10;        # Row 1&#10;        form_layout.addWidget(QLabel(&quot;Person:&quot;), 0, 0)&#10;        self.person_combo = QComboBox()&#10;        self.person_combo.addItems([&quot;Jeff&quot;, &quot;Vanessa&quot;])&#10;        form_layout.addWidget(self.person_combo, 0, 1)&#10;        &#10;        form_layout.addWidget(QLabel(&quot;Amount:&quot;), 0, 2)&#10;        self.amount_input = QLineEdit()&#10;        self.amount_input.setPlaceholderText(&quot;Enter expense amount&quot;)&#10;        form_layout.addWidget(self.amount_input, 0, 3)&#10;        &#10;        form_layout.addWidget(QLabel(&quot;Date:&quot;), 0, 4)&#10;        self.date_input = QDateEdit()&#10;        self.date_input.setDate(QDate.currentDate())&#10;        self.date_input.setCalendarPopup(True)&#10;        form_layout.addWidget(self.date_input, 0, 5)&#10;        &#10;        # Row 2&#10;        form_layout.addWidget(QLabel(&quot;Category:&quot;), 1, 0)&#10;        self.category_combo = QComboBox()&#10;        self.category_combo.currentTextChanged.connect(self.on_category_changed)&#10;        form_layout.addWidget(self.category_combo, 1, 1)&#10;        &#10;        form_layout.addWidget(QLabel(&quot;Subcategory:&quot;), 1, 2)&#10;        self.subcategory_combo = QComboBox()&#10;        form_layout.addWidget(self.subcategory_combo, 1, 3)&#10;        &#10;        form_layout.addWidget(QLabel(&quot;Payment Method:&quot;), 1, 4)&#10;        self.payment_combo = QComboBox()&#10;        self.payment_combo.addItems([&quot;Cash&quot;, &quot;Credit Card&quot;, &quot;Debit Card&quot;, &quot;Check&quot;, &quot;Transfer&quot;, &quot;Other&quot;])&#10;        form_layout.addWidget(self.payment_combo, 1, 5)&#10;        &#10;        # Row 3&#10;        form_layout.addWidget(QLabel(&quot;Description:&quot;), 2, 0)&#10;        self.description_input = QLineEdit()&#10;        self.description_input.setPlaceholderText(&quot;Optional description&quot;)&#10;        form_layout.addWidget(self.description_input, 2, 1, 1, 5)&#10;&#10;        # Row 4 - Buttons&#10;        button_layout = QHBoxLayout()&#10;        &#10;        add_btn = QPushButton(&quot;Add Expense&quot;)&#10;        add_btn.setStyleSheet(&quot;&quot;&quot;&#10;            QPushButton {&#10;                background-color: #2a82da;&#10;                color: white;&#10;                padding: 8px;&#10;                font-weight: bold;&#10;                border-radius: 4px;&#10;            }&#10;            QPushButton:hover {&#10;                background-color: #1e5fa8;&#10;            }&#10;        &quot;&quot;&quot;)&#10;        add_btn.clicked.connect(self.add_expense)&#10;        button_layout.addWidget(add_btn)&#10;        &#10;        import_btn = QPushButton(&quot;Import from File&quot;)&#10;        import_btn.setStyleSheet(&quot;&quot;&quot;&#10;            QPushButton {&#10;                background-color: #5cb85c;&#10;                color: white;&#10;                padding: 8px;&#10;                font-weight: bold;&#10;                border-radius: 4px;&#10;            }&#10;            QPushButton:hover {&#10;                background-color: #449d44;&#10;            }&#10;        &quot;&quot;&quot;)&#10;        import_btn.clicked.connect(self.import_expenses)&#10;        button_layout.addWidget(import_btn)&#10;        &#10;        button_layout.addStretch()&#10;        &#10;        form_layout.addLayout(button_layout, 3, 0, 1, 6)&#10;        &#10;        form_group.setLayout(form_layout)&#10;        layout.addWidget(form_group)&#10;        &#10;        # Monthly Summary Section&#10;        summary_layout = QHBoxLayout()&#10;        &#10;        # Jeff's Expenses Summary&#10;        self.jeff_summary = self.create_summary_card(&quot;Jeff's Monthly Expenses&quot;, &quot;$0.00&quot;)&#10;        summary_layout.addWidget(self.jeff_summary)&#10;        &#10;        # Vanessa's Expenses Summary&#10;        self.vanessa_summary = self.create_summary_card(&quot;Vanessa's Monthly Expenses&quot;, &quot;$0.00&quot;)&#10;        summary_layout.addWidget(self.vanessa_summary)&#10;        &#10;        # Total Expenses Summary&#10;        self.total_summary = self.create_summary_card(&quot;Total Monthly Expenses&quot;, &quot;$0.00&quot;)&#10;        summary_layout.addWidget(self.total_summary)&#10;        &#10;        # Top Category Summary&#10;        self.top_category_summary = self.create_summary_card(&quot;Top Category&quot;, &quot;None&quot;)&#10;        summary_layout.addWidget(self.top_category_summary)&#10;        &#10;        layout.addLayout(summary_layout)&#10;        &#10;        # Expense History Table&#10;        history_group = QGroupBox(&quot;Expense History&quot;)&#10;        history_layout = QVBoxLayout()&#10;        &#10;        # Filter controls&#10;        filter_layout = QHBoxLayout()&#10;        &#10;        filter_layout.addWidget(QLabel(&quot;Filter by:&quot;))&#10;        &#10;        self.filter_person = QComboBox()&#10;        self.filter_person.addItems([&quot;All&quot;, &quot;Jeff&quot;, &quot;Vanessa&quot;])&#10;        self.filter_person.currentTextChanged.connect(self.refresh_data)&#10;        filter_layout.addWidget(self.filter_person)&#10;        &#10;        self.filter_category = QComboBox()&#10;        self.filter_category.addItems([&quot;All Categories&quot;])&#10;        self.filter_category.currentTextChanged.connect(self.refresh_data)&#10;        filter_layout.addWidget(self.filter_category)&#10;        &#10;        filter_layout.addWidget(QLabel(&quot;Month:&quot;))&#10;        self.filter_month = QComboBox()&#10;        self.filter_month.addItems([&#10;            &quot;All&quot;, &quot;January&quot;, &quot;February&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;, &quot;June&quot;,&#10;            &quot;July&quot;, &quot;August&quot;, &quot;September&quot;, &quot;October&quot;, &quot;November&quot;, &quot;December&quot;&#10;        ])&#10;        self.filter_month.setCurrentIndex(datetime.now().month)&#10;        self.filter_month.currentIndexChanged.connect(self.refresh_data)&#10;        filter_layout.addWidget(self.filter_month)&#10;        &#10;        filter_layout.addWidget(QLabel(&quot;Year:&quot;))&#10;        self.filter_year = QComboBox()&#10;        current_year = datetime.now().year&#10;        self.filter_year.addItems([&quot;All&quot;] + [str(year) for year in range(current_year - 2, current_year + 2)])&#10;        self.filter_year.setCurrentText(str(current_year))&#10;        self.filter_year.currentTextChanged.connect(self.refresh_data)&#10;        filter_layout.addWidget(self.filter_year)&#10;        &#10;        filter_layout.addStretch()&#10;        &#10;        # Export and Delete buttons&#10;        export_btn = QPushButton(&quot;Export to CSV&quot;)&#10;        export_btn.clicked.connect(self.export_expenses)&#10;        filter_layout.addWidget(export_btn)&#10;        &#10;        delete_btn = QPushButton(&quot;Delete Selected&quot;)&#10;        delete_btn.clicked.connect(self.delete_selected_expenses)&#10;        filter_layout.addWidget(delete_btn)&#10;        &#10;        history_layout.addLayout(filter_layout)&#10;        &#10;        # Expense table&#10;        self.expense_table = QTableWidget()&#10;        self.expense_table.setColumnCount(8)&#10;        self.expense_table.setHorizontalHeaderLabels([&#10;            &quot;Date&quot;, &quot;Person&quot;, &quot;Amount&quot;, &quot;Category&quot;, &quot;Subcategory&quot;, &#10;            &quot;Description&quot;, &quot;Payment&quot;, &quot;ID&quot;&#10;        ])&#10;        self.expense_table.hideColumn(7)  # Hide ID column&#10;        &#10;        # Set column widths&#10;        header = self.expense_table.horizontalHeader()&#10;        for i in range(7):&#10;            if i == 5:  # Description column&#10;                header.setSectionResizeMode(i, QHeaderView.ResizeMode.Stretch)&#10;            else:&#10;                header.setSectionResizeMode(i, QHeaderView.ResizeMode.ResizeToContents)&#10;        &#10;        history_layout.addWidget(self.expense_table)&#10;        history_group.setLayout(history_layout)&#10;        &#10;        layout.addWidget(history_group)&#10;        self.setLayout(layout)&#10;        &#10;    def create_summary_card(self, title, value):&#10;        &quot;&quot;&quot;Create a summary card widget&quot;&quot;&quot;&#10;        group = QGroupBox(title)&#10;        group.setStyleSheet(&quot;&quot;&quot;&#10;            QGroupBox {&#10;                font-weight: bold;&#10;                border: 2px solid #555;&#10;                border-radius: 5px;&#10;                margin-top: 10px;&#10;                padding-top: 10px;&#10;                min-width: 150px;&#10;            }&#10;        &quot;&quot;&quot;)&#10;        &#10;        layout = QVBoxLayout()&#10;        value_label = QLabel(value)&#10;        value_label.setAlignment(Qt.AlignmentFlag.AlignCenter)&#10;        value_label.setFont(QFont(&quot;Arial&quot;, 14, QFont.Weight.Bold))&#10;        value_label.setStyleSheet(&quot;color: #d9534f;&quot;)&#10;        layout.addWidget(value_label)&#10;        &#10;        group.setLayout(layout)&#10;        group.value_label = value_label  # Store reference for updating&#10;        return group&#10;        &#10;    def load_categories(self):&#10;        &quot;&quot;&quot;Load categories from database&quot;&quot;&quot;&#10;        try:&#10;            categories = self.db.get_categories()&#10;            &#10;            # Organize categories&#10;            self.categories_data = {}&#10;            for cat in categories:&#10;                category = cat['category']&#10;                subcategory = cat['subcategory']&#10;                &#10;                if category not in self.categories_data:&#10;                    self.categories_data[category] = []&#10;                self.categories_data[category].append(subcategory)&#10;            &#10;            # Populate category combo&#10;            self.category_combo.clear()&#10;            self.category_combo.addItems(sorted(self.categories_data.keys()))&#10;            &#10;            # Populate filter category combo&#10;            self.filter_category.clear()&#10;            self.filter_category.addItems([&quot;All Categories&quot;] + sorted(self.categories_data.keys()))&#10;            &#10;        except Exception as e:&#10;            print(f&quot;Error loading categories: {e}&quot;)&#10;            &#10;    def on_category_changed(self, category):&#10;        &quot;&quot;&quot;Update subcategories when category changes&quot;&quot;&quot;&#10;        self.subcategory_combo.clear()&#10;        if category in self.categories_data:&#10;            self.subcategory_combo.addItems(self.categories_data[category])&#10;            &#10;    def add_expense(self):&#10;        &quot;&quot;&quot;Add expense entry to database&quot;&quot;&quot;&#10;        try:&#10;            person = self.person_combo.currentText()&#10;            amount_text = self.amount_input.text().strip()&#10;            date = self.date_input.date().toString(&quot;yyyy-MM-dd&quot;)&#10;            category = self.category_combo.currentText()&#10;            subcategory = self.subcategory_combo.currentText()&#10;            description = self.description_input.text().strip()&#10;            payment_method = self.payment_combo.currentText()&#10;&#10;            # Validate inputs&#10;            if not amount_text:&#10;                QMessageBox.warning(self, &quot;Warning&quot;, &quot;Please enter an amount&quot;)&#10;                return&#10;                &#10;            if not category or not subcategory:&#10;                QMessageBox.warning(self, &quot;Warning&quot;, &quot;Please select category and subcategory&quot;)&#10;                return&#10;                &#10;            try:&#10;                amount = float(amount_text.replace(&quot;,&quot;, &quot;&quot;).replace(&quot;$&quot;, &quot;&quot;))&#10;            except ValueError:&#10;                QMessageBox.warning(self, &quot;Warning&quot;, &quot;Please enter a valid number for amount&quot;)&#10;                return&#10;            &#10;            # Add to database&#10;            self.db.add_expense(person, amount, date, category, subcategory,&#10;                              description, payment_method)&#10;&#10;            # Clear form&#10;            self.amount_input.clear()&#10;            self.description_input.clear()&#10;&#10;            # Refresh display&#10;            self.refresh_data()&#10;            &#10;            QMessageBox.information(self, &quot;Success&quot;, &quot;Expense added successfully!&quot;)&#10;            &#10;        except Exception as e:&#10;            QMessageBox.critical(self, &quot;Error&quot;, f&quot;Failed to add expense: {str(e)}&quot;)&#10;            &#10;    def import_expenses(self):&#10;        &quot;&quot;&quot;Import expenses from CSV or TXT file using ExpenseLoader&quot;&quot;&quot;&#10;        try:&#10;            file_path, _ = QFileDialog.getOpenFileName(&#10;                self, &#10;                &quot;Import Expenses&quot;, &#10;                &quot;&quot;, &#10;                &quot;CSV Files (*.csv);;Text Files (*.txt);;All Files (*.*)&quot;&#10;            )&#10;            &#10;            if not file_path:&#10;                return&#10;            &#10;            # Use ExpenseLoader to parse the file&#10;            loader = ExpenseLoader()&#10;            expenses = []&#10;            errors = []&#10;&#10;            if file_path.lower().endswith('.csv'):&#10;                expenses, errors = loader.load_csv_file(file_path)&#10;            elif file_path.lower().endswith('.txt'):&#10;                expenses, errors = loader.load_txt_file(file_path)&#10;            else:&#10;                # Try CSV first, then TXT&#10;                expenses, errors = loader.load_csv_file(file_path)&#10;                if not expenses and not errors:&#10;                    expenses, errors = loader.load_txt_file(file_path)&#10;&#10;            # Show errors if any&#10;            if errors:&#10;                error_dialog = QMessageBox()&#10;                error_dialog.setWindowTitle(&quot;Import Warnings&quot;)&#10;                error_dialog.setIcon(QMessageBox.Icon.Warning)&#10;                error_dialog.setText(f&quot;Found {len(errors)} issues while parsing the file:&quot;)&#10;                error_dialog.setDetailedText(&quot;\n&quot;.join(errors))&#10;                error_dialog.exec()&#10;&#10;            if not expenses:&#10;                QMessageBox.warning(self, &quot;Warning&quot;, &quot;No valid expenses found in the file&quot;)&#10;                return&#10;&#10;            # Validate expenses&#10;            valid_expenses, validation_errors = loader.validate_expenses(expenses)&#10;&#10;            if validation_errors:&#10;                error_dialog = QMessageBox()&#10;                error_dialog.setWindowTitle(&quot;Validation Errors&quot;)&#10;                error_dialog.setIcon(QMessageBox.Icon.Warning)&#10;                error_dialog.setText(f&quot;Found {len(validation_errors)} validation issues:&quot;)&#10;                error_dialog.setDetailedText(&quot;\n&quot;.join(validation_errors))&#10;                error_dialog.exec()&#10;&#10;            if not valid_expenses:&#10;                QMessageBox.warning(self, &quot;Warning&quot;, &quot;No valid expenses after validation&quot;)&#10;                return&#10;&#10;            # Show preview dialog&#10;            preview_dialog = ExpensePreviewDialog(valid_expenses, self.categories_data)&#10;            if preview_dialog.exec() == QDialog.DialogCode.Accepted:&#10;                final_expenses = preview_dialog.get_final_expenses()&#10;&#10;                if final_expenses:&#10;                    # Add to database&#10;                    self.db.bulk_add_expenses(final_expenses)&#10;                    self.refresh_data()&#10;&#10;                    QMessageBox.information(&#10;                        self, &#10;                        &quot;Success&quot;, &#10;                        f&quot;Successfully imported {len(final_expenses)} expenses!\n\n&quot;&#10;                        f&quot;Parsing errors: {len(errors)}\n&quot;&#10;                        f&quot;Validation errors: {len(validation_errors)}\n&quot;&#10;                        f&quot;Successfully imported: {len(final_expenses)}&quot;&#10;                    )&#10;                    &#10;        except Exception as e:&#10;            QMessageBox.critical(self, &quot;Error&quot;, f&quot;Failed to import expenses: {str(e)}&quot;)&#10;            &#10;    def export_expenses(self):&#10;        &quot;&quot;&quot;Export expenses to CSV file&quot;&quot;&quot;&#10;        try:&#10;            file_path, _ = QFileDialog.getSaveFileName(&#10;                self,&#10;                &quot;Export Expenses&quot;,&#10;                f&quot;expenses_{datetime.now().strftime('%Y%m%d')}.csv&quot;,&#10;                &quot;CSV Files (*.csv)&quot;&#10;            )&#10;            &#10;            if not file_path:&#10;                return&#10;                &#10;            # Get current filter settings&#10;            person_filter = None if self.filter_person.currentText() == &quot;All&quot; else self.filter_person.currentText()&#10;            category_filter = None if self.filter_category.currentText() == &quot;All Categories&quot; else self.filter_category.currentText()&#10;            &#10;            # Build date filters&#10;            start_date = None&#10;            end_date = None&#10;            &#10;            if self.filter_month.currentIndex() &gt; 0 and self.filter_year.currentText() != &quot;All&quot;:&#10;                year = int(self.filter_year.currentText())&#10;                month = self.filter_month.currentIndex()&#10;                start_date = f&quot;{year:04d}-{month:02d}-01&quot;&#10;                if month == 12:&#10;                    end_date = f&quot;{year+1:04d}-01-01&quot;&#10;                else:&#10;                    end_date = f&quot;{year:04d}-{month+1:02d}-01&quot;&#10;            &#10;            # Get expense data&#10;            expenses = self.db.get_expenses(start_date, end_date, person_filter, category_filter)&#10;            &#10;            # Write to CSV&#10;            with open(file_path, 'w', newline='') as csvfile:&#10;                fieldnames = ['date', 'person', 'amount', 'category', 'subcategory', &#10;                            'description', 'payment_method']&#10;                writer = csv.DictWriter(csvfile, fieldnames=fieldnames)&#10;                &#10;                writer.writeheader()&#10;                for expense in expenses:&#10;                    writer.writerow({&#10;                        'date': expense['date'],&#10;                        'person': expense['person'],&#10;                        'amount': expense['amount'],&#10;                        'category': expense['category'],&#10;                        'subcategory': expense['subcategory'],&#10;                        'description': expense.get('description', ''),&#10;                        'payment_method': expense.get('payment_method', '')&#10;                    })&#10;            &#10;            QMessageBox.information(self, &quot;Success&quot;, f&quot;Expenses exported to {file_path}&quot;)&#10;            &#10;        except Exception as e:&#10;            QMessageBox.critical(self, &quot;Error&quot;, f&quot;Failed to export expenses: {str(e)}&quot;)&#10;            &#10;    def delete_selected_expenses(self):&#10;        &quot;&quot;&quot;Delete selected expense entries&quot;&quot;&quot;&#10;        selected_rows = []&#10;        for row in range(self.expense_table.rowCount()):&#10;            if self.expense_table.item(row, 0) and self.expense_table.item(row, 0).isSelected():&#10;                selected_rows.append(row)&#10;            elif any(self.expense_table.item(row, col) and self.expense_table.item(row, col).isSelected()&#10;                    for col in range(self.expense_table.columnCount())):&#10;                selected_rows.append(row)&#10;&#10;        if not selected_rows:&#10;            QMessageBox.warning(self, &quot;Warning&quot;, &quot;Please select one or more expense entries to delete.&quot;)&#10;            return&#10;&#10;        # Confirm deletion&#10;        reply = QMessageBox.question(&#10;            self,&#10;            &quot;Confirm Deletion&quot;,&#10;            f&quot;Are you sure you want to delete {len(selected_rows)} expense entr{'y' if len(selected_rows) == 1 else 'ies'}?\n\nThis action cannot be undone.&quot;,&#10;            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,&#10;            QMessageBox.StandardButton.No&#10;        )&#10;&#10;        if reply != QMessageBox.StandardButton.Yes:&#10;            return&#10;&#10;        try:&#10;            # Delete each selected expense entry&#10;            deleted_count = 0&#10;            for row in reversed(selected_rows):  # Reverse to maintain row indices&#10;                expense_id_item = self.expense_table.item(row, 7)  # ID is in column 7&#10;                if expense_id_item:&#10;                    expense_id = int(expense_id_item.text())&#10;&#10;                    # Delete from database using the model's delete method&#10;                    from database.models import ExpenseModel&#10;                    ExpenseModel.delete(self.db, expense_id)&#10;                    deleted_count += 1&#10;&#10;            # Refresh the table&#10;            self.refresh_data()&#10;&#10;            QMessageBox.information(&#10;                self,&#10;                &quot;Success&quot;,&#10;                f&quot;Successfully deleted {deleted_count} expense entr{'y' if deleted_count == 1 else 'ies'}.&quot;&#10;            )&#10;&#10;        except Exception as e:&#10;            QMessageBox.critical(self, &quot;Error&quot;, f&quot;Failed to delete expense entries: {str(e)}&quot;)&#10;&#10;    def refresh_data(self):&#10;        &quot;&quot;&quot;Refresh the expense data display&quot;&quot;&quot;&#10;        try:&#10;            # Build filter parameters&#10;            person_filter = None if self.filter_person.currentText() == &quot;All&quot; else self.filter_person.currentText()&#10;            category_filter = None if self.filter_category.currentText() == &quot;All Categories&quot; else self.filter_category.currentText()&#10;            &#10;            # Date filters&#10;            start_date = None&#10;            end_date = None&#10;            &#10;            if self.filter_month.currentIndex() &gt; 0 and self.filter_year.currentText() != &quot;All&quot;:&#10;                year = int(self.filter_year.currentText())&#10;                month = self.filter_month.currentIndex()&#10;                start_date = f&quot;{year:04d}-{month:02d}-01&quot;&#10;                if month == 12:&#10;                    end_date = f&quot;{year+1:04d}-01-01&quot;&#10;                else:&#10;                    end_date = f&quot;{year:04d}-{month+1:02d}-01&quot;&#10;            &#10;            # Get expense data&#10;            expense_data = self.db.get_expenses(start_date, end_date, person_filter, category_filter)&#10;            &#10;            # Clear and populate table&#10;            self.expense_table.setRowCount(0)&#10;            &#10;            jeff_total = 0&#10;            vanessa_total = 0&#10;            category_totals = {}&#10;            &#10;            for expense in expense_data:&#10;                row = self.expense_table.rowCount()&#10;                self.expense_table.insertRow(row)&#10;                &#10;                self.expense_table.setItem(row, 0, QTableWidgetItem(expense['date']))&#10;                self.expense_table.setItem(row, 1, QTableWidgetItem(expense['person']))&#10;                &#10;                amount = expense['amount']&#10;                amount_item = QTableWidgetItem(f&quot;${amount:,.2f}&quot;)&#10;                amount_item.setForeground(Qt.GlobalColor.red)&#10;                self.expense_table.setItem(row, 2, amount_item)&#10;                &#10;                self.expense_table.setItem(row, 3, QTableWidgetItem(expense['category']))&#10;                self.expense_table.setItem(row, 4, QTableWidgetItem(expense['subcategory']))&#10;                self.expense_table.setItem(row, 5, QTableWidgetItem(expense.get('description', '')))&#10;                self.expense_table.setItem(row, 6, QTableWidgetItem(expense.get('payment_method', '')))&#10;                self.expense_table.setItem(row, 7, QTableWidgetItem(str(expense['id'])))&#10;                &#10;                # Calculate totals&#10;                if expense['person'] == 'Jeff':&#10;                    jeff_total += amount&#10;                else:&#10;                    vanessa_total += amount&#10;                    &#10;                # Track category totals&#10;                category = expense['category']&#10;                if category not in category_totals:&#10;                    category_totals[category] = 0&#10;                category_totals[category] += amount&#10;            &#10;            # Update summary cards&#10;            self.jeff_summary.value_label.setText(f&quot;${jeff_total:,.2f}&quot;)&#10;            self.vanessa_summary.value_label.setText(f&quot;${vanessa_total:,.2f}&quot;)&#10;            self.total_summary.value_label.setText(f&quot;${jeff_total + vanessa_total:,.2f}&quot;)&#10;            &#10;            # Find top category&#10;            if category_totals:&#10;                top_category = max(category_totals, key=category_totals.get)&#10;                self.top_category_summary.value_label.setText(&#10;                    f&quot;{top_category}\n${category_totals[top_category]:,.2f}&quot;&#10;                )&#10;            else:&#10;                self.top_category_summary.value_label.setText(&quot;None&quot;)&#10;            &#10;        except Exception as e:&#10;            print(f&quot;Error refreshing expense data: {e}&quot;)&#10;&#10;&#10;class ImportDialog(QDialog):&#10;    &quot;&quot;&quot;Dialog for importing expenses from file&quot;&quot;&quot;&#10;    &#10;    def __init__(self, file_path, categories_data):&#10;        super().__init__()&#10;        self.file_path = file_path&#10;        self.categories_data = categories_data&#10;        self.parsed_expenses = []&#10;        &#10;        self.setWindowTitle(&quot;Import Expenses&quot;)&#10;        self.setModal(True)&#10;        self.setMinimumSize(800, 600)&#10;        &#10;        self.init_ui()&#10;        self.load_file()&#10;        &#10;    def init_ui(self):&#10;        &quot;&quot;&quot;Initialize the import dialog UI&quot;&quot;&quot;&#10;        layout = QVBoxLayout()&#10;        &#10;        # Instructions&#10;        instructions = QLabel(&#10;            &quot;Map the columns from your file to the expense fields. &quot;&#10;            &quot;Select the appropriate column for each field.&quot;&#10;        )&#10;        instructions.setWordWrap(True)&#10;        layout.addWidget(instructions)&#10;        &#10;        # Column mapping section&#10;        mapping_group = QGroupBox(&quot;Column Mapping&quot;)&#10;        mapping_layout = QGridLayout()&#10;        &#10;        self.column_combos = {}&#10;        fields = [&#10;            (&quot;Date&quot;, True),&#10;            (&quot;Amount&quot;, True),&#10;            (&quot;Description&quot;, False),&#10;            (&quot;Category&quot;, False),&#10;            (&quot;Subcategory&quot;, False),&#10;            (&quot;Payment Method&quot;, False)&#10;        ]&#10;        &#10;        for i, (field, required) in enumerate(fields):&#10;            label_text = f&quot;{field}:&quot; if not required else f&quot;{field}*:&quot;&#10;            mapping_layout.addWidget(QLabel(label_text), i, 0)&#10;            &#10;            combo = QComboBox()&#10;            combo.addItem(&quot;-- Not Mapped --&quot;)&#10;            self.column_combos[field] = combo&#10;            mapping_layout.addWidget(combo, i, 1)&#10;            &#10;        # Person assignment&#10;        mapping_layout.addWidget(QLabel(&quot;Assign to:&quot;), len(fields), 0)&#10;        self.person_combo = QComboBox()&#10;        self.person_combo.addItems([&quot;Jeff&quot;, &quot;Vanessa&quot;, &quot;Ask for Each&quot;])&#10;        mapping_layout.addWidget(self.person_combo, len(fields), 1)&#10;        &#10;        # Default category (if not in file)&#10;        mapping_layout.addWidget(QLabel(&quot;Default Category:&quot;), len(fields) + 1, 0)&#10;        self.default_category_combo = QComboBox()&#10;        self.default_category_combo.addItems([&quot;-- Select --&quot;] + list(self.categories_data.keys()))&#10;        mapping_layout.addWidget(self.default_category_combo, len(fields) + 1, 1)&#10;        &#10;        mapping_group.setLayout(mapping_layout)&#10;        layout.addWidget(mapping_group)&#10;        &#10;        # Preview section&#10;        preview_group = QGroupBox(&quot;Preview&quot;)&#10;        preview_layout = QVBoxLayout()&#10;        &#10;        self.preview_table = QTableWidget()&#10;        self.preview_table.setMaximumHeight(200)&#10;        preview_layout.addWidget(self.preview_table)&#10;        &#10;        preview_group.setLayout(preview_layout)&#10;        layout.addWidget(preview_group)&#10;        &#10;        # Dialog buttons&#10;        buttons = QDialogButtonBox(&#10;            QDialogButtonBox.StandardButton.Ok | QDialogButtonBox.StandardButton.Cancel&#10;        )&#10;        buttons.accepted.connect(self.process_import)&#10;        buttons.rejected.connect(self.reject)&#10;        layout.addWidget(buttons)&#10;        &#10;        self.setLayout(layout)&#10;        &#10;    def load_file(self):&#10;        &quot;&quot;&quot;Load and preview the file&quot;&quot;&quot;&#10;        try:&#10;            with open(self.file_path, 'r') as file:&#10;                # Try to detect delimiter&#10;                sample = file.read(1024)&#10;                file.seek(0)&#10;                &#10;                # Detect delimiter&#10;                if '\t' in sample:&#10;                    delimiter = '\t'&#10;                elif ',' in sample:&#10;                    delimiter = ','&#10;                else:&#10;                    delimiter = ','&#10;                &#10;                reader = csv.reader(file, delimiter=delimiter)&#10;                rows = list(reader)&#10;                &#10;                if not rows:&#10;                    QMessageBox.warning(self, &quot;Warning&quot;, &quot;The file appears to be empty&quot;)&#10;                    return&#10;                &#10;                # Assume first row is headers&#10;                headers = rows[0] if rows else []&#10;                data_rows = rows[1:6] if len(rows) &gt; 1 else []  # Preview first 5 data rows&#10;                &#10;                # Update column combos&#10;                for combo in self.column_combos.values():&#10;                    combo.clear()&#10;                    combo.addItem(&quot;-- Not Mapped --&quot;)&#10;                    combo.addItems(headers)&#10;                &#10;                # Try to auto-map columns based on header names&#10;                self.auto_map_columns(headers)&#10;                &#10;                # Update preview table&#10;                self.preview_table.setColumnCount(len(headers))&#10;                self.preview_table.setHorizontalHeaderLabels(headers)&#10;                self.preview_table.setRowCount(len(data_rows))&#10;                &#10;                for i, row in enumerate(data_rows):&#10;                    for j, value in enumerate(row):&#10;                        self.preview_table.setItem(i, j, QTableWidgetItem(value))&#10;                        &#10;        except Exception as e:&#10;            QMessageBox.critical(self, &quot;Error&quot;, f&quot;Failed to load file: {str(e)}&quot;)&#10;            &#10;    def auto_map_columns(self, headers):&#10;        &quot;&quot;&quot;Try to automatically map columns based on header names&quot;&quot;&quot;&#10;        mappings = {&#10;            &quot;Date&quot;: [&quot;date&quot;, &quot;transaction date&quot;, &quot;posted date&quot;, &quot;trans date&quot;],&#10;            &quot;Amount&quot;: [&quot;amount&quot;, &quot;debit&quot;, &quot;charge&quot;, &quot;payment&quot;],&#10;            &quot;Description&quot;: [&quot;description&quot;, &quot;memo&quot;, &quot;merchant&quot;, &quot;details&quot;],&#10;            &quot;Category&quot;: [&quot;category&quot;, &quot;type&quot;],&#10;            &quot;Subcategory&quot;: [&quot;subcategory&quot;, &quot;sub category&quot;, &quot;sub-category&quot;],&#10;            &quot;Payment Method&quot;: [&quot;payment&quot;, &quot;method&quot;, &quot;card&quot;, &quot;account&quot;]&#10;        }&#10;        &#10;        headers_lower = [h.lower() for h in headers]&#10;        &#10;        for field, keywords in mappings.items():&#10;            combo = self.column_combos[field]&#10;            for i, header in enumerate(headers_lower):&#10;                for keyword in keywords:&#10;                    if keyword in header:&#10;                        combo.setCurrentIndex(i + 1)  # +1 because of &quot;-- Not Mapped --&quot;&#10;                        break&#10;                        &#10;    def process_import(self):&#10;        &quot;&quot;&quot;Process the import with the current mapping&quot;&quot;&quot;&#10;        try:&#10;            # Validate required fields are mapped&#10;            date_col = self.column_combos[&quot;Date&quot;].currentIndex() - 1&#10;            amount_col = self.column_combos[&quot;Amount&quot;].currentIndex() - 1&#10;            &#10;            if date_col &lt; 0 or amount_col &lt; 0:&#10;                QMessageBox.warning(self, &quot;Warning&quot;, &quot;Date and Amount columns must be mapped&quot;)&#10;                return&#10;            &#10;            # Read the entire file&#10;            with open(self.file_path, 'r') as file:&#10;                delimiter = '\t' if '\t' in file.read(1024) else ','&#10;                file.seek(0)&#10;                &#10;                reader = csv.reader(file, delimiter=delimiter)&#10;                rows = list(reader)&#10;                &#10;                if len(rows) &lt;= 1:&#10;                    QMessageBox.warning(self, &quot;Warning&quot;, &quot;No data rows found&quot;)&#10;                    return&#10;                &#10;                # Skip header row&#10;                data_rows = rows[1:]&#10;                &#10;                # Process each row&#10;                self.parsed_expenses = []&#10;                person = self.person_combo.currentText()&#10;                &#10;                for row in data_rows:&#10;                    try:&#10;                        expense = {&#10;                            'person': person if person != &quot;Ask for Each&quot; else &quot;Jeff&quot;,  # Default to Jeff&#10;                            'date': row[date_col] if date_col &gt;= 0 else &quot;&quot;,&#10;                            'amount': abs(float(row[amount_col].replace(&quot;,&quot;, &quot;&quot;).replace(&quot;$&quot;, &quot;&quot;))),&#10;                        }&#10;                        &#10;                        # Optional fields&#10;                        desc_col = self.column_combos[&quot;Description&quot;].currentIndex() - 1&#10;                        if desc_col &gt;= 0 and desc_col &lt; len(row):&#10;                            expense['description'] = row[desc_col]&#10;                        else:&#10;                            expense['description'] = &quot;&quot;&#10;                        &#10;                        cat_col = self.column_combos[&quot;Category&quot;].currentIndex() - 1&#10;                        if cat_col &gt;= 0 and cat_col &lt; len(row):&#10;                            expense['category'] = row[cat_col]&#10;                        else:&#10;                            expense['category'] = self.default_category_combo.currentText()&#10;                            &#10;                        subcat_col = self.column_combos[&quot;Subcategory&quot;].currentIndex() - 1&#10;                        if subcat_col &gt;= 0 and subcat_col &lt; len(row):&#10;                            expense['subcategory'] = row[subcat_col]&#10;                        else:&#10;                            # Use first subcategory for the category&#10;                            if expense['category'] in self.categories_data:&#10;                                expense['subcategory'] = self.categories_data[expense['category']][0]&#10;                            else:&#10;                                expense['subcategory'] = &quot;Other&quot;&#10;                        &#10;                        payment_col = self.column_combos[&quot;Payment Method&quot;].currentIndex() - 1&#10;                        if payment_col &gt;= 0 and payment_col &lt; len(row):&#10;                            expense['payment_method'] = row[payment_col]&#10;                        else:&#10;                            expense['payment_method'] = &quot;Credit Card&quot;&#10;                        &#10;                        # Validate and add&#10;                        if expense['date'] and expense['amount'] &gt; 0:&#10;                            self.parsed_expenses.append(expense)&#10;                            &#10;                    except Exception as e:&#10;                        print(f&quot;Error processing row: {e}&quot;)&#10;                        continue&#10;                &#10;                if self.parsed_expenses:&#10;                    self.accept()&#10;                else:&#10;                    QMessageBox.warning(self, &quot;Warning&quot;, &quot;No valid expenses could be parsed&quot;)&#10;                    &#10;        except Exception as e:&#10;            QMessageBox.critical(self, &quot;Error&quot;, f&quot;Failed to process import: {str(e)}&quot;)&#10;            &#10;    def get_parsed_expenses(self):&#10;        &quot;&quot;&quot;Return the parsed expenses&quot;&quot;&quot;&#10;        return self.parsed_expenses&#10;&#10;&#10;class ExpensePreviewDialog(QDialog):&#10;    &quot;&quot;&quot;Dialog for previewing expenses before import&quot;&quot;&quot;&#10;&#10;    def __init__(self, expenses, categories_data):&#10;        super().__init__()&#10;        self.expenses = expenses&#10;        self.categories_data = categories_data&#10;        self.final_expenses = []&#10;&#10;        self.setWindowTitle(&quot;Preview Expenses&quot;)&#10;        self.setModal(True)&#10;        self.setMinimumSize(800, 600)&#10;&#10;        self.init_ui()&#10;        self.populate_preview()&#10;&#10;    def init_ui(self):&#10;        &quot;&quot;&quot;Initialize the preview dialog UI&quot;&quot;&quot;&#10;        layout = QVBoxLayout()&#10;&#10;        # Instructions&#10;        instructions = QLabel(&#10;            &quot;Review the expenses below. You can edit the values, select rows and delete them, &quot;&#10;            &quot;or remove any expense that you do not want to import.&quot;&#10;        )&#10;        instructions.setWordWrap(True)&#10;        layout.addWidget(instructions)&#10;&#10;        # Preview table&#10;        self.preview_table = QTableWidget()&#10;        self.preview_table.setColumnCount(7)&#10;        self.preview_table.setHorizontalHeaderLabels([&#10;            &quot;Date&quot;, &quot;Person&quot;, &quot;Amount&quot;, &quot;Category&quot;, &quot;Subcategory&quot;, &quot;Description&quot;, &quot;Payment Method&quot;&#10;        ])&#10;&#10;        # Enable row selection&#10;        self.preview_table.setSelectionBehavior(QTableWidget.SelectionBehavior.SelectRows)&#10;        self.preview_table.setSelectionMode(QTableWidget.SelectionMode.MultiSelection)&#10;&#10;        # Set column widths&#10;        header = self.preview_table.horizontalHeader()&#10;        header.setSectionResizeMode(0, QHeaderView.ResizeMode.ResizeToContents)&#10;        header.setSectionResizeMode(1, QHeaderView.ResizeMode.ResizeToContents)&#10;        header.setSectionResizeMode(2, QHeaderView.ResizeMode.ResizeToContents)&#10;        header.setSectionResizeMode(3, QHeaderView.ResizeMode.ResizeToContents)&#10;        header.setSectionResizeMode(4, QHeaderView.ResizeMode.ResizeToContents)&#10;        header.setSectionResizeMode(5, QHeaderView.ResizeMode.Stretch)&#10;&#10;        layout.addWidget(self.preview_table)&#10;&#10;        # Action buttons layout&#10;        action_layout = QHBoxLayout()&#10;&#10;        # Delete selected button&#10;        delete_btn = QPushButton(&quot;Delete Selected&quot;)&#10;        delete_btn.setStyleSheet(&quot;&quot;&quot;&#10;            QPushButton {&#10;                background-color: #d9534f;&#10;                color: white;&#10;                padding: 8px;&#10;                font-weight: bold;&#10;                border-radius: 4px;&#10;            }&#10;            QPushButton:hover {&#10;                background-color: #c9302c;&#10;            }&#10;        &quot;&quot;&quot;)&#10;        delete_btn.clicked.connect(self.delete_selected_rows)&#10;        action_layout.addWidget(delete_btn)&#10;&#10;        action_layout.addStretch()&#10;&#10;        # Row count label&#10;        self.row_count_label = QLabel()&#10;        self.update_row_count()&#10;        action_layout.addWidget(self.row_count_label)&#10;&#10;        layout.addLayout(action_layout)&#10;&#10;        # Buttons&#10;        button_layout = QHBoxLayout()&#10;&#10;        ok_btn = QPushButton(&quot;Import All&quot;)&#10;        ok_btn.setStyleSheet(&quot;&quot;&quot;&#10;            QPushButton {&#10;                background-color: #5cb85c;&#10;                color: white;&#10;                padding: 8px;&#10;                font-weight: bold;&#10;                border-radius: 4px;&#10;            }&#10;            QPushButton:hover {&#10;                background-color: #449d44;&#10;            }&#10;        &quot;&quot;&quot;)&#10;        ok_btn.clicked.connect(self.import_all)&#10;        button_layout.addWidget(ok_btn)&#10;&#10;        cancel_btn = QPushButton(&quot;Cancel&quot;)&#10;        cancel_btn.clicked.connect(self.reject)&#10;        button_layout.addWidget(cancel_btn)&#10;&#10;        layout.addLayout(button_layout)&#10;&#10;        self.setLayout(layout)&#10;&#10;    def delete_selected_rows(self):&#10;        &quot;&quot;&quot;Delete selected rows from the preview table&quot;&quot;&quot;&#10;        try:&#10;            # Get selected rows&#10;            selected_rows = set()&#10;            for item in self.preview_table.selectedItems():&#10;                selected_rows.add(item.row())&#10;&#10;            if not selected_rows:&#10;                QMessageBox.information(self, &quot;Info&quot;, &quot;Please select one or more rows to delete.&quot;)&#10;                return&#10;&#10;            # Confirm deletion&#10;            count = len(selected_rows)&#10;            reply = QMessageBox.question(&#10;                self,&#10;                &quot;Confirm Delete&quot;,&#10;                f&quot;Are you sure you want to delete {count} selected expense{'s' if count != 1 else ''}?&quot;,&#10;                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,&#10;                QMessageBox.StandardButton.No&#10;            )&#10;&#10;            if reply != QMessageBox.StandardButton.Yes:&#10;                return&#10;&#10;            # Delete rows in reverse order to maintain row indices&#10;            for row in sorted(selected_rows, reverse=True):&#10;                self.preview_table.removeRow(row)&#10;&#10;            # Update row count display&#10;            self.update_row_count()&#10;&#10;            QMessageBox.information(self, &quot;Success&quot;, f&quot;Deleted {count} expense{'s' if count != 1 else ''}.&quot;)&#10;&#10;        except Exception as e:&#10;            QMessageBox.critical(self, &quot;Error&quot;, f&quot;Failed to delete rows: {str(e)}&quot;)&#10;&#10;    def update_row_count(self):&#10;        &quot;&quot;&quot;Update the row count label&quot;&quot;&quot;&#10;        count = self.preview_table.rowCount()&#10;        self.row_count_label.setText(f&quot;Total expenses: {count}&quot;)&#10;&#10;    def populate_preview(self):&#10;        &quot;&quot;&quot;Populate the preview table with expense data&quot;&quot;&quot;&#10;        self.preview_table.setRowCount(len(self.expenses))&#10;&#10;        for i, expense in enumerate(self.expenses):&#10;            self.preview_table.setItem(i, 1, QTableWidgetItem(expense['person']))&#10;            self.preview_table.setItem(i, 2, QTableWidgetItem(f&quot;${expense['amount']:,.2f}&quot;))&#10;            self.preview_table.setItem(i, 3, QTableWidgetItem(expense['category']))&#10;            self.preview_table.setItem(i, 3, QTableWidgetItem(expense['category']))&#10;            self.preview_table.setItem(i, 4, QTableWidgetItem(expense['subcategory']))&#10;&#10;                    expense = {&#10;                        'date': date,&#10;                        'person': person,&#10;                        'amount': amount,&#10;                    continue&#10;&#10;            self.accept()&#10;&#10;        except Exception as e:&#10;            QMessageBox.critical(self, &quot;Error&quot;, f&quot;Failed to import expenses: {str(e)}&quot;)&#10;&#10;" />
              <option name="updatedContent" value="&quot;&quot;&quot;&#10;Budget Tab - Manages income and expenses with two sub-tabs&#10;&quot;&quot;&quot;&#10;&#10;from PyQt6.QtWidgets import (&#10;    QWidget, QVBoxLayout, QHBoxLayout, QLabel, QPushButton,&#10;    QTableWidget, QTableWidgetItem, QGroupBox, QGridLayout,&#10;    QComboBox, QLineEdit, QDateEdit, QTabWidget,&#10;    QHeaderView, QMessageBox, QFileDialog, QDialog,&#10;    QDialogButtonBox, QCheckBox&#10;)&#10;from PyQt6.QtCore import Qt, QDate&#10;from PyQt6.QtGui import QFont&#10;from datetime import datetime&#10;import csv&#10;import os&#10;from database.db_manager import DatabaseManager&#10;from gui.utils.expense_loader import ExpenseLoader&#10;&#10;class BudgetTab(QWidget):&#10;    def __init__(self):&#10;        super().__init__()&#10;        self.db = DatabaseManager()&#10;        self.init_ui()&#10;        &#10;    def init_ui(self):&#10;        &quot;&quot;&quot;Initialize the UI with Income and Expenses sub-tabs&quot;&quot;&quot;&#10;        layout = QVBoxLayout()&#10;        &#10;        # Header&#10;        header_layout = QHBoxLayout()&#10;        title = QLabel(&quot;Budget Management&quot;)&#10;        title.setFont(QFont(&quot;Arial&quot;, 18, QFont.Weight.Bold))&#10;        header_layout.addWidget(title)&#10;        header_layout.addStretch()&#10;        &#10;        layout.addLayout(header_layout)&#10;        &#10;        # Create sub-tabs for Income and Expenses&#10;        self.sub_tabs = QTabWidget()&#10;        &#10;        # Income Tab&#10;        self.income_tab = IncomeSubTab()&#10;        self.sub_tabs.addTab(self.income_tab, &quot; Income&quot;)&#10;        &#10;        # Expenses Tab&#10;        self.expenses_tab = ExpensesSubTab()&#10;        self.sub_tabs.addTab(self.expenses_tab, &quot; Expenses&quot;)&#10;        &#10;        layout.addWidget(self.sub_tabs)&#10;        self.setLayout(layout)&#10;        &#10;    def refresh_data(self):&#10;        &quot;&quot;&quot;Refresh data in both sub-tabs&quot;&quot;&quot;&#10;        self.income_tab.refresh_data()&#10;        self.expenses_tab.refresh_data()&#10;&#10;&#10;class IncomeSubTab(QWidget):&#10;    &quot;&quot;&quot;Sub-tab for managing income entries&quot;&quot;&quot;&#10;    &#10;    def __init__(self):&#10;        super().__init__()&#10;        self.db = DatabaseManager()&#10;        self.init_ui()&#10;        self.refresh_data()&#10;        &#10;    def init_ui(self):&#10;        &quot;&quot;&quot;Initialize the Income UI&quot;&quot;&quot;&#10;        layout = QVBoxLayout()&#10;        &#10;        # Top section - Add Income Form&#10;        form_group = QGroupBox(&quot;Add Income&quot;)&#10;        form_layout = QGridLayout()&#10;        &#10;        # Person selector&#10;        form_layout.addWidget(QLabel(&quot;Person:&quot;), 0, 0)&#10;        self.person_combo = QComboBox()&#10;        self.person_combo.addItems([&quot;Jeff&quot;, &quot;Vanessa&quot;])&#10;        form_layout.addWidget(self.person_combo, 0, 1)&#10;        &#10;        # Amount&#10;        form_layout.addWidget(QLabel(&quot;Amount:&quot;), 0, 2)&#10;        self.amount_input = QLineEdit()&#10;        self.amount_input.setPlaceholderText(&quot;Enter income amount&quot;)&#10;        form_layout.addWidget(self.amount_input, 0, 3)&#10;        &#10;        # Date&#10;        form_layout.addWidget(QLabel(&quot;Date:&quot;), 1, 0)&#10;        self.date_input = QDateEdit()&#10;        self.date_input.setDate(QDate.currentDate())&#10;        self.date_input.setCalendarPopup(True)&#10;        form_layout.addWidget(self.date_input, 1, 1)&#10;        &#10;        # Description&#10;        form_layout.addWidget(QLabel(&quot;Description:&quot;), 1, 2)&#10;        self.description_input = QLineEdit()&#10;        self.description_input.setPlaceholderText(&quot;e.g., Monthly Salary, Bonus, etc.&quot;)&#10;        form_layout.addWidget(self.description_input, 1, 3)&#10;        &#10;        # Add button&#10;        add_btn = QPushButton(&quot;Add Income&quot;)&#10;        add_btn.setStyleSheet(&quot;&quot;&quot;&#10;            QPushButton {&#10;                background-color: #2a82da;&#10;                color: white;&#10;                padding: 8px;&#10;                font-weight: bold;&#10;                border-radius: 4px;&#10;            }&#10;            QPushButton:hover {&#10;                background-color: #1e5fa8;&#10;            }&#10;        &quot;&quot;&quot;)&#10;        add_btn.clicked.connect(self.add_income)&#10;        form_layout.addWidget(add_btn, 2, 0, 1, 4)&#10;        &#10;        form_group.setLayout(form_layout)&#10;        layout.addWidget(form_group)&#10;        &#10;        # Monthly Summary Section&#10;        summary_layout = QHBoxLayout()&#10;        &#10;        # Jeff's Income Summary&#10;        self.jeff_summary = self.create_summary_card(&quot;Jeff's Monthly Income&quot;, &quot;$0.00&quot;)&#10;        summary_layout.addWidget(self.jeff_summary)&#10;        &#10;        # Vanessa's Income Summary&#10;        self.vanessa_summary = self.create_summary_card(&quot;Vanessa's Monthly Income&quot;, &quot;$0.00&quot;)&#10;        summary_layout.addWidget(self.vanessa_summary)&#10;        &#10;        # Total Income Summary&#10;        self.total_summary = self.create_summary_card(&quot;Total Monthly Income&quot;, &quot;$0.00&quot;)&#10;        summary_layout.addWidget(self.total_summary)&#10;        &#10;        layout.addLayout(summary_layout)&#10;        &#10;        # Income History Table&#10;        history_group = QGroupBox(&quot;Income History&quot;)&#10;        history_layout = QVBoxLayout()&#10;        &#10;        # Filter controls&#10;        filter_layout = QHBoxLayout()&#10;        &#10;        filter_layout.addWidget(QLabel(&quot;Filter by:&quot;))&#10;        &#10;        self.filter_person = QComboBox()&#10;        self.filter_person.addItems([&quot;All&quot;, &quot;Jeff&quot;, &quot;Vanessa&quot;])&#10;        self.filter_person.currentTextChanged.connect(self.refresh_data)&#10;        filter_layout.addWidget(self.filter_person)&#10;        &#10;        filter_layout.addWidget(QLabel(&quot;Month:&quot;))&#10;        self.filter_month = QComboBox()&#10;        self.filter_month.addItems([&#10;            &quot;All&quot;, &quot;January&quot;, &quot;February&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;, &quot;June&quot;,&#10;            &quot;July&quot;, &quot;August&quot;, &quot;September&quot;, &quot;October&quot;, &quot;November&quot;, &quot;December&quot;&#10;        ])&#10;        self.filter_month.setCurrentIndex(datetime.now().month)&#10;        self.filter_month.currentIndexChanged.connect(self.refresh_data)&#10;        filter_layout.addWidget(self.filter_month)&#10;        &#10;        filter_layout.addWidget(QLabel(&quot;Year:&quot;))&#10;        self.filter_year = QComboBox()&#10;        current_year = datetime.now().year&#10;        self.filter_year.addItems([&quot;All&quot;] + [str(year) for year in range(current_year - 2, current_year + 2)])&#10;        self.filter_year.setCurrentText(str(current_year))&#10;        self.filter_year.currentTextChanged.connect(self.refresh_data)&#10;        filter_layout.addWidget(self.filter_year)&#10;        &#10;        filter_layout.addStretch()&#10;        &#10;        # Delete button&#10;        delete_btn = QPushButton(&quot;Delete Selected&quot;)&#10;        delete_btn.clicked.connect(self.delete_selected_income)&#10;        filter_layout.addWidget(delete_btn)&#10;        &#10;        history_layout.addLayout(filter_layout)&#10;        &#10;        # Income table&#10;        self.income_table = QTableWidget()&#10;        self.income_table.setColumnCount(5)&#10;        self.income_table.setHorizontalHeaderLabels([&#10;            &quot;Date&quot;, &quot;Person&quot;, &quot;Amount&quot;, &quot;Description&quot;, &quot;ID&quot;&#10;        ])&#10;        self.income_table.hideColumn(4)  # Hide ID column&#10;        &#10;        # Set column widths&#10;        header = self.income_table.horizontalHeader()&#10;        header.setSectionResizeMode(0, QHeaderView.ResizeMode.ResizeToContents)&#10;        header.setSectionResizeMode(1, QHeaderView.ResizeMode.ResizeToContents)&#10;        header.setSectionResizeMode(2, QHeaderView.ResizeMode.ResizeToContents)&#10;        header.setSectionResizeMode(3, QHeaderView.ResizeMode.Stretch)&#10;        &#10;        history_layout.addWidget(self.income_table)&#10;        history_group.setLayout(history_layout)&#10;        &#10;        layout.addWidget(history_group)&#10;        self.setLayout(layout)&#10;        &#10;    def create_summary_card(self, title, value):&#10;        &quot;&quot;&quot;Create a summary card widget&quot;&quot;&quot;&#10;        group = QGroupBox(title)&#10;        group.setStyleSheet(&quot;&quot;&quot;&#10;            QGroupBox {&#10;                font-weight: bold;&#10;                border: 2px solid #555;&#10;                border-radius: 5px;&#10;                margin-top: 10px;&#10;                padding-top: 10px;&#10;            }&#10;        &quot;&quot;&quot;)&#10;        &#10;        layout = QVBoxLayout()&#10;        value_label = QLabel(value)&#10;        value_label.setAlignment(Qt.AlignmentFlag.AlignCenter)&#10;        value_label.setFont(QFont(&quot;Arial&quot;, 16, QFont.Weight.Bold))&#10;        value_label.setStyleSheet(&quot;color: #2a82da;&quot;)&#10;        layout.addWidget(value_label)&#10;        &#10;        group.setLayout(layout)&#10;        group.value_label = value_label  # Store reference for updating&#10;        return group&#10;        &#10;    def add_income(self):&#10;        &quot;&quot;&quot;Add income entry to database&quot;&quot;&quot;&#10;        try:&#10;            person = self.person_combo.currentText()&#10;            amount_text = self.amount_input.text().strip()&#10;            date = self.date_input.date().toString(&quot;yyyy-MM-dd&quot;)&#10;            description = self.description_input.text().strip()&#10;            &#10;            # Validate amount&#10;            if not amount_text:&#10;                QMessageBox.warning(self, &quot;Warning&quot;, &quot;Please enter an amount&quot;)&#10;                return&#10;                &#10;            try:&#10;                amount = float(amount_text.replace(&quot;,&quot;, &quot;&quot;).replace(&quot;$&quot;, &quot;&quot;))&#10;            except ValueError:&#10;                QMessageBox.warning(self, &quot;Warning&quot;, &quot;Please enter a valid number for amount&quot;)&#10;                return&#10;            &#10;            # Add to database&#10;            self.db.add_income(person, amount, date, description)&#10;            &#10;            # Clear form&#10;            self.amount_input.clear()&#10;            self.description_input.clear()&#10;            &#10;            # Refresh display&#10;            self.refresh_data()&#10;            &#10;            QMessageBox.information(self, &quot;Success&quot;, &quot;Income added successfully!&quot;)&#10;            &#10;        except Exception as e:&#10;            QMessageBox.critical(self, &quot;Error&quot;, f&quot;Failed to add income: {str(e)}&quot;)&#10;            &#10;    def delete_selected_income(self):&#10;        &quot;&quot;&quot;Delete selected income entries&quot;&quot;&quot;&#10;        selected_rows = []&#10;        for row in range(self.income_table.rowCount()):&#10;            if self.income_table.item(row, 0) and self.income_table.item(row, 0).isSelected():&#10;                selected_rows.append(row)&#10;            elif any(self.income_table.item(row, col) and self.income_table.item(row, col).isSelected()&#10;                    for col in range(self.income_table.columnCount())):&#10;                selected_rows.append(row)&#10;&#10;        if not selected_rows:&#10;            QMessageBox.warning(self, &quot;Warning&quot;, &quot;Please select one or more income entries to delete.&quot;)&#10;            return&#10;&#10;        # Confirm deletion&#10;        reply = QMessageBox.question(&#10;            self,&#10;            &quot;Confirm Deletion&quot;,&#10;            f&quot;Are you sure you want to delete {len(selected_rows)} income entr{'y' if len(selected_rows) == 1 else 'ies'}?\n\nThis action cannot be undone.&quot;,&#10;            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,&#10;            QMessageBox.StandardButton.No&#10;        )&#10;&#10;        if reply != QMessageBox.StandardButton.Yes:&#10;            return&#10;&#10;        try:&#10;            # Delete each selected income entry&#10;            deleted_count = 0&#10;            for row in reversed(selected_rows):  # Reverse to maintain row indices&#10;                income_id_item = self.income_table.item(row, 4)  # ID is in column 4&#10;                if income_id_item:&#10;                    income_id = int(income_id_item.text())&#10;&#10;                    # Delete from database using the model's delete method&#10;                    from database.models import IncomeModel&#10;                    IncomeModel.delete(self.db, income_id)&#10;                    deleted_count += 1&#10;&#10;            # Refresh the table&#10;            self.refresh_data()&#10;&#10;            QMessageBox.information(&#10;                self,&#10;                &quot;Success&quot;,&#10;                f&quot;Successfully deleted {deleted_count} income entr{'y' if deleted_count == 1 else 'ies'}.&quot;&#10;            )&#10;&#10;        except Exception as e:&#10;            QMessageBox.critical(self, &quot;Error&quot;, f&quot;Failed to delete income entries: {str(e)}&quot;)&#10;&#10;    def refresh_data(self):&#10;        &quot;&quot;&quot;Refresh the income data display&quot;&quot;&quot;&#10;        try:&#10;            # Build filter parameters&#10;            person_filter = None if self.filter_person.currentText() == &quot;All&quot; else self.filter_person.currentText()&#10;            &#10;            # Date filters&#10;            start_date = None&#10;            end_date = None&#10;            &#10;            if self.filter_month.currentIndex() &gt; 0 and self.filter_year.currentText() != &quot;All&quot;:&#10;                year = int(self.filter_year.currentText())&#10;                month = self.filter_month.currentIndex()&#10;                start_date = f&quot;{year:04d}-{month:02d}-01&quot;&#10;                if month == 12:&#10;                    end_date = f&quot;{year+1:04d}-01-01&quot;&#10;                else:&#10;                    end_date = f&quot;{year:04d}-{month+1:02d}-01&quot;&#10;            &#10;            # Get income data&#10;            income_data = self.db.get_income(start_date, end_date, person_filter)&#10;            &#10;            # Clear and populate table&#10;            self.income_table.setRowCount(0)&#10;            &#10;            jeff_total = 0&#10;            vanessa_total = 0&#10;            &#10;            for income in income_data:&#10;                row = self.income_table.rowCount()&#10;                self.income_table.insertRow(row)&#10;                &#10;                self.income_table.setItem(row, 0, QTableWidgetItem(income['date']))&#10;                self.income_table.setItem(row, 1, QTableWidgetItem(income['person']))&#10;                &#10;                amount = income['amount']&#10;                self.income_table.setItem(row, 2, QTableWidgetItem(f&quot;${amount:,.2f}&quot;))&#10;                self.income_table.setItem(row, 3, QTableWidgetItem(income.get('description', '')))&#10;                self.income_table.setItem(row, 4, QTableWidgetItem(str(income['id'])))&#10;                &#10;                # Calculate totals for current month&#10;                if income['person'] == 'Jeff':&#10;                    jeff_total += amount&#10;                else:&#10;                    vanessa_total += amount&#10;            &#10;            # Update summary cards&#10;            self.jeff_summary.value_label.setText(f&quot;${jeff_total:,.2f}&quot;)&#10;            self.vanessa_summary.value_label.setText(f&quot;${vanessa_total:,.2f}&quot;)&#10;            self.total_summary.value_label.setText(f&quot;${jeff_total + vanessa_total:,.2f}&quot;)&#10;            &#10;        except Exception as e:&#10;            print(f&quot;Error refreshing income data: {e}&quot;)&#10;&#10;&#10;class ExpensesSubTab(QWidget):&#10;    &quot;&quot;&quot;Sub-tab for managing expense entries&quot;&quot;&quot;&#10;    &#10;    def __init__(self):&#10;        super().__init__()&#10;        self.db = DatabaseManager()&#10;        self.categories_data = {}&#10;        self.init_ui()&#10;        self.load_categories()&#10;        self.refresh_data()&#10;        &#10;    def init_ui(self):&#10;        &quot;&quot;&quot;Initialize the Expenses UI&quot;&quot;&quot;&#10;        layout = QVBoxLayout()&#10;        &#10;        # Top section - Add Expense Form&#10;        form_group = QGroupBox(&quot;Add Expense&quot;)&#10;        form_layout = QGridLayout()&#10;        &#10;        # Row 1&#10;        form_layout.addWidget(QLabel(&quot;Person:&quot;), 0, 0)&#10;        self.person_combo = QComboBox()&#10;        self.person_combo.addItems([&quot;Jeff&quot;, &quot;Vanessa&quot;])&#10;        form_layout.addWidget(self.person_combo, 0, 1)&#10;        &#10;        form_layout.addWidget(QLabel(&quot;Amount:&quot;), 0, 2)&#10;        self.amount_input = QLineEdit()&#10;        self.amount_input.setPlaceholderText(&quot;Enter expense amount&quot;)&#10;        form_layout.addWidget(self.amount_input, 0, 3)&#10;        &#10;        form_layout.addWidget(QLabel(&quot;Date:&quot;), 0, 4)&#10;        self.date_input = QDateEdit()&#10;        self.date_input.setDate(QDate.currentDate())&#10;        self.date_input.setCalendarPopup(True)&#10;        form_layout.addWidget(self.date_input, 0, 5)&#10;        &#10;        # Row 2&#10;        form_layout.addWidget(QLabel(&quot;Category:&quot;), 1, 0)&#10;        self.category_combo = QComboBox()&#10;        self.category_combo.currentTextChanged.connect(self.on_category_changed)&#10;        form_layout.addWidget(self.category_combo, 1, 1)&#10;        &#10;        form_layout.addWidget(QLabel(&quot;Subcategory:&quot;), 1, 2)&#10;        self.subcategory_combo = QComboBox()&#10;        form_layout.addWidget(self.subcategory_combo, 1, 3)&#10;        &#10;        form_layout.addWidget(QLabel(&quot;Payment Method:&quot;), 1, 4)&#10;        self.payment_combo = QComboBox()&#10;        self.payment_combo.addItems([&quot;Cash&quot;, &quot;Credit Card&quot;, &quot;Debit Card&quot;, &quot;Check&quot;, &quot;Transfer&quot;, &quot;Other&quot;])&#10;        form_layout.addWidget(self.payment_combo, 1, 5)&#10;        &#10;        # Row 3&#10;        form_layout.addWidget(QLabel(&quot;Description:&quot;), 2, 0)&#10;        self.description_input = QLineEdit()&#10;        self.description_input.setPlaceholderText(&quot;Optional description&quot;)&#10;        form_layout.addWidget(self.description_input, 2, 1, 1, 4)&#10;&#10;        # Add realized checkbox&#10;        self.realized_checkbox = QCheckBox(&quot;Already taken from joint checking&quot;)&#10;        self.realized_checkbox.setToolTip(&quot;Check if this expense has already been paid from the joint checking account&quot;)&#10;        form_layout.addWidget(self.realized_checkbox, 2, 5)&#10;&#10;        # Row 4 - Buttons&#10;        button_layout = QHBoxLayout()&#10;        &#10;        add_btn = QPushButton(&quot;Add Expense&quot;)&#10;        add_btn.setStyleSheet(&quot;&quot;&quot;&#10;            QPushButton {&#10;                background-color: #2a82da;&#10;                color: white;&#10;                padding: 8px;&#10;                font-weight: bold;&#10;                border-radius: 4px;&#10;            }&#10;            QPushButton:hover {&#10;                background-color: #1e5fa8;&#10;            }&#10;        &quot;&quot;&quot;)&#10;        add_btn.clicked.connect(self.add_expense)&#10;        button_layout.addWidget(add_btn)&#10;        &#10;        import_btn = QPushButton(&quot;Import from File&quot;)&#10;        import_btn.setStyleSheet(&quot;&quot;&quot;&#10;            QPushButton {&#10;                background-color: #5cb85c;&#10;                color: white;&#10;                padding: 8px;&#10;                font-weight: bold;&#10;                border-radius: 4px;&#10;            }&#10;            QPushButton:hover {&#10;                background-color: #449d44;&#10;            }&#10;        &quot;&quot;&quot;)&#10;        import_btn.clicked.connect(self.import_expenses)&#10;        button_layout.addWidget(import_btn)&#10;        &#10;        button_layout.addStretch()&#10;        &#10;        form_layout.addLayout(button_layout, 3, 0, 1, 6)&#10;        &#10;        form_group.setLayout(form_layout)&#10;        layout.addWidget(form_group)&#10;        &#10;        # Monthly Summary Section&#10;        summary_layout = QHBoxLayout()&#10;        &#10;        # Jeff's Expenses Summary&#10;        self.jeff_summary = self.create_summary_card(&quot;Jeff's Monthly Expenses&quot;, &quot;$0.00&quot;)&#10;        summary_layout.addWidget(self.jeff_summary)&#10;        &#10;        # Vanessa's Expenses Summary&#10;        self.vanessa_summary = self.create_summary_card(&quot;Vanessa's Monthly Expenses&quot;, &quot;$0.00&quot;)&#10;        summary_layout.addWidget(self.vanessa_summary)&#10;        &#10;        # Total Expenses Summary&#10;        self.total_summary = self.create_summary_card(&quot;Total Monthly Expenses&quot;, &quot;$0.00&quot;)&#10;        summary_layout.addWidget(self.total_summary)&#10;        &#10;        # Top Category Summary&#10;        self.top_category_summary = self.create_summary_card(&quot;Top Category&quot;, &quot;None&quot;)&#10;        summary_layout.addWidget(self.top_category_summary)&#10;        &#10;        layout.addLayout(summary_layout)&#10;        &#10;        # Expense History Table&#10;        history_group = QGroupBox(&quot;Expense History&quot;)&#10;        history_layout = QVBoxLayout()&#10;        &#10;        # Filter controls&#10;        filter_layout = QHBoxLayout()&#10;        &#10;        filter_layout.addWidget(QLabel(&quot;Filter by:&quot;))&#10;        &#10;        self.filter_person = QComboBox()&#10;        self.filter_person.addItems([&quot;All&quot;, &quot;Jeff&quot;, &quot;Vanessa&quot;])&#10;        self.filter_person.currentTextChanged.connect(self.refresh_data)&#10;        filter_layout.addWidget(self.filter_person)&#10;        &#10;        self.filter_category = QComboBox()&#10;        self.filter_category.addItems([&quot;All Categories&quot;])&#10;        self.filter_category.currentTextChanged.connect(self.refresh_data)&#10;        filter_layout.addWidget(self.filter_category)&#10;        &#10;        filter_layout.addWidget(QLabel(&quot;Month:&quot;))&#10;        self.filter_month = QComboBox()&#10;        self.filter_month.addItems([&#10;            &quot;All&quot;, &quot;January&quot;, &quot;February&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;, &quot;June&quot;,&#10;            &quot;July&quot;, &quot;August&quot;, &quot;September&quot;, &quot;October&quot;, &quot;November&quot;, &quot;December&quot;&#10;        ])&#10;        self.filter_month.setCurrentIndex(datetime.now().month)&#10;        self.filter_month.currentIndexChanged.connect(self.refresh_data)&#10;        filter_layout.addWidget(self.filter_month)&#10;        &#10;        filter_layout.addWidget(QLabel(&quot;Year:&quot;))&#10;        self.filter_year = QComboBox()&#10;        current_year = datetime.now().year&#10;        self.filter_year.addItems([&quot;All&quot;] + [str(year) for year in range(current_year - 2, current_year + 2)])&#10;        self.filter_year.setCurrentText(str(current_year))&#10;        self.filter_year.currentTextChanged.connect(self.refresh_data)&#10;        filter_layout.addWidget(self.filter_year)&#10;        &#10;        filter_layout.addStretch()&#10;        &#10;        # Export and Delete buttons&#10;        export_btn = QPushButton(&quot;Export to CSV&quot;)&#10;        export_btn.clicked.connect(self.export_expenses)&#10;        filter_layout.addWidget(export_btn)&#10;        &#10;        delete_btn = QPushButton(&quot;Delete Selected&quot;)&#10;        delete_btn.clicked.connect(self.delete_selected_expenses)&#10;        filter_layout.addWidget(delete_btn)&#10;        &#10;        history_layout.addLayout(filter_layout)&#10;        &#10;        # Expense table&#10;        self.expense_table = QTableWidget()&#10;        self.expense_table.setColumnCount(8)&#10;        self.expense_table.setHorizontalHeaderLabels([&#10;            &quot;Date&quot;, &quot;Person&quot;, &quot;Amount&quot;, &quot;Category&quot;, &quot;Subcategory&quot;, &#10;            &quot;Description&quot;, &quot;Payment&quot;, &quot;ID&quot;&#10;        ])&#10;        self.expense_table.hideColumn(7)  # Hide ID column&#10;        &#10;        # Set column widths&#10;        header = self.expense_table.horizontalHeader()&#10;        for i in range(7):&#10;            if i == 5:  # Description column&#10;                header.setSectionResizeMode(i, QHeaderView.ResizeMode.Stretch)&#10;            else:&#10;                header.setSectionResizeMode(i, QHeaderView.ResizeMode.ResizeToContents)&#10;        &#10;        history_layout.addWidget(self.expense_table)&#10;        history_group.setLayout(history_layout)&#10;        &#10;        layout.addWidget(history_group)&#10;        self.setLayout(layout)&#10;        &#10;    def create_summary_card(self, title, value):&#10;        &quot;&quot;&quot;Create a summary card widget&quot;&quot;&quot;&#10;        group = QGroupBox(title)&#10;        group.setStyleSheet(&quot;&quot;&quot;&#10;            QGroupBox {&#10;                font-weight: bold;&#10;                border: 2px solid #555;&#10;                border-radius: 5px;&#10;                margin-top: 10px;&#10;                padding-top: 10px;&#10;                min-width: 150px;&#10;            }&#10;        &quot;&quot;&quot;)&#10;        &#10;        layout = QVBoxLayout()&#10;        value_label = QLabel(value)&#10;        value_label.setAlignment(Qt.AlignmentFlag.AlignCenter)&#10;        value_label.setFont(QFont(&quot;Arial&quot;, 14, QFont.Weight.Bold))&#10;        value_label.setStyleSheet(&quot;color: #d9534f;&quot;)&#10;        layout.addWidget(value_label)&#10;        &#10;        group.setLayout(layout)&#10;        group.value_label = value_label  # Store reference for updating&#10;        return group&#10;        &#10;    def load_categories(self):&#10;        &quot;&quot;&quot;Load categories from database&quot;&quot;&quot;&#10;        try:&#10;            categories = self.db.get_categories()&#10;            &#10;            # Organize categories&#10;            self.categories_data = {}&#10;            for cat in categories:&#10;                category = cat['category']&#10;                subcategory = cat['subcategory']&#10;                &#10;                if category not in self.categories_data:&#10;                    self.categories_data[category] = []&#10;                self.categories_data[category].append(subcategory)&#10;            &#10;            # Populate category combo&#10;            self.category_combo.clear()&#10;            self.category_combo.addItems(sorted(self.categories_data.keys()))&#10;            &#10;            # Populate filter category combo&#10;            self.filter_category.clear()&#10;            self.filter_category.addItems([&quot;All Categories&quot;] + sorted(self.categories_data.keys()))&#10;            &#10;        except Exception as e:&#10;            print(f&quot;Error loading categories: {e}&quot;)&#10;            &#10;    def on_category_changed(self, category):&#10;        &quot;&quot;&quot;Update subcategories when category changes&quot;&quot;&quot;&#10;        self.subcategory_combo.clear()&#10;        if category in self.categories_data:&#10;            self.subcategory_combo.addItems(self.categories_data[category])&#10;            &#10;    def add_expense(self):&#10;        &quot;&quot;&quot;Add expense entry to database&quot;&quot;&quot;&#10;        try:&#10;            person = self.person_combo.currentText()&#10;            amount_text = self.amount_input.text().strip()&#10;            date = self.date_input.date().toString(&quot;yyyy-MM-dd&quot;)&#10;            category = self.category_combo.currentText()&#10;            subcategory = self.subcategory_combo.currentText()&#10;            description = self.description_input.text().strip()&#10;            payment_method = self.payment_combo.currentText()&#10;            realized = self.realized_checkbox.isChecked()  # Get realized status&#10;&#10;            # Validate inputs&#10;            if not amount_text:&#10;                QMessageBox.warning(self, &quot;Warning&quot;, &quot;Please enter an amount&quot;)&#10;                return&#10;                &#10;            if not category or not subcategory:&#10;                QMessageBox.warning(self, &quot;Warning&quot;, &quot;Please select category and subcategory&quot;)&#10;                return&#10;                &#10;            try:&#10;                amount = float(amount_text.replace(&quot;,&quot;, &quot;&quot;).replace(&quot;$&quot;, &quot;&quot;))&#10;            except ValueError:&#10;                QMessageBox.warning(self, &quot;Warning&quot;, &quot;Please enter a valid number for amount&quot;)&#10;                return&#10;            &#10;            # Add to database using the updated ExpenseModel.add method&#10;            from database.models import ExpenseModel&#10;            ExpenseModel.add(self.db, date, person, amount, category, subcategory,&#10;                           description, payment_method, realized)&#10;&#10;            # Clear form&#10;            self.amount_input.clear()&#10;            self.description_input.clear()&#10;            self.realized_checkbox.setChecked(False)  # Reset checkbox&#10;&#10;            # Refresh display&#10;            self.refresh_data()&#10;            &#10;            QMessageBox.information(self, &quot;Success&quot;, &quot;Expense added successfully!&quot;)&#10;            &#10;        except Exception as e:&#10;            QMessageBox.critical(self, &quot;Error&quot;, f&quot;Failed to add expense: {str(e)}&quot;)&#10;            &#10;    def import_expenses(self):&#10;        &quot;&quot;&quot;Import expenses from CSV or TXT file using ExpenseLoader&quot;&quot;&quot;&#10;        try:&#10;            file_path, _ = QFileDialog.getOpenFileName(&#10;                self, &#10;                &quot;Import Expenses&quot;, &#10;                &quot;&quot;, &#10;                &quot;CSV Files (*.csv);;Text Files (*.txt);;All Files (*.*)&quot;&#10;            )&#10;            &#10;            if not file_path:&#10;                return&#10;            &#10;            # Use ExpenseLoader to parse the file&#10;            loader = ExpenseLoader()&#10;            expenses = []&#10;            errors = []&#10;&#10;            if file_path.lower().endswith('.csv'):&#10;                expenses, errors = loader.load_csv_file(file_path)&#10;            elif file_path.lower().endswith('.txt'):&#10;                expenses, errors = loader.load_txt_file(file_path)&#10;            else:&#10;                # Try CSV first, then TXT&#10;                expenses, errors = loader.load_csv_file(file_path)&#10;                if not expenses and not errors:&#10;                    expenses, errors = loader.load_txt_file(file_path)&#10;&#10;            # Show errors if any&#10;            if errors:&#10;                error_dialog = QMessageBox()&#10;                error_dialog.setWindowTitle(&quot;Import Warnings&quot;)&#10;                error_dialog.setIcon(QMessageBox.Icon.Warning)&#10;                error_dialog.setText(f&quot;Found {len(errors)} issues while parsing the file:&quot;)&#10;                error_dialog.setDetailedText(&quot;\n&quot;.join(errors))&#10;                error_dialog.exec()&#10;&#10;            if not expenses:&#10;                QMessageBox.warning(self, &quot;Warning&quot;, &quot;No valid expenses found in the file&quot;)&#10;                return&#10;&#10;            # Validate expenses&#10;            valid_expenses, validation_errors = loader.validate_expenses(expenses)&#10;&#10;            if validation_errors:&#10;                error_dialog = QMessageBox()&#10;                error_dialog.setWindowTitle(&quot;Validation Errors&quot;)&#10;                error_dialog.setIcon(QMessageBox.Icon.Warning)&#10;                error_dialog.setText(f&quot;Found {len(validation_errors)} validation issues:&quot;)&#10;                error_dialog.setDetailedText(&quot;\n&quot;.join(validation_errors))&#10;                error_dialog.exec()&#10;&#10;            if not valid_expenses:&#10;                QMessageBox.warning(self, &quot;Warning&quot;, &quot;No valid expenses after validation&quot;)&#10;                return&#10;&#10;            # Use the new BulkImportPreviewDialog with proper category handling&#10;            from gui.utils.bulk_import_dialog import BulkImportPreviewDialog&#10;            &#10;            # Get categories from the loader to ensure they match&#10;            loader_categories = loader.get_available_categories()&#10;            &#10;            # Show preview dialog with loader categories&#10;            preview_dialog = BulkImportPreviewDialog(valid_expenses, loader_categories, self)&#10;            if preview_dialog.exec() == QDialog.DialogCode.Accepted:&#10;                final_expenses = preview_dialog.get_selected_expenses()&#10;&#10;                if final_expenses:&#10;                    # Add to database&#10;                    self.db.bulk_add_expenses(final_expenses)&#10;                    self.refresh_data()&#10;&#10;                    QMessageBox.information(&#10;                        self, &#10;                        &quot;Success&quot;, &#10;                        f&quot;Successfully imported {len(final_expenses)} expenses!\n\n&quot;&#10;                        f&quot;Parsing errors: {len(errors)}\n&quot;&#10;                        f&quot;Validation errors: {len(validation_errors)}\n&quot;&#10;                        f&quot;Successfully imported: {len(final_expenses)}&quot;&#10;                    )&#10;                    &#10;        except Exception as e:&#10;            QMessageBox.critical(self, &quot;Error&quot;, f&quot;Failed to import expenses: {str(e)}&quot;)&#10;            print(f&quot;Import error details: {e}&quot;)  # For debugging&#10;            &#10;    def export_expenses(self):&#10;        &quot;&quot;&quot;Export expenses to CSV file&quot;&quot;&quot;&#10;        try:&#10;            file_path, _ = QFileDialog.getSaveFileName(&#10;                self,&#10;                &quot;Export Expenses&quot;,&#10;                f&quot;expenses_{datetime.now().strftime('%Y%m%d')}.csv&quot;,&#10;                &quot;CSV Files (*.csv)&quot;&#10;            )&#10;            &#10;            if not file_path:&#10;                return&#10;                &#10;            # Get current filter settings&#10;            person_filter = None if self.filter_person.currentText() == &quot;All&quot; else self.filter_person.currentText()&#10;            category_filter = None if self.filter_category.currentText() == &quot;All Categories&quot; else self.filter_category.currentText()&#10;            &#10;            # Build date filters&#10;            start_date = None&#10;            end_date = None&#10;            &#10;            if self.filter_month.currentIndex() &gt; 0 and self.filter_year.currentText() != &quot;All&quot;:&#10;                year = int(self.filter_year.currentText())&#10;                month = self.filter_month.currentIndex()&#10;                start_date = f&quot;{year:04d}-{month:02d}-01&quot;&#10;                if month == 12:&#10;                    end_date = f&quot;{year+1:04d}-01-01&quot;&#10;                else:&#10;                    end_date = f&quot;{year:04d}-{month+1:02d}-01&quot;&#10;            &#10;            # Get expense data&#10;            expenses = self.db.get_expenses(start_date, end_date, person_filter, category_filter)&#10;            &#10;            # Write to CSV&#10;            with open(file_path, 'w', newline='') as csvfile:&#10;                fieldnames = ['date', 'person', 'amount', 'category', 'subcategory', &#10;                            'description', 'payment_method']&#10;                writer = csv.DictWriter(csvfile, fieldnames=fieldnames)&#10;                &#10;                writer.writeheader()&#10;                for expense in expenses:&#10;                    writer.writerow({&#10;                        'date': expense['date'],&#10;                        'person': expense['person'],&#10;                        'amount': expense['amount'],&#10;                        'category': expense['category'],&#10;                        'subcategory': expense['subcategory'],&#10;                        'description': expense.get('description', ''),&#10;                        'payment_method': expense.get('payment_method', '')&#10;                    })&#10;            &#10;            QMessageBox.information(self, &quot;Success&quot;, f&quot;Expenses exported to {file_path}&quot;)&#10;            &#10;        except Exception as e:&#10;            QMessageBox.critical(self, &quot;Error&quot;, f&quot;Failed to export expenses: {str(e)}&quot;)&#10;            &#10;    def delete_selected_expenses(self):&#10;        &quot;&quot;&quot;Delete selected expense entries&quot;&quot;&quot;&#10;        selected_rows = []&#10;        for row in range(self.expense_table.rowCount()):&#10;            if self.expense_table.item(row, 0) and self.expense_table.item(row, 0).isSelected():&#10;                selected_rows.append(row)&#10;            elif any(self.expense_table.item(row, col) and self.expense_table.item(row, col).isSelected()&#10;                    for col in range(self.expense_table.columnCount())):&#10;                selected_rows.append(row)&#10;&#10;        if not selected_rows:&#10;            QMessageBox.warning(self, &quot;Warning&quot;, &quot;Please select one or more expense entries to delete.&quot;)&#10;            return&#10;&#10;        # Confirm deletion&#10;        reply = QMessageBox.question(&#10;            self,&#10;            &quot;Confirm Deletion&quot;,&#10;            f&quot;Are you sure you want to delete {len(selected_rows)} expense entr{'y' if len(selected_rows) == 1 else 'ies'}?\n\nThis action cannot be undone.&quot;,&#10;            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,&#10;            QMessageBox.StandardButton.No&#10;        )&#10;&#10;        if reply != QMessageBox.StandardButton.Yes:&#10;            return&#10;&#10;        try:&#10;            # Delete each selected expense entry&#10;            deleted_count = 0&#10;            for row in reversed(selected_rows):  # Reverse to maintain row indices&#10;                expense_id_item = self.expense_table.item(row, 7)  # ID is in column 7&#10;                if expense_id_item:&#10;                    expense_id = int(expense_id_item.text())&#10;&#10;                    # Delete from database using the model's delete method&#10;                    from database.models import ExpenseModel&#10;                    ExpenseModel.delete(self.db, expense_id)&#10;                    deleted_count += 1&#10;&#10;            # Refresh the table&#10;            self.refresh_data()&#10;&#10;            QMessageBox.information(&#10;                self,&#10;                &quot;Success&quot;,&#10;                f&quot;Successfully deleted {deleted_count} expense entr{'y' if deleted_count == 1 else 'ies'}.&quot;&#10;            )&#10;&#10;        except Exception as e:&#10;            QMessageBox.critical(self, &quot;Error&quot;, f&quot;Failed to delete expense entries: {str(e)}&quot;)&#10;&#10;    def refresh_data(self):&#10;        &quot;&quot;&quot;Refresh the expense data display&quot;&quot;&quot;&#10;        try:&#10;            # Build filter parameters&#10;            person_filter = None if self.filter_person.currentText() == &quot;All&quot; else self.filter_person.currentText()&#10;            category_filter = None if self.filter_category.currentText() == &quot;All Categories&quot; else self.filter_category.currentText()&#10;            &#10;            # Date filters&#10;            start_date = None&#10;            end_date = None&#10;            &#10;            if self.filter_month.currentIndex() &gt; 0 and self.filter_year.currentText() != &quot;All&quot;:&#10;                year = int(self.filter_year.currentText())&#10;                month = self.filter_month.currentIndex()&#10;                start_date = f&quot;{year:04d}-{month:02d}-01&quot;&#10;                if month == 12:&#10;                    end_date = f&quot;{year+1:04d}-01-01&quot;&#10;                else:&#10;                    end_date = f&quot;{year:04d}-{month+1:02d}-01&quot;&#10;            &#10;            # Get expense data&#10;            expense_data = self.db.get_expenses(start_date, end_date, person_filter, category_filter)&#10;            &#10;            # Clear and populate table&#10;            self.expense_table.setRowCount(0)&#10;            &#10;            jeff_total = 0&#10;            vanessa_total = 0&#10;            category_totals = {}&#10;            &#10;            for expense in expense_data:&#10;                row = self.expense_table.rowCount()&#10;                self.expense_table.insertRow(row)&#10;                &#10;                self.expense_table.setItem(row, 0, QTableWidgetItem(expense['date']))&#10;                self.expense_table.setItem(row, 1, QTableWidgetItem(expense['person']))&#10;                &#10;                amount = expense['amount']&#10;                amount_item = QTableWidgetItem(f&quot;${amount:,.2f}&quot;)&#10;                amount_item.setForeground(Qt.GlobalColor.red)&#10;                self.expense_table.setItem(row, 2, amount_item)&#10;                &#10;                self.expense_table.setItem(row, 3, QTableWidgetItem(expense['category']))&#10;                self.expense_table.setItem(row, 4, QTableWidgetItem(expense['subcategory']))&#10;                self.expense_table.setItem(row, 5, QTableWidgetItem(expense.get('description', '')))&#10;                self.expense_table.setItem(row, 6, QTableWidgetItem(expense.get('payment_method', '')))&#10;                self.expense_table.setItem(row, 7, QTableWidgetItem(str(expense['id'])))&#10;                &#10;                # Calculate totals&#10;                if expense['person'] == 'Jeff':&#10;                    jeff_total += amount&#10;                else:&#10;                    vanessa_total += amount&#10;                    &#10;                # Track category totals&#10;                category = expense['category']&#10;                if category not in category_totals:&#10;                    category_totals[category] = 0&#10;                category_totals[category] += amount&#10;            &#10;            # Update summary cards&#10;            self.jeff_summary.value_label.setText(f&quot;${jeff_total:,.2f}&quot;)&#10;            self.vanessa_summary.value_label.setText(f&quot;${vanessa_total:,.2f}&quot;)&#10;            self.total_summary.value_label.setText(f&quot;${jeff_total + vanessa_total:,.2f}&quot;)&#10;            &#10;            # Find top category&#10;            if category_totals:&#10;                top_category = max(category_totals, key=category_totals.get)&#10;                self.top_category_summary.value_label.setText(&#10;                    f&quot;{top_category}\n${category_totals[top_category]:,.2f}&quot;&#10;                )&#10;            else:&#10;                self.top_category_summary.value_label.setText(&quot;None&quot;)&#10;            &#10;        except Exception as e:&#10;            print(f&quot;Error refreshing expense data: {e}&quot;)&#10;&#10;&#10;class ImportDialog(QDialog):&#10;    &quot;&quot;&quot;Dialog for importing expenses from file&quot;&quot;&quot;&#10;    &#10;    def __init__(self, file_path, categories_data):&#10;        super().__init__()&#10;        self.file_path = file_path&#10;        self.categories_data = categories_data&#10;        self.parsed_expenses = []&#10;        &#10;        self.setWindowTitle(&quot;Import Expenses&quot;)&#10;        self.setModal(True)&#10;        self.setMinimumSize(800, 600)&#10;        &#10;        self.init_ui()&#10;        self.load_file()&#10;        &#10;    def init_ui(self):&#10;        &quot;&quot;&quot;Initialize the import dialog UI&quot;&quot;&quot;&#10;        layout = QVBoxLayout()&#10;        &#10;        # Instructions&#10;        instructions = QLabel(&#10;            &quot;Map the columns from your file to the expense fields. &quot;&#10;            &quot;Select the appropriate column for each field.&quot;&#10;        )&#10;        instructions.setWordWrap(True)&#10;        layout.addWidget(instructions)&#10;        &#10;        # Column mapping section&#10;        mapping_group = QGroupBox(&quot;Column Mapping&quot;)&#10;        mapping_layout = QGridLayout()&#10;        &#10;        self.column_combos = {}&#10;        fields = [&#10;            (&quot;Date&quot;, True),&#10;            (&quot;Amount&quot;, True),&#10;            (&quot;Description&quot;, False),&#10;            (&quot;Category&quot;, False),&#10;            (&quot;Subcategory&quot;, False),&#10;            (&quot;Payment Method&quot;, False)&#10;        ]&#10;        &#10;        for i, (field, required) in enumerate(fields):&#10;            label_text = f&quot;{field}:&quot; if not required else f&quot;{field}*:&quot;&#10;            mapping_layout.addWidget(QLabel(label_text), i, 0)&#10;            &#10;            combo = QComboBox()&#10;            combo.addItem(&quot;-- Not Mapped --&quot;)&#10;            self.column_combos[field] = combo&#10;            mapping_layout.addWidget(combo, i, 1)&#10;            &#10;        # Person assignment&#10;        mapping_layout.addWidget(QLabel(&quot;Assign to:&quot;), len(fields), 0)&#10;        self.person_combo = QComboBox()&#10;        self.person_combo.addItems([&quot;Jeff&quot;, &quot;Vanessa&quot;, &quot;Ask for Each&quot;])&#10;        mapping_layout.addWidget(self.person_combo, len(fields), 1)&#10;        &#10;        # Default category (if not in file)&#10;        mapping_layout.addWidget(QLabel(&quot;Default Category:&quot;), len(fields) + 1, 0)&#10;        self.default_category_combo = QComboBox()&#10;        self.default_category_combo.addItems([&quot;-- Select --&quot;] + list(self.categories_data.keys()))&#10;        mapping_layout.addWidget(self.default_category_combo, len(fields) + 1, 1)&#10;        &#10;        mapping_group.setLayout(mapping_layout)&#10;        layout.addWidget(mapping_group)&#10;        &#10;        # Preview section&#10;        preview_group = QGroupBox(&quot;Preview&quot;)&#10;        preview_layout = QVBoxLayout()&#10;        &#10;        self.preview_table = QTableWidget()&#10;        self.preview_table.setMaximumHeight(200)&#10;        preview_layout.addWidget(self.preview_table)&#10;        &#10;        preview_group.setLayout(preview_layout)&#10;        layout.addWidget(preview_group)&#10;        &#10;        # Dialog buttons&#10;        buttons = QDialogButtonBox(&#10;            QDialogButtonBox.StandardButton.Ok | QDialogButtonBox.StandardButton.Cancel&#10;        )&#10;        buttons.accepted.connect(self.process_import)&#10;        buttons.rejected.connect(self.reject)&#10;        layout.addWidget(buttons)&#10;        &#10;        self.setLayout(layout)&#10;        &#10;    def load_file(self):&#10;        &quot;&quot;&quot;Load and preview the file&quot;&quot;&quot;&#10;        try:&#10;            with open(self.file_path, 'r') as file:&#10;                # Try to detect delimiter&#10;                sample = file.read(1024)&#10;                file.seek(0)&#10;                &#10;                # Detect delimiter&#10;                if '\t' in sample:&#10;                    delimiter = '\t'&#10;                elif ',' in sample:&#10;                    delimiter = ','&#10;                else:&#10;                    delimiter = ','&#10;                &#10;                reader = csv.reader(file, delimiter=delimiter)&#10;                rows = list(reader)&#10;                &#10;                if not rows:&#10;                    QMessageBox.warning(self, &quot;Warning&quot;, &quot;The file appears to be empty&quot;)&#10;                    return&#10;                &#10;                # Assume first row is headers&#10;                headers = rows[0] if rows else []&#10;                data_rows = rows[1:6] if len(rows) &gt; 1 else []  # Preview first 5 data rows&#10;                &#10;                # Update column combos&#10;                for combo in self.column_combos.values():&#10;                    combo.clear()&#10;                    combo.addItem(&quot;-- Not Mapped --&quot;)&#10;                    combo.addItems(headers)&#10;                &#10;                # Try to auto-map columns based on header names&#10;                self.auto_map_columns(headers)&#10;                &#10;                # Update preview table&#10;                self.preview_table.setColumnCount(len(headers))&#10;                self.preview_table.setHorizontalHeaderLabels(headers)&#10;                self.preview_table.setRowCount(len(data_rows))&#10;                &#10;                for i, row in enumerate(data_rows):&#10;                    for j, value in enumerate(row):&#10;                        self.preview_table.setItem(i, j, QTableWidgetItem(value))&#10;                        &#10;        except Exception as e:&#10;            QMessageBox.critical(self, &quot;Error&quot;, f&quot;Failed to load file: {str(e)}&quot;)&#10;            &#10;    def auto_map_columns(self, headers):&#10;        &quot;&quot;&quot;Try to automatically map columns based on header names&quot;&quot;&quot;&#10;        mappings = {&#10;            &quot;Date&quot;: [&quot;date&quot;, &quot;transaction date&quot;, &quot;posted date&quot;, &quot;trans date&quot;],&#10;            &quot;Amount&quot;: [&quot;amount&quot;, &quot;debit&quot;, &quot;charge&quot;, &quot;payment&quot;],&#10;            &quot;Description&quot;: [&quot;description&quot;, &quot;memo&quot;, &quot;merchant&quot;, &quot;details&quot;],&#10;            &quot;Category&quot;: [&quot;category&quot;, &quot;type&quot;],&#10;            &quot;Subcategory&quot;: [&quot;subcategory&quot;, &quot;sub category&quot;, &quot;sub-category&quot;],&#10;            &quot;Payment Method&quot;: [&quot;payment&quot;, &quot;method&quot;, &quot;card&quot;, &quot;account&quot;]&#10;        }&#10;        &#10;        headers_lower = [h.lower() for h in headers]&#10;        &#10;        for field, keywords in mappings.items():&#10;            combo = self.column_combos[field]&#10;            for i, header in enumerate(headers_lower):&#10;                for keyword in keywords:&#10;                    if keyword in header:&#10;                        combo.setCurrentIndex(i + 1)  # +1 because of &quot;-- Not Mapped --&quot;&#10;                        break&#10;                        &#10;    def process_import(self):&#10;        &quot;&quot;&quot;Process the import with the current mapping&quot;&quot;&quot;&#10;        try:&#10;            # Validate required fields are mapped&#10;            date_col = self.column_combos[&quot;Date&quot;].currentIndex() - 1&#10;            amount_col = self.column_combos[&quot;Amount&quot;].currentIndex() - 1&#10;            &#10;            if date_col &lt; 0 or amount_col &lt; 0:&#10;                QMessageBox.warning(self, &quot;Warning&quot;, &quot;Date and Amount columns must be mapped&quot;)&#10;                return&#10;            &#10;            # Read the entire file&#10;            with open(self.file_path, 'r') as file:&#10;                delimiter = '\t' if '\t' in file.read(1024) else ','&#10;                file.seek(0)&#10;                &#10;                reader = csv.reader(file, delimiter=delimiter)&#10;                rows = list(reader)&#10;                &#10;                if len(rows) &lt;= 1:&#10;                    QMessageBox.warning(self, &quot;Warning&quot;, &quot;No data rows found&quot;)&#10;                    return&#10;                &#10;                # Skip header row&#10;                data_rows = rows[1:]&#10;                &#10;                # Process each row&#10;                self.parsed_expenses = []&#10;                person = self.person_combo.currentText()&#10;                &#10;                for row in data_rows:&#10;                    try:&#10;                        expense = {&#10;                            'person': person if person != &quot;Ask for Each&quot; else &quot;Jeff&quot;,  # Default to Jeff&#10;                            'date': row[date_col] if date_col &gt;= 0 else &quot;&quot;,&#10;                            'amount': abs(float(row[amount_col].replace(&quot;,&quot;, &quot;&quot;).replace(&quot;$&quot;, &quot;&quot;))),&#10;                        }&#10;                        &#10;                        # Optional fields&#10;                        desc_col = self.column_combos[&quot;Description&quot;].currentIndex() - 1&#10;                        if desc_col &gt;= 0 and desc_col &lt; len(row):&#10;                            expense['description'] = row[desc_col]&#10;                        else:&#10;                            expense['description'] = &quot;&quot;&#10;                        &#10;                        cat_col = self.column_combos[&quot;Category&quot;].currentIndex() - 1&#10;                        if cat_col &gt;= 0 and cat_col &lt; len(row):&#10;                            expense['category'] = row[cat_col]&#10;                        else:&#10;                            expense['category'] = self.default_category_combo.currentText()&#10;                            &#10;                        subcat_col = self.column_combos[&quot;Subcategory&quot;].currentIndex() - 1&#10;                        if subcat_col &gt;= 0 and subcat_col &lt; len(row):&#10;                            expense['subcategory'] = row[subcat_col]&#10;                        else:&#10;                            # Use first subcategory for the category&#10;                            if expense['category'] in self.categories_data:&#10;                                expense['subcategory'] = self.categories_data[expense['category']][0]&#10;                            else:&#10;                                expense['subcategory'] = &quot;Other&quot;&#10;                        &#10;                        payment_col = self.column_combos[&quot;Payment Method&quot;].currentIndex() - 1&#10;                        if payment_col &gt;= 0 and payment_col &lt; len(row):&#10;                            expense['payment_method'] = row[payment_col]&#10;                        else:&#10;                            expense['payment_method'] = &quot;Credit Card&quot;&#10;                        &#10;                        # Validate and add&#10;                        if expense['date'] and expense['amount'] &gt; 0:&#10;                            self.parsed_expenses.append(expense)&#10;                            &#10;                    except Exception as e:&#10;                        print(f&quot;Error processing row: {e}&quot;)&#10;                        continue&#10;                &#10;                if self.parsed_expenses:&#10;                    self.accept()&#10;                else:&#10;                    QMessageBox.warning(self, &quot;Warning&quot;, &quot;No valid expenses could be parsed&quot;)&#10;                    &#10;        except Exception as e:&#10;            QMessageBox.critical(self, &quot;Error&quot;, f&quot;Failed to process import: {str(e)}&quot;)&#10;            &#10;    def get_parsed_expenses(self):&#10;        &quot;&quot;&quot;Return the parsed expenses&quot;&quot;&quot;&#10;        return self.parsed_expenses&#10;&#10;&#10;class ExpensePreviewDialog(QDialog):&#10;    &quot;&quot;&quot;Dialog for previewing expenses before import&quot;&quot;&quot;&#10;&#10;    def __init__(self, expenses, categories_data):&#10;        super().__init__()&#10;        self.expenses = expenses&#10;        self.categories_data = categories_data&#10;        self.final_expenses = []&#10;&#10;        self.setWindowTitle(&quot;Preview Expenses&quot;)&#10;        self.setModal(True)&#10;        self.setMinimumSize(800, 600)&#10;&#10;        self.init_ui()&#10;        self.populate_preview()&#10;&#10;    def init_ui(self):&#10;        &quot;&quot;&quot;Initialize the preview dialog UI&quot;&quot;&quot;&#10;        layout = QVBoxLayout()&#10;&#10;        # Instructions&#10;        instructions = QLabel(&#10;            &quot;Review the expenses below. You can edit the values, select rows and delete them, &quot;&#10;            &quot;or remove any expense that you do not want to import.&quot;&#10;        )&#10;        instructions.setWordWrap(True)&#10;        layout.addWidget(instructions)&#10;&#10;        # Preview table&#10;        self.preview_table = QTableWidget()&#10;        self.preview_table.setColumnCount(7)&#10;        self.preview_table.setHorizontalHeaderLabels([&#10;            &quot;Date&quot;, &quot;Person&quot;, &quot;Amount&quot;, &quot;Category&quot;, &quot;Subcategory&quot;, &quot;Description&quot;, &quot;Payment Method&quot;&#10;        ])&#10;&#10;        # Enable row selection&#10;        self.preview_table.setSelectionBehavior(QTableWidget.SelectionBehavior.SelectRows)&#10;        self.preview_table.setSelectionMode(QTableWidget.SelectionMode.MultiSelection)&#10;&#10;        # Set column widths&#10;        header = self.preview_table.horizontalHeader()&#10;        header.setSectionResizeMode(0, QHeaderView.ResizeMode.ResizeToContents)&#10;        header.setSectionResizeMode(1, QHeaderView.ResizeMode.ResizeToContents)&#10;        header.setSectionResizeMode(2, QHeaderView.ResizeMode.ResizeToContents)&#10;        header.setSectionResizeMode(3, QHeaderView.ResizeMode.ResizeToContents)&#10;        header.setSectionResizeMode(4, QHeaderView.ResizeMode.ResizeToContents)&#10;        header.setSectionResizeMode(5, QHeaderView.ResizeMode.Stretch)&#10;&#10;        layout.addWidget(self.preview_table)&#10;&#10;        # Action buttons layout&#10;        action_layout = QHBoxLayout()&#10;&#10;        # Delete selected button&#10;        delete_btn = QPushButton(&quot;Delete Selected&quot;)&#10;        delete_btn.setStyleSheet(&quot;&quot;&quot;&#10;            QPushButton {&#10;                background-color: #d9534f;&#10;                color: white;&#10;                padding: 8px;&#10;                font-weight: bold;&#10;                border-radius: 4px;&#10;            }&#10;            QPushButton:hover {&#10;                background-color: #c9302c;&#10;            }&#10;        &quot;&quot;&quot;)&#10;        delete_btn.clicked.connect(self.delete_selected_rows)&#10;        action_layout.addWidget(delete_btn)&#10;&#10;        action_layout.addStretch()&#10;&#10;        # Row count label&#10;        self.row_count_label = QLabel()&#10;        self.update_row_count()&#10;        action_layout.addWidget(self.row_count_label)&#10;&#10;        layout.addLayout(action_layout)&#10;&#10;        # Buttons&#10;        button_layout = QHBoxLayout()&#10;&#10;        ok_btn = QPushButton(&quot;Import All&quot;)&#10;        ok_btn.setStyleSheet(&quot;&quot;&quot;&#10;            QPushButton {&#10;                background-color: #5cb85c;&#10;                color: white;&#10;                padding: 8px;&#10;                font-weight: bold;&#10;                border-radius: 4px;&#10;            }&#10;            QPushButton:hover {&#10;                background-color: #449d44;&#10;            }&#10;        &quot;&quot;&quot;)&#10;        ok_btn.clicked.connect(self.import_all)&#10;        button_layout.addWidget(ok_btn)&#10;&#10;        cancel_btn = QPushButton(&quot;Cancel&quot;)&#10;        cancel_btn.clicked.connect(self.reject)&#10;        button_layout.addWidget(cancel_btn)&#10;&#10;        layout.addLayout(button_layout)&#10;&#10;        self.setLayout(layout)&#10;&#10;    def delete_selected_rows(self):&#10;        &quot;&quot;&quot;Delete selected rows from the preview table&quot;&quot;&quot;&#10;        try:&#10;            # Get selected rows&#10;            selected_rows = set()&#10;            for item in self.preview_table.selectedItems():&#10;                selected_rows.add(item.row())&#10;&#10;            if not selected_rows:&#10;                QMessageBox.information(self, &quot;Info&quot;, &quot;Please select one or more rows to delete.&quot;)&#10;                return&#10;&#10;            # Confirm deletion&#10;            count = len(selected_rows)&#10;            reply = QMessageBox.question(&#10;                self,&#10;                &quot;Confirm Delete&quot;,&#10;                f&quot;Are you sure you want to delete {count} selected expense{'s' if count != 1 else ''}?&quot;,&#10;                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,&#10;                QMessageBox.StandardButton.No&#10;            )&#10;&#10;            if reply != QMessageBox.StandardButton.Yes:&#10;                return&#10;&#10;            # Delete rows in reverse order to maintain row indices&#10;            for row in sorted(selected_rows, reverse=True):&#10;                self.preview_table.removeRow(row)&#10;&#10;            # Update row count display&#10;            self.update_row_count()&#10;&#10;            QMessageBox.information(self, &quot;Success&quot;, f&quot;Deleted {count} expense{'s' if count != 1 else ''}.&quot;)&#10;&#10;        except Exception as e:&#10;            QMessageBox.critical(self, &quot;Error&quot;, f&quot;Failed to delete rows: {str(e)}&quot;)&#10;&#10;    def update_row_count(self):&#10;        &quot;&quot;&quot;Update the row count label&quot;&quot;&quot;&#10;        count = self.preview_table.rowCount()&#10;        self.row_count_label.setText(f&quot;Total expenses: {count}&quot;)&#10;&#10;    def populate_preview(self):&#10;        &quot;&quot;&quot;Populate the preview table with expense data and editable subcategory dropdowns&quot;&quot;&quot;&#10;        self.preview_table.setRowCount(len(self.expenses))&#10;&#10;        for i, expense in enumerate(self.expenses):&#10;            # Standard text items for non-editable columns&#10;            self.preview_table.setItem(i, 0, QTableWidgetItem(expense['date']))&#10;            self.preview_table.setItem(i, 1, QTableWidgetItem(expense['person']))&#10;            self.preview_table.setItem(i, 2, QTableWidgetItem(f&quot;${expense['amount']:,.2f}&quot;))&#10;&#10;            # Category dropdown&#10;            category_combo = QComboBox()&#10;            category_combo.addItems(sorted(self.categories_data.keys()))&#10;            category_combo.setCurrentText(expense['category'])&#10;            category_combo.currentTextChanged.connect(lambda text, row=i: self.on_category_changed_in_table(row, text))&#10;            self.preview_table.setCellWidget(i, 3, category_combo)&#10;&#10;            # Subcategory dropdown&#10;            subcategory_combo = QComboBox()&#10;            category = expense['category']&#10;            if category in self.categories_data:&#10;                subcategory_combo.addItems(self.categories_data[category])&#10;                if expense['subcategory'] in self.categories_data[category]:&#10;                    subcategory_combo.setCurrentText(expense['subcategory'])&#10;                else:&#10;                    # If subcategory doesn't exist, show it as blank and add it as an option&#10;                    subcategory_combo.addItem(expense['subcategory'])&#10;                    subcategory_combo.setCurrentText(expense['subcategory'])&#10;            else:&#10;                # If category doesn't exist, add the subcategory as is&#10;                subcategory_combo.addItem(expense['subcategory'])&#10;                subcategory_combo.setCurrentText(expense['subcategory'])&#10;&#10;            self.preview_table.setCellWidget(i, 4, subcategory_combo)&#10;&#10;            # Regular text items for description and payment method&#10;            self.preview_table.setItem(i, 5, QTableWidgetItem(expense.get('description', '')))&#10;            self.preview_table.setItem(i, 6, QTableWidgetItem(expense.get('payment_method', '')))&#10;&#10;        # Update row count display&#10;        self.update_row_count()&#10;&#10;    def on_category_changed_in_table(self, row, category):&#10;        &quot;&quot;&quot;Update subcategory dropdown when category changes in the preview table&quot;&quot;&quot;&#10;        subcategory_combo = self.preview_table.cellWidget(row, 4)&#10;        if subcategory_combo:&#10;            subcategory_combo.clear()&#10;            if category in self.categories_data:&#10;                subcategory_combo.addItems(self.categories_data[category])&#10;            else:&#10;                subcategory_combo.addItem(&quot;Other&quot;)&#10;&#10;    def import_all(self):&#10;        &quot;&quot;&quot;Import all remaining displayed expenses&quot;&quot;&quot;&#10;        try:&#10;            # Check if there are any rows left&#10;            if self.preview_table.rowCount() == 0:&#10;                QMessageBox.warning(self, &quot;Warning&quot;, &quot;No expenses to import.&quot;)&#10;                return&#10;&#10;            # Collect final expenses from remaining rows&#10;            for i in range(self.preview_table.rowCount()):&#10;                try:&#10;                    date = self.preview_table.item(i, 0).text()&#10;                    person = self.preview_table.item(i, 1).text()&#10;                    amount_text = self.preview_table.item(i, 2).text().replace(&quot;$&quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;&quot;)&#10;&#10;                    # Get values from dropdown widgets&#10;                    category_combo = self.preview_table.cellWidget(i, 3)&#10;                    subcategory_combo = self.preview_table.cellWidget(i, 4)&#10;&#10;                    category = category_combo.currentText() if category_combo else &quot;Other&quot;&#10;                    subcategory = subcategory_combo.currentText() if subcategory_combo else &quot;Other&quot;&#10;&#10;                    description = self.preview_table.item(i, 5).text()&#10;                    payment_method = self.preview_table.item(i, 6).text()&#10;&#10;                    amount = abs(float(amount_text))  # Ensure positive amount&#10;&#10;                    expense = {&#10;                        'date': date,&#10;                        'person': person,&#10;                        'amount': amount,&#10;                        'category': category,&#10;                        'subcategory': subcategory,&#10;                        'description': description,&#10;                        'payment_method': payment_method&#10;                    }&#10;&#10;                    self.final_expenses.append(expense)&#10;&#10;                except Exception as e:&#10;                    print(f&quot;Error processing row {i}: {e}&quot;)&#10;                    continue&#10;&#10;            self.accept()&#10;&#10;        except Exception as e:&#10;            QMessageBox.critical(self, &quot;Error&quot;, f&quot;Failed to import expenses: {str(e)}&quot;)&#10;&#10;    def get_final_expenses(self):&#10;        &quot;&quot;&quot;Return the final expenses list&quot;&quot;&quot;&#10;        return self.final_expenses&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gui/tabs/presentation_tab.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gui/tabs/presentation_tab.py" />
              <option name="originalContent" value="&quot;&quot;&quot;&#10;Monthly Presentation Tab&#10;Shows monthly spending breakdown by category&#10;&quot;&quot;&quot;&#10;&#10;from PyQt6.QtWidgets import *&#10;from PyQt6.QtCore import *&#10;from PyQt6.QtGui import *&#10;from PyQt6.QtCharts import *&#10;&#10;from database.models import IncomeModel, ExpenseModel&#10;&#10;class PresentationTab(QWidget):&#10;    &quot;&quot;&quot;Monthly presentation tab&quot;&quot;&quot;&#10;    &#10;    def __init__(self, db):&#10;        super().__init__()&#10;        self.db = db&#10;        self.setup_ui()&#10;        self.refresh_data()&#10;        &#10;    def setup_ui(self):&#10;        &quot;&quot;&quot;Set up the UI&quot;&quot;&quot;&#10;        layout = QVBoxLayout(self)&#10;        &#10;        # Title&#10;        title = QLabel(&quot;Monthly Presentation&quot;)&#10;        title.setStyleSheet(&quot;font-size: 24px; font-weight: bold; color: #333;&quot;)&#10;        layout.addWidget(title)&#10;        &#10;        # Month selector&#10;        month_layout = QHBoxLayout()&#10;        month_layout.addWidget(QLabel(&quot;Select Month:&quot;))&#10;        self.month_selector = QDateEdit()&#10;        self.month_selector.setDisplayFormat(&quot;MMMM yyyy&quot;)&#10;        self.month_selector.setDate(QDate.currentDate())&#10;        self.month_selector.setCalendarPopup(True)&#10;        self.month_selector.dateChanged.connect(self.refresh_data)&#10;        month_layout.addWidget(self.month_selector)&#10;        month_layout.addStretch()&#10;        layout.addLayout(month_layout)&#10;        &#10;        # Summary section&#10;        summary_layout = QHBoxLayout()&#10;        &#10;        # Income summary&#10;        income_group = QGroupBox(&quot;Income Summary&quot;)&#10;        income_layout = QVBoxLayout()&#10;        self.jeff_income_label = QLabel(&quot;Jeff: $0.00&quot;)&#10;        self.vanessa_income_label = QLabel(&quot;Vanessa: $0.00&quot;)&#10;        self.total_income_label = QLabel(&quot;Total: $0.00&quot;)&#10;        self.total_income_label.setStyleSheet(&quot;font-weight: bold;&quot;)&#10;        income_layout.addWidget(self.jeff_income_label)&#10;        income_layout.addWidget(self.vanessa_income_label)&#10;        income_layout.addWidget(self.total_income_label)&#10;        income_group.setLayout(income_layout)&#10;        summary_layout.addWidget(income_group)&#10;        &#10;        # Expense summary&#10;        expense_group = QGroupBox(&quot;Expense Summary&quot;)&#10;        expense_layout = QVBoxLayout()&#10;        self.jeff_expense_label = QLabel(&quot;Jeff: $0.00&quot;)&#10;        self.vanessa_expense_label = QLabel(&quot;Vanessa: $0.00&quot;)&#10;        self.total_expense_label = QLabel(&quot;Total: $0.00&quot;)&#10;        self.total_expense_label.setStyleSheet(&quot;font-weight: bold;&quot;)&#10;        expense_layout.addWidget(self.jeff_expense_label)&#10;        expense_layout.addWidget(self.vanessa_expense_label)&#10;        expense_layout.addWidget(self.total_expense_label)&#10;        expense_group.setLayout(expense_layout)&#10;        summary_layout.addWidget(expense_group)&#10;        &#10;        layout.addLayout(summary_layout)&#10;        &#10;        # Category breakdown table&#10;        self.category_table = QTableWidget()&#10;        self.category_table.setColumnCount(5)&#10;        self.category_table.setHorizontalHeaderLabels([&#10;            &quot;Category&quot;, &quot;Subcategory&quot;, &quot;Budgeted&quot;, &quot;Actual&quot;, &quot;Variance&quot;&#10;        ])&#10;        self.category_table.horizontalHeader().setStretchLastSection(True)&#10;        layout.addWidget(self.category_table)&#10;        &#10;        # Spending chart&#10;        self.chart_view = QChartView()&#10;        self.chart_view.setMinimumHeight(300)&#10;        layout.addWidget(self.chart_view)&#10;        &#10;    def refresh_data(self):&#10;        &quot;&quot;&quot;Refresh presentation data&quot;&quot;&quot;&#10;        # Get selected month range&#10;        selected_date = self.month_selector.date()&#10;        month_start = selected_date.toString(&quot;yyyy-MM-01&quot;)&#10;        month_end = selected_date.addMonths(1).addDays(-1).toString(&quot;yyyy-MM-dd&quot;)&#10;        &#10;        # Get income by person&#10;        cursor = self.db.execute('''&#10;            SELECT person, COALESCE(SUM(amount), 0) as total&#10;            FROM income&#10;            WHERE date &gt;= ? AND date &lt;= ?&#10;            GROUP BY person&#10;        ''', (month_start, month_end))&#10;        &#10;        income_by_person = {row['person']: row['total'] for row in cursor.fetchall()}&#10;        jeff_income = income_by_person.get('Jeff', 0)&#10;        vanessa_income = income_by_person.get('Vanessa', 0)&#10;        total_income = jeff_income + vanessa_income&#10;        &#10;        self.jeff_income_label.setText(f&quot;Jeff: ${jeff_income:,.2f}&quot;)&#10;        self.vanessa_income_label.setText(f&quot;Vanessa: ${vanessa_income:,.2f}&quot;)&#10;        self.total_income_label.setText(f&quot;Total: ${total_income:,.2f}&quot;)&#10;        &#10;        # Get expenses by person&#10;        cursor = self.db.execute('''&#10;            SELECT person, COALESCE(SUM(amount), 0) as total&#10;            FROM expenses&#10;            WHERE date &gt;= ? AND date &lt;= ?&#10;            GROUP BY person&#10;        ''', (month_start, month_end))&#10;        &#10;        expenses_by_person = {row['person']: row['total'] for row in cursor.fetchall()}&#10;        jeff_expenses = expenses_by_person.get('Jeff', 0)&#10;        vanessa_expenses = expenses_by_person.get('Vanessa', 0)&#10;        total_expenses = jeff_expenses + vanessa_expenses&#10;        &#10;        self.jeff_expense_label.setText(f&quot;Jeff: ${jeff_expenses:,.2f}&quot;)&#10;        self.vanessa_expense_label.setText(f&quot;Vanessa: ${vanessa_expenses:,.2f}&quot;)&#10;        self.total_expense_label.setText(f&quot;Total: ${total_expenses:,.2f}&quot;)&#10;        &#10;        # Update category table&#10;        categories = ExpenseModel.get_by_category(self.db, month_start, month_end)&#10;        &#10;        self.category_table.setRowCount(len(categories))&#10;        for i, cat in enumerate(categories):&#10;            self.category_table.setItem(i, 0, QTableWidgetItem(cat['category']))&#10;            self.category_table.setItem(i, 1, QTableWidgetItem(cat['subcategory'] or &quot;&quot;))&#10;            self.category_table.setItem(i, 2, QTableWidgetItem(&quot;$0.00&quot;))  # Budgeted placeholder&#10;            self.category_table.setItem(i, 3, QTableWidgetItem(f&quot;${cat['total']:.2f}&quot;))&#10;            &#10;            variance = 0 - cat['total']  # Since no budget set&#10;            variance_item = QTableWidgetItem(f&quot;${variance:.2f}&quot;)&#10;            if variance &lt; 0:&#10;                variance_item.setForeground(QColor(244, 67, 54))&#10;            else:&#10;                variance_item.setForeground(QColor(76, 175, 80))&#10;            self.category_table.setItem(i, 4, variance_item)&#10;        &#10;        # Update chart&#10;        self.update_spending_chart(month_start, month_end)&#10;        &#10;    def update_spending_chart(self, month_start, month_end):&#10;        &quot;&quot;&quot;Update spending pie chart&quot;&quot;&quot;&#10;        cursor = self.db.execute('''&#10;            SELECT category, SUM(amount) as total&#10;            FROM expenses&#10;            WHERE date &gt;= ? AND date &lt;= ?&#10;            GROUP BY category&#10;            ORDER BY total DESC&#10;            LIMIT 10&#10;        ''', (month_start, month_end))&#10;        &#10;        categories = cursor.fetchall()&#10;        &#10;        if categories:&#10;            series = QPieSeries()&#10;            &#10;            for cat in categories:&#10;                slice = series.append(cat['category'], cat['total'])&#10;                slice.setLabelVisible(True)&#10;                slice.setLabel(f&quot;{cat['category']}: ${cat['total']:.0f}&quot;)&#10;            &#10;            chart = QChart()&#10;            chart.addSeries(series)&#10;            chart.setTitle(&quot;Spending by Category&quot;)&#10;            chart.legend().setAlignment(Qt.AlignmentFlag.AlignRight)&#10;            &#10;            self.chart_view.setChart(chart)" />
              <option name="updatedContent" value="&quot;&quot;&quot;&#10;Monthly Presentation Tab&#10;Shows monthly spending breakdown by category and unrealized expenses tracking&#10;&quot;&quot;&quot;&#10;&#10;from PyQt6.QtWidgets import *&#10;from PyQt6.QtCore import *&#10;from PyQt6.QtGui import *&#10;from PyQt6.QtCharts import *&#10;&#10;from database.models import IncomeModel, ExpenseModel&#10;&#10;class PresentationTab(QWidget):&#10;    &quot;&quot;&quot;Monthly presentation tab with subtabs&quot;&quot;&quot;&#10;    &#10;    def __init__(self, db):&#10;        super().__init__()&#10;        self.db = db&#10;        self.setup_ui()&#10;        self.refresh_data()&#10;        &#10;    def setup_ui(self):&#10;        &quot;&quot;&quot;Set up the UI with tab widget&quot;&quot;&quot;&#10;        layout = QVBoxLayout(self)&#10;        &#10;        # Title&#10;        title = QLabel(&quot;Monthly Presentation&quot;)&#10;        title.setStyleSheet(&quot;font-size: 24px; font-weight: bold; color: #333;&quot;)&#10;        layout.addWidget(title)&#10;        &#10;        # Month selector (shared across all tabs)&#10;        month_layout = QHBoxLayout()&#10;        month_layout.addWidget(QLabel(&quot;Select Month:&quot;))&#10;        self.month_selector = QDateEdit()&#10;        self.month_selector.setDisplayFormat(&quot;MMMM yyyy&quot;)&#10;        self.month_selector.setDate(QDate.currentDate())&#10;        self.month_selector.setCalendarPopup(True)&#10;        self.month_selector.dateChanged.connect(self.refresh_data)&#10;        month_layout.addWidget(self.month_selector)&#10;        month_layout.addStretch()&#10;        layout.addLayout(month_layout)&#10;        &#10;        # Create tab widget&#10;        self.tab_widget = QTabWidget()&#10;        &#10;        # Overview tab (existing functionality)&#10;        overview_tab = QWidget()&#10;        self.setup_overview_tab(overview_tab)&#10;        self.tab_widget.addTab(overview_tab, &quot;Overview&quot;)&#10;        &#10;        # Unrealized expenses tab (new functionality)&#10;        unrealized_tab = QWidget()&#10;        self.setup_unrealized_tab(unrealized_tab)&#10;        self.tab_widget.addTab(unrealized_tab, &quot;Unrealized Expenses&quot;)&#10;        &#10;        layout.addWidget(self.tab_widget)&#10;        &#10;    def setup_overview_tab(self, tab):&#10;        &quot;&quot;&quot;Set up the overview tab with existing functionality&quot;&quot;&quot;&#10;        layout = QVBoxLayout(tab)&#10;        &#10;        # Summary section&#10;        summary_layout = QHBoxLayout()&#10;        &#10;        # Income summary&#10;        income_group = QGroupBox(&quot;Income Summary&quot;)&#10;        income_layout = QVBoxLayout()&#10;        self.jeff_income_label = QLabel(&quot;Jeff: $0.00&quot;)&#10;        self.vanessa_income_label = QLabel(&quot;Vanessa: $0.00&quot;)&#10;        self.total_income_label = QLabel(&quot;Total: $0.00&quot;)&#10;        self.total_income_label.setStyleSheet(&quot;font-weight: bold;&quot;)&#10;        income_layout.addWidget(self.jeff_income_label)&#10;        income_layout.addWidget(self.vanessa_income_label)&#10;        income_layout.addWidget(self.total_income_label)&#10;        income_group.setLayout(income_layout)&#10;        summary_layout.addWidget(income_group)&#10;        &#10;        # Expense summary&#10;        expense_group = QGroupBox(&quot;Expense Summary&quot;)&#10;        expense_layout = QVBoxLayout()&#10;        self.jeff_expense_label = QLabel(&quot;Jeff: $0.00&quot;)&#10;        self.vanessa_expense_label = QLabel(&quot;Vanessa: $0.00&quot;)&#10;        self.total_expense_label = QLabel(&quot;Total: $0.00&quot;)&#10;        self.total_expense_label.setStyleSheet(&quot;font-weight: bold;&quot;)&#10;        expense_layout.addWidget(self.jeff_expense_label)&#10;        expense_layout.addWidget(self.vanessa_expense_label)&#10;        expense_layout.addWidget(self.total_expense_label)&#10;        expense_group.setLayout(expense_layout)&#10;        summary_layout.addWidget(expense_group)&#10;        &#10;        layout.addLayout(summary_layout)&#10;        &#10;        # Category breakdown table&#10;        self.category_table = QTableWidget()&#10;        self.category_table.setColumnCount(5)&#10;        self.category_table.setHorizontalHeaderLabels([&#10;            &quot;Category&quot;, &quot;Subcategory&quot;, &quot;Budgeted&quot;, &quot;Actual&quot;, &quot;Variance&quot;&#10;        ])&#10;        self.category_table.horizontalHeader().setStretchLastSection(True)&#10;        layout.addWidget(self.category_table)&#10;        &#10;        # Spending chart&#10;        self.chart_view = QChartView()&#10;        self.chart_view.setMinimumHeight(300)&#10;        layout.addWidget(self.chart_view)&#10;        &#10;    def setup_unrealized_tab(self, tab):&#10;        &quot;&quot;&quot;Set up the unrealized expenses tab&quot;&quot;&quot;&#10;        layout = QVBoxLayout(tab)&#10;        &#10;        # Instructions&#10;        instructions = QLabel(&quot;This shows expenses that haven't been taken out of the joint checking account yet.&quot;)&#10;        instructions.setWordWrap(True)&#10;        instructions.setStyleSheet(&quot;color: #666; margin-bottom: 10px;&quot;)&#10;        layout.addWidget(instructions)&#10;        &#10;        # Summary section for unrealized expenses&#10;        summary_layout = QHBoxLayout()&#10;        &#10;        # Unrealized expenses summary&#10;        unrealized_group = QGroupBox(&quot;Unrealized Expenses to Withdraw&quot;)&#10;        unrealized_layout = QVBoxLayout()&#10;        self.jeff_unrealized_label = QLabel(&quot;Jeff: $0.00&quot;)&#10;        self.vanessa_unrealized_label = QLabel(&quot;Vanessa: $0.00&quot;)&#10;        self.total_unrealized_label = QLabel(&quot;Total to Withdraw: $0.00&quot;)&#10;        self.total_unrealized_label.setStyleSheet(&quot;font-weight: bold; font-size: 14px; color: #d32f2f;&quot;)&#10;        unrealized_layout.addWidget(self.jeff_unrealized_label)&#10;        unrealized_layout.addWidget(self.vanessa_unrealized_label)&#10;        unrealized_layout.addWidget(QLabel(&quot;&quot;))  # Spacer&#10;        unrealized_layout.addWidget(self.total_unrealized_label)&#10;        unrealized_group.setLayout(unrealized_layout)&#10;        summary_layout.addWidget(unrealized_group)&#10;        summary_layout.addStretch()&#10;        &#10;        layout.addLayout(summary_layout)&#10;        &#10;        # Unrealized expenses table&#10;        self.unrealized_table = QTableWidget()&#10;        self.unrealized_table.setColumnCount(7)&#10;        self.unrealized_table.setHorizontalHeaderLabels([&#10;            &quot;Date&quot;, &quot;Person&quot;, &quot;Amount&quot;, &quot;Category&quot;, &quot;Subcategory&quot;, &quot;Description&quot;, &quot;Actions&quot;&#10;        ])&#10;        self.unrealized_table.horizontalHeader().setStretchLastSection(True)&#10;        self.unrealized_table.setAlternatingRowColors(True)&#10;        layout.addWidget(self.unrealized_table)&#10;        &#10;    def refresh_data(self):&#10;        &quot;&quot;&quot;Refresh presentation data for all tabs&quot;&quot;&quot;&#10;        self.refresh_overview_data()&#10;        self.refresh_unrealized_data()&#10;        &#10;    def refresh_overview_data(self):&#10;        &quot;&quot;&quot;Refresh data for the overview tab&quot;&quot;&quot;&#10;        # Get selected month range&#10;        selected_date = self.month_selector.date()&#10;        month_start = selected_date.toString(&quot;yyyy-MM-01&quot;)&#10;        month_end = selected_date.addMonths(1).addDays(-1).toString(&quot;yyyy-MM-dd&quot;)&#10;        &#10;        # Get income by person&#10;        cursor = self.db.execute('''&#10;            SELECT person, COALESCE(SUM(amount), 0) as total&#10;            FROM income&#10;            WHERE date &gt;= ? AND date &lt;= ?&#10;            GROUP BY person&#10;        ''', (month_start, month_end))&#10;        &#10;        income_by_person = {row['person']: row['total'] for row in cursor.fetchall()}&#10;        jeff_income = income_by_person.get('Jeff', 0)&#10;        vanessa_income = income_by_person.get('Vanessa', 0)&#10;        total_income = jeff_income + vanessa_income&#10;        &#10;        self.jeff_income_label.setText(f&quot;Jeff: ${jeff_income:,.2f}&quot;)&#10;        self.vanessa_income_label.setText(f&quot;Vanessa: ${vanessa_income:,.2f}&quot;)&#10;        self.total_income_label.setText(f&quot;Total: ${total_income:,.2f}&quot;)&#10;        &#10;        # Get expenses by person&#10;        cursor = self.db.execute('''&#10;            SELECT person, COALESCE(SUM(amount), 0) as total&#10;            FROM expenses&#10;            WHERE date &gt;= ? AND date &lt;= ?&#10;            GROUP BY person&#10;        ''', (month_start, month_end))&#10;        &#10;        expenses_by_person = {row['person']: row['total'] for row in cursor.fetchall()}&#10;        jeff_expenses = expenses_by_person.get('Jeff', 0)&#10;        vanessa_expenses = expenses_by_person.get('Vanessa', 0)&#10;        total_expenses = jeff_expenses + vanessa_expenses&#10;        &#10;        self.jeff_expense_label.setText(f&quot;Jeff: ${jeff_expenses:,.2f}&quot;)&#10;        self.vanessa_expense_label.setText(f&quot;Vanessa: ${vanessa_expenses:,.2f}&quot;)&#10;        self.total_expense_label.setText(f&quot;Total: ${total_expenses:,.2f}&quot;)&#10;        &#10;        # Update category table&#10;        categories = ExpenseModel.get_by_category(self.db, month_start, month_end)&#10;        &#10;        self.category_table.setRowCount(len(categories))&#10;        for i, cat in enumerate(categories):&#10;            self.category_table.setItem(i, 0, QTableWidgetItem(cat['category']))&#10;            self.category_table.setItem(i, 1, QTableWidgetItem(cat['subcategory'] or &quot;&quot;))&#10;            self.category_table.setItem(i, 2, QTableWidgetItem(&quot;$0.00&quot;))  # Budgeted placeholder&#10;            self.category_table.setItem(i, 3, QTableWidgetItem(f&quot;${cat['total']:.2f}&quot;))&#10;            &#10;            variance = 0 - cat['total']  # Since no budget set&#10;            variance_item = QTableWidgetItem(f&quot;${variance:.2f}&quot;)&#10;            if variance &lt; 0:&#10;                variance_item.setForeground(QColor(244, 67, 54))&#10;            else:&#10;                variance_item.setForeground(QColor(76, 175, 80))&#10;            self.category_table.setItem(i, 4, variance_item)&#10;        &#10;        # Update chart&#10;        self.update_spending_chart(month_start, month_end)&#10;        &#10;    def refresh_unrealized_data(self):&#10;        &quot;&quot;&quot;Refresh data for the unrealized expenses tab&quot;&quot;&quot;&#10;        # Get selected month range&#10;        selected_date = self.month_selector.date()&#10;        month_start = selected_date.toString(&quot;yyyy-MM-01&quot;)&#10;        month_end = selected_date.addMonths(1).addDays(-1).toString(&quot;yyyy-MM-dd&quot;)&#10;        &#10;        # Get unrealized expenses by person&#10;        unrealized_by_person = ExpenseModel.get_unrealized_by_person(self.db, month_start, month_end)&#10;        unrealized_dict = {row['person']: row['total'] for row in unrealized_by_person}&#10;        &#10;        jeff_unrealized = unrealized_dict.get('Jeff', 0)&#10;        vanessa_unrealized = unrealized_dict.get('Vanessa', 0)&#10;        total_unrealized = jeff_unrealized + vanessa_unrealized&#10;        &#10;        self.jeff_unrealized_label.setText(f&quot;Jeff: ${jeff_unrealized:,.2f}&quot;)&#10;        self.vanessa_unrealized_label.setText(f&quot;Vanessa: ${vanessa_unrealized:,.2f}&quot;)&#10;        self.total_unrealized_label.setText(f&quot;Total to Withdraw: ${total_unrealized:,.2f}&quot;)&#10;        &#10;        # Get all unrealized expenses&#10;        unrealized_expenses = ExpenseModel.get_unrealized_expenses(self.db, month_start, month_end)&#10;        &#10;        self.unrealized_table.setRowCount(len(unrealized_expenses))&#10;        for i, expense in enumerate(unrealized_expenses):&#10;            self.unrealized_table.setItem(i, 0, QTableWidgetItem(expense['date']))&#10;            self.unrealized_table.setItem(i, 1, QTableWidgetItem(expense['person']))&#10;            self.unrealized_table.setItem(i, 2, QTableWidgetItem(f&quot;${expense['amount']:.2f}&quot;))&#10;            self.unrealized_table.setItem(i, 3, QTableWidgetItem(expense['category']))&#10;            self.unrealized_table.setItem(i, 4, QTableWidgetItem(expense['subcategory'] or &quot;&quot;))&#10;            self.unrealized_table.setItem(i, 5, QTableWidgetItem(expense['description'] or &quot;&quot;))&#10;            &#10;            # Add &quot;Mark as Realized&quot; button&#10;            mark_button = QPushButton(&quot;Mark as Realized&quot;)&#10;            mark_button.clicked.connect(lambda checked, exp_id=expense['id']: self.mark_expense_realized(exp_id))&#10;            mark_button.setStyleSheet(&quot;QPushButton { background-color: #4CAF50; color: white; border: none; padding: 5px; }&quot;)&#10;            self.unrealized_table.setCellWidget(i, 6, mark_button)&#10;    &#10;    def mark_expense_realized(self, expense_id):&#10;        &quot;&quot;&quot;Mark an expense as realized and refresh the data&quot;&quot;&quot;&#10;        ExpenseModel.mark_as_realized(self.db, expense_id)&#10;        self.refresh_unrealized_data()&#10;        &#10;        # Show confirmation message&#10;        QMessageBox.information(self, &quot;Success&quot;, &quot;Expense marked as realized!&quot;)&#10;        &#10;    def update_spending_chart(self, month_start, month_end):&#10;        &quot;&quot;&quot;Update spending pie chart for overview tab&quot;&quot;&quot;&#10;        # Get category data&#10;        categories = ExpenseModel.get_by_category(self.db, month_start, month_end)&#10;        &#10;        if not categories:&#10;            # Clear chart if no data&#10;            self.chart_view.setChart(QChart())&#10;            return&#10;        &#10;        # Create pie series&#10;        series = QPieSeries()&#10;        &#10;        for cat in categories:&#10;            slice_label = f&quot;{cat['category']}&quot;&#10;            if cat['subcategory']:&#10;                slice_label += f&quot; - {cat['subcategory']}&quot;&#10;            series.append(slice_label, cat['total'])&#10;        &#10;        # Create chart&#10;        chart = QChart()&#10;        chart.addSeries(series)&#10;        chart.setTitle(&quot;Monthly Spending by Category&quot;)&#10;        chart.legend().setVisible(True)&#10;        chart.legend().setAlignment(Qt.AlignmentFlag.AlignRight)&#10;        &#10;        self.chart_view.setChart(chart)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gui/utils/expense_loader.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gui/utils/expense_loader.py" />
              <option name="originalContent" value="&quot;&quot;&quot;&#10;Expense Loader Utility for Budget Tracker&#10;Handles CSV files from credit card statements and TXT files with manual entries&#10;&quot;&quot;&quot;&#10;&#10;import csv&#10;import os&#10;from datetime import datetime&#10;from typing import List, Dict, Optional, Tuple&#10;import re&#10;&#10;class ExpenseLoader:&#10;    &quot;&quot;&quot;Utility class for loading expenses from various file formats&quot;&quot;&quot;&#10;&#10;    def __init__(self):&#10;        # Default category mappings for common merchants/descriptions&#10;        self.category_mappings = {&#10;            'WALGREENS': ('Health &amp; Wellness', 'Prescriptions'),&#10;            'CVS': ('Health &amp; Wellness', 'Prescriptions'),&#10;            'APPLE.COM': ('Other', 'Entertainment'),&#10;            'AMAZON': ('Other', 'Other'),&#10;            'EBAY': ('Other', 'Other'),&#10;            'WHOLEFDS': ('Food', 'Food (Groceries)'),&#10;            'WHOLE FOODS': ('Food', 'Food (Groceries)'),&#10;            'ACME': ('Food', 'Food (Groceries)'),&#10;            'ALDI': ('Food', 'Food (Groceries)'),&#10;            'TRADER JOE': ('Food', 'Food (Groceries)'),&#10;            'TARGET': ('Other', 'Other'),&#10;            'MCDONALDS': ('Food', 'Food (Take Out)'),&#10;            'UBER': ('Utilities', 'Taxi / Transit'),&#10;            'LYFT': ('Utilities', 'Taxi / Transit'),&#10;            '7-ELEVEN': ('Vehicles', 'Gas'),&#10;            'GOOGLE': ('Home', 'Subscriptions'),&#10;            'NETFLIX': ('Home', 'Subscriptions'),&#10;            'HULU': ('Home', 'Subscriptions'),&#10;            'HBO': ('Home', 'Subscriptions'),&#10;            'PRIME VIDEO': ('Home', 'Subscriptions'),&#10;            'GITHUB': ('Other', 'Other'),&#10;        }&#10;&#10;    def load_csv_file(self, file_path: str) -&gt; Tuple[List[Dict], List[str]]:&#10;        &quot;&quot;&quot;&#10;        Load expenses from a CSV file (credit card format)&#10;        Returns: (expenses_list, errors_list)&#10;        &quot;&quot;&quot;&#10;        expenses = []&#10;        errors = []&#10;&#10;        try:&#10;            with open(file_path, 'r', encoding='utf-8') as file:&#10;                # Try to detect the CSV format&#10;                sample = file.read(1024)&#10;                file.seek(0)&#10;&#10;                # Check if this looks like a Chase credit card statement&#10;                if 'Transaction Date' in sample and 'Post Date' in sample:&#10;                    return self._load_chase_csv(file, errors)&#10;                else:&#10;                    # Generic CSV format&#10;                    return self._load_generic_csv(file, errors)&#10;&#10;        except Exception as e:&#10;            errors.append(f&quot;Error reading file: {str(e)}&quot;)&#10;            return [], errors&#10;&#10;    def _load_chase_csv(self, file, errors: List[str]) -&gt; Tuple[List[Dict], List[str]]:&#10;        &quot;&quot;&quot;Load Chase credit card CSV format&quot;&quot;&quot;&#10;        expenses = []&#10;&#10;        try:&#10;            reader = csv.DictReader(file)&#10;&#10;            for row_num, row in enumerate(reader, start=2):&#10;                try:&#10;                    # Only process &quot;Sale&quot; transactions (skip returns/payments)&#10;                    if row.get('Type', '').strip().lower() != 'sale':&#10;                        continue&#10;&#10;                    # Parse the data&#10;                    transaction_date = row.get('Transaction Date', '').strip()&#10;                    description = row.get('Description', '').strip()&#10;                    category = row.get('Category', '').strip()&#10;                    amount_str = row.get('Amount', '').strip()&#10;&#10;                    if not all([transaction_date, description, amount_str]):&#10;                        errors.append(f&quot;Row {row_num}: Missing required fields&quot;)&#10;                        continue&#10;&#10;                    # Parse amount (should be negative for expenses, make positive)&#10;                    try:&#10;                        amount = float(amount_str.replace(',', ''))&#10;                        if amount &lt; 0:&#10;                            amount = abs(amount)  # Make positive for expense&#10;                        else:&#10;                            # Skip if amount is positive (likely a return/credit)&#10;                            continue&#10;                    except ValueError:&#10;                        errors.append(f&quot;Row {row_num}: Invalid amount '{amount_str}'&quot;)&#10;                        continue&#10;&#10;                    # Parse date&#10;                    try:&#10;                        date_obj = datetime.strptime(transaction_date, '%m/%d/%Y')&#10;                        date_str = date_obj.strftime('%Y-%m-%d')&#10;                    except ValueError:&#10;                        errors.append(f&quot;Row {row_num}: Invalid date format '{transaction_date}'&quot;)&#10;                        continue&#10;&#10;                    # Map to categories&#10;                    budget_category, subcategory = self._map_category(description, category)&#10;&#10;                    expense = {&#10;                        'date': date_str,&#10;                        'person': 'Jeff',  # Default person, can be changed in UI&#10;                        'amount': amount,&#10;                        'category': budget_category,&#10;                        'subcategory': subcategory,&#10;                        'description': description,&#10;                        'payment_method': 'Credit Card'&#10;                    }&#10;&#10;                    expenses.append(expense)&#10;&#10;                except Exception as e:&#10;                    errors.append(f&quot;Row {row_num}: {str(e)}&quot;)&#10;                    continue&#10;&#10;        except Exception as e:&#10;            errors.append(f&quot;Error processing CSV: {str(e)}&quot;)&#10;&#10;        return expenses, errors&#10;&#10;    def _load_generic_csv(self, file, errors: List[str]) -&gt; Tuple[List[Dict], List[str]]:&#10;        &quot;&quot;&quot;Load generic CSV format&quot;&quot;&quot;&#10;        expenses = []&#10;        # This can be extended for other CSV formats&#10;        errors.append(&quot;Generic CSV format not yet implemented&quot;)&#10;        return expenses, errors&#10;&#10;    def load_txt_file(self, file_path: str) -&gt; Tuple[List[Dict], List[str]]:&#10;        &quot;&quot;&quot;&#10;        Load expenses from a TXT file (manual format)&#10;        Expected format: MM/DD description amount&#10;        Returns: (expenses_list, errors_list)&#10;        &quot;&quot;&quot;&#10;        expenses = []&#10;        errors = []&#10;&#10;        try:&#10;            with open(file_path, 'r', encoding='utf-8') as file:&#10;                for line_num, line in enumerate(file, start=1):&#10;                    line = line.strip()&#10;                    if not line:&#10;                        continue&#10;&#10;                    try:&#10;                        # Parse line format: MM/DD description amount&#10;                        # Example: &quot;06/23 uber 32.91&quot;&#10;                        parts = line.split()&#10;                        if len(parts) &lt; 3:&#10;                            errors.append(f&quot;Line {line_num}: Invalid format - expected 'MM/DD description amount'&quot;)&#10;                            continue&#10;&#10;                        date_part = parts[0]&#10;                        amount_part = parts[-1]&#10;                        description_parts = parts[1:-1]&#10;                        description = ' '.join(description_parts)&#10;&#10;                        # Parse date (assume current year)&#10;                        try:&#10;                            current_year = datetime.now().year&#10;                            date_obj = datetime.strptime(f&quot;{current_year}/{date_part}&quot;, '%Y/%m/%d')&#10;                            date_str = date_obj.strftime('%Y-%m-%d')&#10;                        except ValueError:&#10;                            errors.append(f&quot;Line {line_num}: Invalid date format '{date_part}'&quot;)&#10;                            continue&#10;&#10;                        # Parse amount&#10;                        try:&#10;                            amount = float(amount_part.replace(',', ''))&#10;                        except ValueError:&#10;                            errors.append(f&quot;Line {line_num}: Invalid amount '{amount_part}'&quot;)&#10;                            continue&#10;&#10;                        # Map to categories&#10;                        budget_category, subcategory = self._map_category(description)&#10;&#10;                        expense = {&#10;                            'date': date_str,&#10;                            'person': 'Vanessa',  # Default for TXT files, can be changed&#10;                            'amount': amount,&#10;                            'category': budget_category,&#10;                            'subcategory': subcategory,&#10;                            'description': description,&#10;                            'payment_method': 'Cash/Debit'&#10;                        }&#10;&#10;                        expenses.append(expense)&#10;&#10;                    except Exception as e:&#10;                        errors.append(f&quot;Line {line_num}: {str(e)}&quot;)&#10;                        continue&#10;&#10;        except Exception as e:&#10;            errors.append(f&quot;Error reading file: {str(e)}&quot;)&#10;&#10;        return expenses, errors&#10;&#10;    def _map_category(self, description: str, original_category: str = '') -&gt; Tuple[str, str]:&#10;        &quot;&quot;&quot;&#10;        Map merchant/description to budget categories&#10;        Returns: (category, subcategory)&#10;        &quot;&quot;&quot;&#10;        description_upper = description.upper()&#10;&#10;        # Check our mapping dictionary&#10;        for key, (category, subcategory) in self.category_mappings.items():&#10;            if key in description_upper:&#10;                return category, subcategory&#10;&#10;        # Fallback mappings based on keywords&#10;        if any(keyword in description_upper for keyword in ['GROCERY', 'SUPERMARKET', 'MARKET']):&#10;            return 'Food', 'Food (Groceries)'&#10;        elif any(keyword in description_upper for keyword in ['RESTAURANT', 'CAFE', 'PIZZA', 'DELI']):&#10;            return 'Food', 'Food (Dining Out)'&#10;        elif any(keyword in description_upper for keyword in ['GAS', 'FUEL', 'EXXON', 'SHELL', 'BP']):&#10;            return 'Vehicles', 'Gas'&#10;        elif any(keyword in description_upper for keyword in ['PHARMACY', 'DRUG', 'MEDICAL', 'DOCTOR']):&#10;            return 'Healthcare', 'Other Doctor Visits'&#10;        elif any(keyword in description_upper for keyword in ['PARKING', 'TOLL']):&#10;            return 'Vehicles', 'Parking'&#10;&#10;        # Use original category if available and mappable&#10;        if original_category:&#10;            category_mapping = {&#10;                'Shopping': ('Other', 'Other'),&#10;                'Health &amp; Wellness': ('Healthcare', 'Other Doctor Visits'),&#10;                'Groceries': ('Food', 'Food (Groceries)'),&#10;                'Food &amp; Drink': ('Food', 'Food (Dining Out)'),&#10;                'Gas': ('Vehicles', 'Gas'),&#10;                'Entertainment': ('Other', 'Entertainment'),&#10;                'Professional Services': ('Other', 'Other'),&#10;                'Personal': ('Other', 'Other'),&#10;                'Automotive': ('Vehicles', 'Vehicle Other'),&#10;                'Bills &amp; Utilities': ('Utilities', 'Misc Utility')&#10;            }&#10;&#10;            if original_category in category_mapping:&#10;                return category_mapping[original_category]&#10;&#10;        # Default fallback&#10;        return 'Other', 'Other'&#10;&#10;    def validate_expenses(self, expenses: List[Dict]) -&gt; Tuple[List[Dict], List[str]]:&#10;        &quot;&quot;&quot;&#10;        Validate expense data before import&#10;        Returns: (valid_expenses, validation_errors)&#10;        &quot;&quot;&quot;&#10;        valid_expenses = []&#10;        errors = []&#10;&#10;        for i, expense in enumerate(expenses):&#10;            try:&#10;                # Check required fields&#10;                required_fields = ['date', 'person', 'amount', 'category', 'subcategory', 'description']&#10;                missing_fields = [field for field in required_fields if not expense.get(field)]&#10;&#10;                if missing_fields:&#10;                    errors.append(f&quot;Expense {i+1}: Missing fields: {', '.join(missing_fields)}&quot;)&#10;                    continue&#10;&#10;                # Validate amount&#10;                if not isinstance(expense['amount'], (int, float)) or expense['amount'] &lt;= 0:&#10;                    errors.append(f&quot;Expense {i+1}: Invalid amount&quot;)&#10;                    continue&#10;&#10;                # Validate date format&#10;                try:&#10;                    datetime.strptime(expense['date'], '%Y-%m-%d')&#10;                except ValueError:&#10;                    errors.append(f&quot;Expense {i+1}: Invalid date format&quot;)&#10;                    continue&#10;&#10;                valid_expenses.append(expense)&#10;&#10;            except Exception as e:&#10;                errors.append(f&quot;Expense {i+1}: Validation error - {str(e)}&quot;)&#10;&#10;        return valid_expenses, errors&#10;&#10;&#10;&#10;&#10;" />
              <option name="updatedContent" value="&quot;&quot;&quot;&#10;Expense Loader Utility for Budget Tracker&#10;Handles CSV files from credit card statements and TXT files with manual entries&#10;&quot;&quot;&quot;&#10;&#10;import csv&#10;import os&#10;from datetime import datetime&#10;from typing import List, Dict, Optional, Tuple&#10;import re&#10;&#10;class ExpenseLoader:&#10;    &quot;&quot;&quot;Utility class for loading expenses from various file formats&quot;&quot;&quot;&#10;&#10;    def __init__(self):&#10;        # Load categories from CSV file&#10;        self.categories_data = self._load_categories_from_csv()&#10;        &#10;        # Updated category mappings using correct categories from CSV&#10;        self.category_mappings = {&#10;            'WALGREENS': ('Healthcare', 'Prescriptions'),&#10;            'CVS': ('Healthcare', 'Prescriptions'),&#10;            'RITE AID': ('Healthcare', 'Prescriptions'),&#10;            'PHARMACY': ('Healthcare', 'Prescriptions'),&#10;            'APPLE.COM': ('Other', 'Entertainment'),&#10;            'AMAZON': ('Other', 'Other'),&#10;            'EBAY': ('Other', 'Other'),&#10;            'WHOLEFDS': ('Food', 'Food (Groceries)'),&#10;            'WHOLE FOODS': ('Food', 'Food (Groceries)'),&#10;            'ACME': ('Food', 'Food (Groceries)'),&#10;            'ALDI': ('Food', 'Food (Groceries)'),&#10;            'TRADER JOE': ('Food', 'Food (Groceries)'),&#10;            'SHOPRITE': ('Food', 'Food (Groceries)'),&#10;            'STOP &amp; SHOP': ('Food', 'Food (Groceries)'),&#10;            'TARGET': ('Other', 'Other'),&#10;            'WALMART': ('Other', 'Other'),&#10;            'COSTCO': ('Food', 'Food (Groceries)'),&#10;            'MCDONALDS': ('Food', 'Food (Take Out)'),&#10;            'BURGER KING': ('Food', 'Food (Take Out)'),&#10;            'SUBWAY': ('Food', 'Food (Take Out)'),&#10;            'STARBUCKS': ('Food', 'Food (Take Out)'),&#10;            'DUNKIN': ('Food', 'Food (Take Out)'),&#10;            'UBER': ('Utilities', 'Taxi / Transit'),&#10;            'LYFT': ('Utilities', 'Taxi / Transit'),&#10;            'UBER EATS': ('Food', 'Food (Take Out)'),&#10;            'DOORDASH': ('Food', 'Food (Take Out)'),&#10;            'GRUBHUB': ('Food', 'Food (Take Out)'),&#10;            '7-ELEVEN': ('Vehicles', 'Gas'),&#10;            'SHELL': ('Vehicles', 'Gas'),&#10;            'EXXON': ('Vehicles', 'Gas'),&#10;            'BP': ('Vehicles', 'Gas'),&#10;            'MOBIL': ('Vehicles', 'Gas'),&#10;            'GOOGLE': ('Home', 'Subscriptions'),&#10;            'NETFLIX': ('Home', 'Subscriptions'),&#10;            'HULU': ('Home', 'Subscriptions'),&#10;            'HBO': ('Home', 'Subscriptions'),&#10;            'PRIME VIDEO': ('Home', 'Subscriptions'),&#10;            'SPOTIFY': ('Home', 'Subscriptions'),&#10;            'GITHUB': ('Other', 'Other'),&#10;            'HOME DEPOT': ('Home', 'Tools / Hardware'),&#10;            'LOWES': ('Home', 'Tools / Hardware'),&#10;            'BED BATH': ('Home', 'Homeware'),&#10;            'IKEA': ('Home', 'Home D�cor'),&#10;            'MARSHALLS': ('Other', 'Clothes'),&#10;            'TJ MAXX': ('Other', 'Clothes'),&#10;            'KOHLS': ('Other', 'Clothes'),&#10;            'MACYS': ('Other', 'Clothes'),&#10;        }&#10;&#10;    def _load_categories_from_csv(self) -&gt; Dict[str, List[str]]:&#10;        &quot;&quot;&quot;Load categories from the categories.csv file&quot;&quot;&quot;&#10;        categories_data = {}&#10;        &#10;        # Try to find categories.csv in common locations&#10;        possible_paths = [&#10;            '/Users/jeffreywooster/Documents/Development/6_Budget_Master/categories.csv',&#10;            os.path.join(os.path.dirname(__file__), '..', '..', 'categories.csv'),&#10;            os.path.join(os.path.dirname(__file__), '..', '..', '..', 'categories.csv'),&#10;            'categories.csv'&#10;        ]&#10;        &#10;        categories_file = None&#10;        for path in possible_paths:&#10;            if os.path.exists(path):&#10;                categories_file = path&#10;                break&#10;        &#10;        if categories_file:&#10;            try:&#10;                with open(categories_file, 'r', encoding='utf-8') as file:&#10;                    reader = csv.DictReader(file)&#10;                    for row in reader:&#10;                        category = row.get('Category', '').strip()&#10;                        subcategory = row.get('Sub Category', '').strip()&#10;                        &#10;                        if category and subcategory:&#10;                            if category not in categories_data:&#10;                                categories_data[category] = []&#10;                            if subcategory not in categories_data[category]:&#10;                                categories_data[category].append(subcategory)&#10;            except Exception as e:&#10;                print(f&quot;Error loading categories from CSV: {e}&quot;)&#10;        &#10;        # If no categories loaded, use default fallback&#10;        if not categories_data:&#10;            categories_data = {&#10;                'Housing': ['Mortgage', 'HOA', 'Property Taxes', 'Reserves'],&#10;                'Utilities': ['Electric', 'Gas', 'Internet', 'Phone', 'Insurance'],&#10;                'Food': ['Food (Groceries)', 'Food (Take Out)', 'Food (Dining Out)'],&#10;                'Healthcare': ['Prescriptions', 'Doctor Visits', 'Co-Pay'],&#10;                'Vehicles': ['Gas', 'Insurance', 'Repairs', 'Parking'],&#10;                'Other': ['Entertainment', 'Clothes', 'Other']&#10;            }&#10;        &#10;        return categories_data&#10;&#10;    def load_csv_file(self, file_path: str) -&gt; Tuple[List[Dict], List[str]]:&#10;        &quot;&quot;&quot;&#10;        Load expenses from a CSV file (credit card format)&#10;        Returns: (expenses_list, errors_list)&#10;        &quot;&quot;&quot;&#10;        expenses = []&#10;        errors = []&#10;&#10;        try:&#10;            with open(file_path, 'r', encoding='utf-8') as file:&#10;                # Try to detect the CSV format&#10;                sample = file.read(1024)&#10;                file.seek(0)&#10;&#10;                # Check if this looks like a Chase credit card statement&#10;                if 'Transaction Date' in sample and 'Post Date' in sample:&#10;                    return self._load_chase_csv(file, errors)&#10;                else:&#10;                    # Generic CSV format&#10;                    return self._load_generic_csv(file, errors)&#10;&#10;        except Exception as e:&#10;            errors.append(f&quot;Error reading file: {str(e)}&quot;)&#10;            return [], errors&#10;&#10;    def _load_chase_csv(self, file, errors: List[str]) -&gt; Tuple[List[Dict], List[str]]:&#10;        &quot;&quot;&quot;Load Chase credit card CSV format&quot;&quot;&quot;&#10;        expenses = []&#10;&#10;        try:&#10;            reader = csv.DictReader(file)&#10;&#10;            for row_num, row in enumerate(reader, start=2):&#10;                try:&#10;                    # Only process &quot;Sale&quot; transactions (skip returns/payments)&#10;                    if row.get('Type', '').strip().lower() != 'sale':&#10;                        continue&#10;&#10;                    # Parse the data&#10;                    transaction_date = row.get('Transaction Date', '').strip()&#10;                    description = row.get('Description', '').strip()&#10;                    category = row.get('Category', '').strip()&#10;                    amount_str = row.get('Amount', '').strip()&#10;&#10;                    if not all([transaction_date, description, amount_str]):&#10;                        errors.append(f&quot;Row {row_num}: Missing required fields&quot;)&#10;                        continue&#10;&#10;                    # Parse amount (should be negative for expenses, make positive)&#10;                    try:&#10;                        amount = float(amount_str.replace(',', ''))&#10;                        if amount &lt; 0:&#10;                            amount = abs(amount)  # Make positive for expense&#10;                        else:&#10;                            # Skip if amount is positive (likely a return/credit)&#10;                            continue&#10;                    except ValueError:&#10;                        errors.append(f&quot;Row {row_num}: Invalid amount '{amount_str}'&quot;)&#10;                        continue&#10;&#10;                    # Parse date&#10;                    try:&#10;                        # Try different date formats&#10;                        date_obj = self._parse_date(transaction_date)&#10;                        date_str = date_obj.strftime('%Y-%m-%d')&#10;                    except ValueError:&#10;                        errors.append(f&quot;Row {row_num}: Invalid date format '{transaction_date}'&quot;)&#10;                        continue&#10;&#10;                    # Map to categories&#10;                    budget_category, subcategory = self._map_category(description, category)&#10;&#10;                    expense = {&#10;                        'date': date_str,&#10;                        'person': 'Jeff',  # Default person, can be changed in UI&#10;                        'amount': amount,&#10;                        'category': budget_category,&#10;                        'subcategory': subcategory,&#10;                        'description': description,&#10;                        'payment_method': 'Credit Card'&#10;                    }&#10;&#10;                    expenses.append(expense)&#10;&#10;                except Exception as e:&#10;                    errors.append(f&quot;Row {row_num}: {str(e)}&quot;)&#10;                    continue&#10;&#10;        except Exception as e:&#10;            errors.append(f&quot;Error processing CSV: {str(e)}&quot;)&#10;&#10;        return expenses, errors&#10;&#10;    def _load_generic_csv(self, file, errors: List[str]) -&gt; Tuple[List[Dict], List[str]]:&#10;        &quot;&quot;&quot;Load generic CSV format&quot;&quot;&quot;&#10;        expenses = []&#10;        # This can be extended for other CSV formats&#10;        errors.append(&quot;Generic CSV format not yet implemented&quot;)&#10;        return expenses, errors&#10;&#10;    def load_txt_file(self, file_path: str) -&gt; Tuple[List[Dict], List[str]]:&#10;        &quot;&quot;&quot;&#10;        Load expenses from a TXT file (manual format)&#10;        Expected format: MM/DD description amount&#10;        Returns: (expenses_list, errors_list)&#10;        &quot;&quot;&quot;&#10;        expenses = []&#10;        errors = []&#10;&#10;        try:&#10;            with open(file_path, 'r', encoding='utf-8') as file:&#10;                for line_num, line in enumerate(file, start=1):&#10;                    line = line.strip()&#10;                    if not line:&#10;                        continue&#10;&#10;                    try:&#10;                        # Parse line format: MM/DD description amount&#10;                        # Example: &quot;06/23 uber 32.91&quot;&#10;                        parts = line.split()&#10;                        if len(parts) &lt; 3:&#10;                            errors.append(f&quot;Line {line_num}: Invalid format - expected 'MM/DD description amount'&quot;)&#10;                            continue&#10;&#10;                        date_part = parts[0]&#10;                        amount_part = parts[-1]&#10;                        description_parts = parts[1:-1]&#10;                        description = ' '.join(description_parts)&#10;&#10;                        # Parse date (assume current year)&#10;                        try:&#10;                            current_year = datetime.now().year&#10;                            date_obj = datetime.strptime(f&quot;{current_year}/{date_part}&quot;, '%Y/%m/%d')&#10;                            date_str = date_obj.strftime('%Y-%m-%d')&#10;                        except ValueError:&#10;                            errors.append(f&quot;Line {line_num}: Invalid date format '{date_part}'&quot;)&#10;                            continue&#10;&#10;                        # Parse amount&#10;                        try:&#10;                            amount = float(amount_part.replace(',', ''))&#10;                        except ValueError:&#10;                            errors.append(f&quot;Line {line_num}: Invalid amount '{amount_part}'&quot;)&#10;                            continue&#10;&#10;                        # Map to categories&#10;                        budget_category, subcategory = self._map_category(description)&#10;&#10;                        expense = {&#10;                            'date': date_str,&#10;                            'person': 'Vanessa',  # Default for TXT files, can be changed&#10;                            'amount': amount,&#10;                            'category': budget_category,&#10;                            'subcategory': subcategory,&#10;                            'description': description,&#10;                            'payment_method': 'Cash/Debit'&#10;                        }&#10;&#10;                        expenses.append(expense)&#10;&#10;                    except Exception as e:&#10;                        errors.append(f&quot;Line {line_num}: {str(e)}&quot;)&#10;                        continue&#10;&#10;        except Exception as e:&#10;            errors.append(f&quot;Error reading file: {str(e)}&quot;)&#10;&#10;        return expenses, errors&#10;&#10;    def _map_category(self, description: str, original_category: str = '') -&gt; Tuple[str, str]:&#10;        &quot;&quot;&quot;&#10;        Map merchant/description to budget categories&#10;        Returns: (category, subcategory)&#10;        &quot;&quot;&quot;&#10;        description_upper = description.upper()&#10;&#10;        # Check our mapping dictionary first&#10;        for key, (category, subcategory) in self.category_mappings.items():&#10;            if key in description_upper:&#10;                # Validate that the category exists in our loaded categories&#10;                if category in self.categories_data and subcategory in self.categories_data[category]:&#10;                    return category, subcategory&#10;&#10;        # Enhanced fallback mappings based on keywords using actual categories from CSV&#10;        if any(keyword in description_upper for keyword in ['GROCERY', 'SUPERMARKET', 'MARKET', 'FOODS']):&#10;            if 'Food' in self.categories_data and 'Food (Groceries)' in self.categories_data['Food']:&#10;                return 'Food', 'Food (Groceries)'&#10;                &#10;        elif any(keyword in description_upper for keyword in ['RESTAURANT', 'CAFE', 'PIZZA', 'DELI', 'DINING']):&#10;            if 'Food' in self.categories_data and 'Food (Dining Out)' in self.categories_data['Food']:&#10;                return 'Food', 'Food (Dining Out)'&#10;                &#10;        elif any(keyword in description_upper for keyword in ['TAKEOUT', 'TAKE OUT', 'DELIVERY', 'UBER EATS', 'DOORDASH']):&#10;            if 'Food' in self.categories_data and 'Food (Take Out)' in self.categories_data['Food']:&#10;                return 'Food', 'Food (Take Out)'&#10;                &#10;        elif any(keyword in description_upper for keyword in ['GAS', 'FUEL', 'EXXON', 'SHELL', 'BP', 'MOBIL', 'CHEVRON']):&#10;            if 'Vehicles' in self.categories_data and 'Gas' in self.categories_data['Vehicles']:&#10;                return 'Vehicles', 'Gas'&#10;                &#10;        elif any(keyword in description_upper for keyword in ['PHARMACY', 'DRUG', 'WALGREENS', 'CVS', 'RITE AID']):&#10;            if 'Healthcare' in self.categories_data and 'Prescriptions' in self.categories_data['Healthcare']:&#10;                return 'Healthcare', 'Prescriptions'&#10;                &#10;        elif any(keyword in description_upper for keyword in ['MEDICAL', 'DOCTOR', 'HOSPITAL', 'CLINIC']):&#10;            if 'Healthcare' in self.categories_data and 'Other Doctor Visits' in self.categories_data['Healthcare']:&#10;                return 'Healthcare', 'Other Doctor Visits'&#10;                &#10;        elif any(keyword in description_upper for keyword in ['PARKING', 'TOLL']):&#10;            if 'Vehicles' in self.categories_data and 'Parking' in self.categories_data['Vehicles']:&#10;                return 'Vehicles', 'Parking'&#10;                &#10;        elif any(keyword in description_upper for keyword in ['INSURANCE']):&#10;            if 'Utilities' in self.categories_data and 'Insurance' in self.categories_data['Utilities']:&#10;                return 'Utilities', 'Insurance'&#10;                &#10;        elif any(keyword in description_upper for keyword in ['UBER', 'LYFT', 'TAXI', 'TRANSIT']):&#10;            if 'Utilities' in self.categories_data and 'Taxi / Transit' in self.categories_data['Utilities']:&#10;                return 'Utilities', 'Taxi / Transit'&#10;&#10;        # Use original category if available and mappable to our categories&#10;        if original_category:&#10;            category_mapping = {&#10;                'Shopping': ('Other', 'Other'),&#10;                'Health &amp; Wellness': ('Healthcare', 'Prescriptions'),&#10;                'Groceries': ('Food', 'Food (Groceries)'),&#10;                'Food &amp; Drink': ('Food', 'Food (Dining Out)'),&#10;                'Gas': ('Vehicles', 'Gas'),&#10;                'Entertainment': ('Other', 'Entertainment'),&#10;                'Professional Services': ('Other', 'Other'),&#10;                'Personal': ('Other', 'Other'),&#10;                'Automotive': ('Vehicles', 'Vehicle Other'),&#10;                'Bills &amp; Utilities': ('Utilities', 'Misc Utility')&#10;            }&#10;&#10;            if original_category in category_mapping:&#10;                category, subcategory = category_mapping[original_category]&#10;                # Validate that the mapped category exists in our loaded categories&#10;                if category in self.categories_data and subcategory in self.categories_data[category]:&#10;                    return category, subcategory&#10;&#10;        # Default fallback - ensure 'Other' category exists&#10;        if 'Other' in self.categories_data:&#10;            if 'Other' in self.categories_data['Other']:&#10;                return 'Other', 'Other'&#10;            elif self.categories_data['Other']:  # If Other category exists but not 'Other' subcategory&#10;                return 'Other', self.categories_data['Other'][0]&#10;        &#10;        # Ultimate fallback - use first available category and subcategory&#10;        if self.categories_data:&#10;            first_category = list(self.categories_data.keys())[0]&#10;            first_subcategory = self.categories_data[first_category][0] if self.categories_data[first_category] else 'Other'&#10;            return first_category, first_subcategory&#10;            &#10;        # If no categories loaded at all, return basic fallback&#10;        return 'Other', 'Other'&#10;&#10;    def validate_expenses(self, expenses: List[Dict]) -&gt; Tuple[List[Dict], List[str]]:&#10;        &quot;&quot;&quot;&#10;        Validate expense data before import&#10;        Returns: (valid_expenses, validation_errors)&#10;        &quot;&quot;&quot;&#10;        valid_expenses = []&#10;        errors = []&#10;&#10;        for i, expense in enumerate(expenses):&#10;            try:&#10;                # Check required fields&#10;                required_fields = ['date', 'person', 'amount', 'category', 'subcategory', 'description']&#10;                missing_fields = [field for field in required_fields if not expense.get(field)]&#10;&#10;                if missing_fields:&#10;                    errors.append(f&quot;Expense {i+1}: Missing fields: {', '.join(missing_fields)}&quot;)&#10;                    continue&#10;&#10;                # Validate amount&#10;                if not isinstance(expense['amount'], (int, float)) or expense['amount'] &lt;= 0:&#10;                    errors.append(f&quot;Expense {i+1}: Invalid amount&quot;)&#10;                    continue&#10;&#10;                # Validate date format&#10;                try:&#10;                    datetime.strptime(expense['date'], '%Y-%m-%d')&#10;                except ValueError:&#10;                    errors.append(f&quot;Expense {i+1}: Invalid date format&quot;)&#10;                    continue&#10;&#10;                valid_expenses.append(expense)&#10;&#10;            except Exception as e:&#10;                errors.append(f&quot;Expense {i+1}: Validation error - {str(e)}&quot;)&#10;&#10;        return valid_expenses, errors&#10;&#10;    def get_available_categories(self) -&gt; Dict[str, List[str]]:&#10;        &quot;&quot;&quot;Get the loaded categories data for use by other components&quot;&quot;&quot;&#10;        return self.categories_data.copy()&#10;&#10;    def _parse_date(self, date_str: str) -&gt; datetime:&#10;        &quot;&quot;&quot;&#10;        Parse a date string into a datetime object&#10;        Tries multiple formats including 2-digit and 4-digit years&#10;        &quot;&quot;&quot;&#10;        # List of date formats to try&#10;        date_formats = [&#10;            '%m/%d/%Y',    # MM/DD/YYYY&#10;            '%m/%d/%y',    # MM/DD/YY (2-digit year)&#10;            '%m-%d-%Y',    # MM-DD-YYYY&#10;            '%m-%d-%y',    # MM-DD-YY&#10;            '%Y/%m/%d',    # YYYY/MM/DD&#10;            '%Y-%m-%d',    # YYYY-MM-DD&#10;            '%d/%m/%Y',    # DD/MM/YYYY&#10;            '%d/%m/%y',    # DD/MM/YY&#10;        ]&#10;&#10;        for fmt in date_formats:&#10;            try:&#10;                parsed_date = datetime.strptime(date_str, fmt)&#10;&#10;                # Handle 2-digit years - if year is less than 50, assume 20xx, otherwise 19xx&#10;                if parsed_date.year &lt; 100:&#10;                    if parsed_date.year &lt; 50:&#10;                        parsed_date = parsed_date.replace(year=parsed_date.year + 2000)&#10;                    else:&#10;                        parsed_date = parsed_date.replace(year=parsed_date.year + 1900)&#10;&#10;                return parsed_date&#10;            except ValueError:&#10;                continue&#10;&#10;        raise ValueError(f&quot;Date '{date_str}' does not match any known format&quot;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gui/utils/styles.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gui/utils/styles.py" />
              <option name="originalContent" value="&quot;&quot;&quot;&#10;Application styling and themes&#10;&quot;&quot;&quot;&#10;&#10;def get_app_stylesheet():&#10;    &quot;&quot;&quot;Get the main application stylesheet with enterprise/professional theme&quot;&quot;&quot;&#10;    return &quot;&quot;&quot;&#10;    /* Main Application Window */&#10;    QMainWindow {&#10;        background-color: #f8f9fa;&#10;        color: #212529;&#10;        font-family: &quot;Segoe UI&quot;, &quot;Roboto&quot;, &quot;Arial&quot;, sans-serif;&#10;    /* Tab Widget Styling */&#10;    QTabWidget::pane {&#10;    /* Tab Widget Styling */&#10;        background-color: #ffffff;&#10;        border: 2px solid #1e3a8a;&#10;        background-color: #ffffff;&#10;        border-radius: 6px;&#10;    &#10;    QTabBar::tab {&#10;        background-color: #e5e7eb;&#10;        color: #374151;&#10;        background-color: #e5e7eb;&#10;        color: #374151;&#10;        padding: 10px 20px;&#10;        border-top-left-radius: 6px;&#10;        border-top-right-radius: 6px;&#10;        border-top-left-radius: 6px;&#10;        border-top-right-radius: 6px;&#10;        border: 1px solid #d1d5db;&#10;    }&#10;        border: 1px solid #d1d5db;&#10;    QTabBar::tab:selected {&#10;        background-color: #ffffff;&#10;        border: 2px solid #1e3a8a;&#10;        background-color: #ffffff;&#10;        border: 2px solid #1e3a8a;&#10;        font-weight: bold;&#10;    }&#10;    &#10;    QTabBar::tab:hover:!selected {&#10;        background-color: #dbeafe;&#10;        border-color: #3b82f6;&#10;        background-color: #dbeafe;&#10;    &#10;    /* Enhanced Group Box (Section Delimitation) */&#10;    QGroupBox {&#10;    /* Enhanced Group Box (Section Delimitation) */&#10;        font-size: 14px;&#10;        color: #1e3a8a;&#10;        border: 2px solid #1e3a8a;&#10;        color: #1e3a8a;&#10;        border: 2px solid #1e3a8a;&#10;        border-radius: 8px;&#10;        background-color: #ffffff;&#10;        padding-top: 15px;&#10;        background-color: #ffffff;&#10;        box-shadow: 0 2px 4px rgba(30, 58, 138, 0.1);&#10;    QGroupBox::title {&#10;        subcontrol-origin: margin;&#10;        left: 15px;&#10;        padding: 0 8px;&#10;        left: 15px;&#10;        padding: 0 8px;&#10;        background-color: #ffffff;&#10;        color: #1e3a8a;&#10;    &#10;    QTableWidget {&#10;        background-color: #ffffff;&#10;    /* Table Styling */&#10;        selection-background-color: #dbeafe;&#10;        background-color: #ffffff;&#10;        alternate-background-color: #f8fafc;&#10;        selection-background-color: #dbeafe;&#10;        gridline-color: #e2e8f0;&#10;        border: 2px solid #1e3a8a;&#10;        border-radius: 6px;&#10;        gridline-color: #e2e8f0;&#10;    QHeaderView::section {&#10;        background-color: #1e3a8a;&#10;        color: #ffffff;&#10;        padding: 12px 8px;&#10;        background-color: #1e3a8a;&#10;        font-weight: bold;&#10;        padding: 12px 8px;&#10;        border: 1px solid #1e40af;&#10;    &#10;    QHeaderView::section:first {&#10;        border-top-left-radius: 4px;&#10;    }&#10;    &#10;        border-top-left-radius: 4px;&#10;        border-top-right-radius: 4px;&#10;    }&#10;    &#10;        border-top-right-radius: 4px;&#10;    QPushButton {&#10;        background-color: #1e3a8a;&#10;    /* Professional Button Styling */&#10;        border: 2px solid #1e3a8a;&#10;        background-color: #1e3a8a;&#10;        border-radius: 6px;&#10;        border: 2px solid #1e3a8a;&#10;        padding: 10px 18px;&#10;        border-radius: 6px;&#10;        min-height: 20px;&#10;    }&#10;    &#10;        min-height: 20px;&#10;        background-color: #1e40af;&#10;        border-color: #1e40af;&#10;        box-shadow: 0 2px 4px rgba(30, 58, 138, 0.2);&#10;        background-color: #1e40af;&#10;        border-color: #1e40af;&#10;        box-shadow: 0 2px 4px rgba(30, 58, 138, 0.2);&#10;        background-color: #1d4ed8;&#10;        border-color: #1d4ed8;&#10;    }&#10;        background-color: #1d4ed8;&#10;        border-color: #1d4ed8;&#10;        background-color: #9ca3af;&#10;        border-color: #9ca3af;&#10;        color: #ffffff;&#10;        background-color: #9ca3af;&#10;        border-color: #9ca3af;&#10;    /* Form Elements */&#10;    QLineEdit, QComboBox, QSpinBox, QDoubleSpinBox, QDateEdit {&#10;        padding: 8px 12px;&#10;    /* Form Elements */&#10;        border-radius: 6px;&#10;        padding: 8px 12px;&#10;        border: 2px solid #d1d5db;&#10;        border-radius: 6px;&#10;        background-color: #ffffff;&#10;    &#10;        min-height: 20px;&#10;        outline: none;&#10;        box-shadow: 0 0 0 3px rgba(30, 58, 138, 0.1);&#10;    }&#10;        border-color: #1e3a8a;&#10;    QComboBox::drop-down {&#10;        box-shadow: 0 0 0 3px rgba(30, 58, 138, 0.1);&#10;        width: 20px;&#10;    }&#10;    &#10;    QComboBox::down-arrow {&#10;        width: 20px;&#10;        width: 8px;&#10;        height: 8px;&#10;        background-color: #1e3a8a;&#10;        border: 1px solid #1e3a8a;&#10;        width: 8px;&#10;        height: 8px;&#10;        background-color: #1e3a8a;&#10;        color: #374151;&#10;        font-size: 13px;&#10;    /* Enhanced Labels */&#10;    &#10;        color: #374151;&#10;    QFrame[frameShape=&quot;4&quot;] { /* HLine */&#10;        border: none;&#10;        background-color: #1e3a8a;&#10;    /* Professional Frames/Separators */&#10;        margin: 10px 0;&#10;    }&#10;        background-color: #1e3a8a;&#10;        max-height: 2px;&#10;        margin: 10px 0;&#10;        background-color: #1e3a8a;&#10;        max-width: 2px;&#10;        margin: 0 10px;&#10;    }&#10;        background-color: #1e3a8a;&#10;        max-width: 2px;&#10;        margin: 0 10px;&#10;        background-color: #ffffff;&#10;        border: 2px solid #1e3a8a;&#10;    /* Enhanced Chart Container */&#10;        padding: 15px;&#10;        background-color: #ffffff;&#10;        border: 2px solid #1e3a8a;&#10;        border-radius: 8px;&#10;        padding: 15px;&#10;        margin: 5px;&#10;        box-shadow: 0 2px 4px rgba(30, 58, 138, 0.1);&#10;        background-color: #ffffff;&#10;        border: 2px solid #1e3a8a;&#10;    /* Professional Metric Cards */&#10;        padding: 20px;&#10;        background-color: #ffffff;&#10;        border: 2px solid #1e3a8a;&#10;        border-radius: 10px;&#10;        padding: 20px;&#10;        margin: 10px;&#10;        box-shadow: 0 4px 6px rgba(30, 58, 138, 0.1);&#10;        font-weight: bold;&#10;        color: #1e3a8a;&#10;        margin-bottom: 5px;&#10;    }&#10;    &#10;        color: #1e3a8a;&#10;        margin-bottom: 5px;&#10;        color: #6b7280;&#10;        font-weight: 500;&#10;        margin-top: 5px;&#10;    }&#10;    &#10;    /* Section Headers */&#10;        margin-top: 5px;&#10;        background-color: #1e3a8a;&#10;        color: #ffffff;&#10;    /* Section Headers */&#10;        font-weight: bold;&#10;        background-color: #1e3a8a;&#10;        border-radius: 6px 6px 0 0;&#10;        padding: 12px 15px;&#10;    }&#10;        font-size: 15px;&#10;        border-radius: 6px 6px 0 0;&#10;    .content-section {&#10;        border: 2px solid #1e3a8a;&#10;        border-radius: 8px;&#10;    /* Content Areas */&#10;        margin: 5px;&#10;        background-color: #ffffff;&#10;        border: 2px solid #1e3a8a;&#10;        border-radius: 6px;&#10;        padding: 15px;&#10;        margin: 5px;&#10;        box-shadow: 0 2px 4px rgba(30, 58, 138, 0.05);&#10;    }&#10;&#10;    /* Enhanced Scrollbars */&#10;    QScrollBar:vertical {&#10;        background-color: #f1f5f9;&#10;        width: 12px;&#10;        border-radius: 6px;&#10;    }&#10;    &#10;    QScrollBar::handle:vertical:hover {&#10;        background-color: #1e3a8a;&#10;    }&#10;        min-height: 20px;&#10;        background-color: #f1f5f9;&#10;        height: 12px;&#10;        border-radius: 6px;&#10;        background-color: #1e40af;&#10;    &#10;    QScrollBar::handle:horizontal {&#10;        background-color: #1e3a8a;&#10;        background-color: #f1f5f9;&#10;        height: 12px;&#10;        border-radius: 6px;&#10;    QScrollBar::handle:horizontal:hover {&#10;        background-color: #1e40af;&#10;    }&#10;        background-color: #1e3a8a;&#10;    /* Menu Styling */&#10;        min-width: 20px;&#10;        color: #ffffff;&#10;        border-bottom: 2px solid #1e40af;&#10;        font-weight: 600;&#10;        background-color: #1e40af;&#10;    &#10;    QMenuBar::item {&#10;    /* Menu Styling */&#10;        background-color: transparent;&#10;        background-color: #1e3a8a;&#10;    &#10;        border-bottom: 2px solid #1e40af;&#10;        background-color: #1e40af;&#10;    }&#10;&#10;    QMenu {&#10;        padding: 8px 12px;&#10;        border: 2px solid #1e3a8a;&#10;        padding: 4px;&#10;    }&#10;    &#10;        background-color: #1e40af;&#10;        border-radius: 4px;&#10;    }&#10;&#10;    QMenu {&#10;        background-color: #ffffff;&#10;        border: 2px solid #1e3a8a;&#10;        padding: 8px 12px;&#10;        padding: 4px;&#10;    &quot;&quot;&quot;&#10;&#10;def get_chart_colors():&#10;        padding: 8px 12px;&#10;        border-radius: 4px;&#10;        '#1e40af',  # Medium Blue&#10;        '#3b82f6',  # Bright Blue&#10;        '#1d4ed8',  # Deep Blue&#10;        background-color: #dbeafe;&#10;        color: #1e3a8a;&#10;        '#1e3a8a',  # Dark Blue&#10;        '#3730a3',  # Indigo Blue&#10;        '#4338ca',  # Purple Blue&#10;        '#6366f1',  # Soft Blue&#10;    &quot;&quot;&quot;Get consistent colors for charts - Enterprise blue theme&quot;&quot;&quot;&#10;        '#a855f7',  # Light Purple&#10;        '#1e3a8a',  # Primary Blue (Enterprise)&#10;        '#1e40af',  # Medium Blue&#10;        '#3b82f6',  # Bright Blue&#10;        '#1d4ed8',  # Deep Blue&#10;        '#60a5fa',  # Light Blue&#10;        '#2563eb',  # Strong Blue&#10;        '#1e3a8a',  # Dark Blue&#10;        '#3730a3',  # Indigo Blue&#10;        '#4338ca',  # Purple Blue&#10;        '#6366f1',  # Soft Blue&#10;        '#8b5cf6',  # Blue Purple&#10;        '#a855f7',  # Light Purple&#10;" />
              <option name="updatedContent" value="&quot;&quot;&quot;&#10;Application styling and themes&#10;&quot;&quot;&quot;&#10;&#10;def get_app_stylesheet():&#10;    &quot;&quot;&quot;Get the main application stylesheet with enterprise/professional theme&quot;&quot;&quot;&#10;    return &quot;&quot;&quot;&#10;    /* Main Application Window - Distinct Border &amp; Blue Light Reduction */&#10;    QMainWindow {&#10;        background-color: #faf8f5;  /* Warm off-white to reduce blue light */&#10;        color: #2d3748;  /* Warmer dark gray instead of pure black */&#10;        font-family: &quot;Segoe UI&quot;, &quot;Roboto&quot;, &quot;Arial&quot;, sans-serif;&#10;        border: 4px solid #2c5530;  /* Thick dark green border for main window */&#10;        border-radius: 12px;&#10;    }&#10;    &#10;    /* Tab Widget Styling - Thicker Frames */&#10;    QTabWidget::pane {&#10;        border: 4px solid #1e3a8a;  /* Increased from 2px to 4px */&#10;        background-color: #fffef8;  /* Warm white background */&#10;        border-radius: 8px;&#10;        margin-top: 2px;&#10;    }&#10;    &#10;    QTabBar::tab {&#10;        background-color: #f0ede8;  /* Warmer tab background */&#10;        color: #4a5568;  /* Warmer text color */&#10;        padding: 12px 24px;  /* Increased padding */&#10;        margin-right: 2px;&#10;        margin-bottom: 2px;&#10;        border-top-left-radius: 8px;&#10;        border-top-right-radius: 8px;&#10;        min-width: 140px;&#10;        font-weight: 600;&#10;        border: 3px solid #d4c5b9;  /* Thicker border */&#10;    }&#10;    &#10;    QTabBar::tab:selected {&#10;        background-color: #fffef8;  /* Warm white */&#10;        border: 4px solid #1e3a8a;  /* Thicker selected border */&#10;        border-bottom: none;&#10;        color: #1e3a8a;&#10;        font-weight: bold;&#10;    }&#10;    &#10;    QTabBar::tab:hover:!selected {&#10;        background-color: #f7f1e8;  /* Warm hover color */&#10;        border-color: #3b82f6;&#10;    }&#10;    &#10;    /* Enhanced Group Box (Section Delimitation) - Much Thicker Frames */&#10;    QGroupBox {&#10;        font-weight: bold;&#10;        font-size: 14px;&#10;        color: #2c5530;  /* Dark green for better contrast */&#10;        border: 5px solid #2c5530;  /* Much thicker border (increased from 2px to 5px) */&#10;        border-radius: 12px;&#10;        margin-top: 1.2ex;&#10;        padding-top: 18px;&#10;        background-color: #fffef8;  /* Warm white background */&#10;        box-shadow: 0 4px 8px rgba(44, 85, 48, 0.15);  /* Enhanced shadow */&#10;    }&#10;    &#10;    QGroupBox::title {&#10;        subcontrol-origin: margin;&#10;        left: 18px;&#10;        padding: 0 12px;&#10;        background-color: #fffef8;&#10;        color: #2c5530;&#10;        font-weight: bold;&#10;        font-size: 15px;&#10;    }&#10;    &#10;    /* Table Styling - Thicker Frames */&#10;    QTableWidget {&#10;        background-color: #fffef8;  /* Warm white */&#10;        alternate-background-color: #f8f6f0;  /* Warm alternating rows */&#10;        selection-background-color: #e6f3ff;  /* Soft blue selection */&#10;        selection-color: #1e3a8a;&#10;        border: 4px solid #2c5530;  /* Thicker green border */&#10;        border-radius: 8px;&#10;        gridline-color: #e8e2d4;  /* Warm gridlines */&#10;        font-size: 13px;&#10;    }&#10;    &#10;    QHeaderView::section {&#10;        background-color: #2c5530;  /* Dark green headers */&#10;        color: #ffffff;&#10;        padding: 14px 10px;  /* Increased padding */&#10;        border: 2px solid #1e3d24;  /* Thicker header borders */&#10;        font-weight: bold;&#10;        font-size: 13px;&#10;    }&#10;    &#10;    QHeaderView::section:first {&#10;        border-top-left-radius: 6px;&#10;    }&#10;    &#10;    QHeaderView::section:last {&#10;        border-top-right-radius: 6px;&#10;    }&#10;    &#10;    /* Professional Button Styling - Thicker Borders */&#10;    QPushButton {&#10;        background-color: #2c5530;  /* Dark green buttons */&#10;        color: #ffffff;&#10;        border: 3px solid #2c5530;  /* Thicker button border */&#10;        padding: 12px 20px;  /* Increased padding */&#10;        border-radius: 8px;&#10;        font-weight: 600;&#10;        font-size: 13px;&#10;        min-width: 100px;&#10;        min-height: 24px;&#10;    }&#10;    &#10;    QPushButton:hover {&#10;        background-color: #38663d;&#10;        border-color: #38663d;&#10;        box-shadow: 0 3px 6px rgba(44, 85, 48, 0.3);&#10;    }&#10;    &#10;    QPushButton:pressed {&#10;        background-color: #1e3d24;&#10;        border-color: #1e3d24;&#10;    }&#10;    &#10;    QPushButton:disabled {&#10;        background-color: #a0a0a0;&#10;        border-color: #a0a0a0;&#10;        color: #ffffff;&#10;    }&#10;    &#10;    /* Form Elements - Thicker Borders */&#10;    QLineEdit, QComboBox, QSpinBox, QDoubleSpinBox, QDateEdit {&#10;        padding: 10px 14px;  /* Increased padding */&#10;        border: 3px solid #d4c5b9;  /* Thicker warm border */&#10;        border-radius: 8px;&#10;        background-color: #fffef8;&#10;        font-size: 13px;&#10;        min-height: 24px;&#10;        color: #2d3748;&#10;    }&#10;    &#10;    QLineEdit:focus, QComboBox:focus, QSpinBox:focus, QDoubleSpinBox:focus, QDateEdit:focus {&#10;        border-color: #2c5530;  /* Green focus border */&#10;        outline: none;&#10;        box-shadow: 0 0 0 3px rgba(44, 85, 48, 0.15);&#10;    }&#10;    &#10;    QComboBox::drop-down {&#10;        border: none;&#10;        width: 24px;&#10;    }&#10;    &#10;    QComboBox::down-arrow {&#10;        border: 2px solid #2c5530;&#10;        width: 10px;&#10;        height: 10px;&#10;        background-color: #2c5530;&#10;    }&#10;    &#10;    /* Enhanced Labels - Warmer Colors */&#10;    QLabel {&#10;        color: #4a5568;  /* Warmer gray text */&#10;        font-size: 13px;&#10;    }&#10;    &#10;    /* Professional Frames/Separators - Much Thicker */&#10;    QFrame[frameShape=&quot;4&quot;] { /* HLine */&#10;        border: none;&#10;        background-color: #2c5530;&#10;        max-height: 4px;  /* Much thicker separator */&#10;        margin: 15px 0;&#10;    }&#10;    &#10;    QFrame[frameShape=&quot;5&quot;] { /* VLine */&#10;        border: none;&#10;        background-color: #2c5530;&#10;        max-width: 4px;  /* Much thicker separator */&#10;        margin: 0 15px;&#10;    }&#10;    &#10;    /* Enhanced Chart Container - Thicker Border */&#10;    .chart-container {&#10;        background-color: #fffef8;&#10;        border: 4px solid #2c5530;  /* Much thicker chart borders */&#10;        border-radius: 12px;&#10;        padding: 20px;&#10;        margin: 8px;&#10;        box-shadow: 0 4px 8px rgba(44, 85, 48, 0.15);&#10;    }&#10;    &#10;    /* Professional Metric Cards - Thicker Borders */&#10;    .metric-card {&#10;        background-color: #fffef8;&#10;        border: 4px solid #2c5530;  /* Much thicker card borders */&#10;        border-radius: 12px;&#10;        padding: 24px;&#10;        margin: 12px;&#10;        box-shadow: 0 6px 12px rgba(44, 85, 48, 0.15);&#10;    }&#10;    &#10;    .metric-value {&#10;        font-size: 28px;&#10;        font-weight: bold;&#10;        color: #2c5530;  /* Green metric values */&#10;        margin-bottom: 8px;&#10;    }&#10;    &#10;    .metric-label {&#10;        font-size: 14px;&#10;        color: #6b7280;&#10;        font-weight: 500;&#10;        margin-top: 8px;&#10;    }&#10;    &#10;    /* Section Headers - Enhanced */&#10;    .section-header {&#10;        background-color: #2c5530;  /* Dark green headers */&#10;        color: #ffffff;&#10;        padding: 15px 18px;  /* Increased padding */&#10;        font-weight: bold;&#10;        font-size: 16px;&#10;        border-radius: 8px 8px 0 0;&#10;        margin-bottom: 0;&#10;        border: 3px solid #2c5530;&#10;    }&#10;    &#10;    /* Content Areas - Thicker Borders */&#10;    .content-section {&#10;        background-color: #fffef8;&#10;        border: 4px solid #2c5530;  /* Much thicker content borders */&#10;        border-radius: 12px;&#10;        padding: 20px;&#10;        margin: 8px;&#10;        box-shadow: 0 4px 8px rgba(44, 85, 48, 0.1);&#10;    }&#10;    &#10;    /* Enhanced Scrollbars - Thicker */&#10;    QScrollBar:vertical {&#10;        background-color: #f8f6f0;&#10;        width: 16px;  /* Thicker scrollbar */&#10;        border-radius: 8px;&#10;        border: 2px solid #d4c5b9;&#10;    }&#10;    &#10;    QScrollBar::handle:vertical {&#10;        background-color: #2c5530;&#10;        border-radius: 6px;&#10;        min-height: 30px;&#10;        border: 1px solid #1e3d24;&#10;    }&#10;    &#10;    QScrollBar::handle:vertical:hover {&#10;        background-color: #38663d;&#10;    }&#10;    &#10;    QScrollBar:horizontal {&#10;        background-color: #f8f6f0;&#10;        height: 16px;  /* Thicker scrollbar */&#10;        border-radius: 8px;&#10;        border: 2px solid #d4c5b9;&#10;    }&#10;    &#10;    QScrollBar::handle:horizontal {&#10;        background-color: #2c5530;&#10;        border-radius: 6px;&#10;        min-width: 30px;&#10;        border: 1px solid #1e3d24;&#10;    }&#10;    &#10;    QScrollBar::handle:horizontal:hover {&#10;        background-color: #38663d;&#10;    }&#10;    &#10;    /* Menu Styling - Updated Colors */&#10;    QMenuBar {&#10;        background-color: #2c5530;  /* Dark green menu bar */&#10;        color: #ffffff;&#10;        border-bottom: 3px solid #1e3d24;  /* Thicker border */&#10;        font-weight: 600;&#10;        padding: 4px;&#10;    }&#10;    &#10;    QMenuBar::item {&#10;        padding: 10px 15px;  /* Increased padding */&#10;        background-color: transparent;&#10;        border-radius: 6px;&#10;    }&#10;    &#10;    QMenuBar::item:selected {&#10;        background-color: #38663d;&#10;        border-radius: 6px;&#10;    }&#10;    &#10;    QMenu {&#10;        background-color: #fffef8;&#10;        border: 3px solid #2c5530;  /* Thicker menu border */&#10;        border-radius: 8px;&#10;        padding: 6px;&#10;    }&#10;    &#10;    QMenu::item {&#10;        padding: 10px 15px;&#10;        border-radius: 6px;&#10;        color: #2d3748;&#10;    }&#10;    &#10;    QMenu::item:selected {&#10;        background-color: #f7f1e8;&#10;        color: #2c5530;&#10;    }&#10;    &quot;&quot;&quot;&#10;&#10;def get_chart_colors():&#10;    &quot;&quot;&quot;Get consistent colors for charts - Eye-friendly warm theme&quot;&quot;&quot;&#10;    return [&#10;        '#2c5530',  # Primary Dark Green&#10;        '#38663d',  # Medium Green&#10;        '#4a7c59',  # Forest Green&#10;        '#5c9275',  # Sage Green&#10;        '#6ea891',  # Teal Green&#10;        '#8bb9a3',  # Light Green&#10;        '#7b6143',  # Warm Brown&#10;        '#9d7f5f',  # Light Brown&#10;        '#b8967b',  # Tan&#10;        '#d4c5b9',  # Warm Beige&#10;        '#8a6b47',  # Golden Brown&#10;        '#a68b5b',  # Olive&#10;    ]" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/../budget_tab.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/../budget_tab.py" />
              <option name="updatedContent" value="    def add_expense(self):&#10;        &quot;&quot;&quot;Add expense entry to database&quot;&quot;&quot;&#10;        try:&#10;            person = self.person_combo.currentText()&#10;            amount_text = self.amount_input.text().strip()&#10;            date = self.date_input.date().toString(&quot;yyyy-MM-dd&quot;)&#10;            category = self.category_combo.currentText()&#10;            subcategory = self.subcategory_combo.currentText()&#10;            description = self.description_input.text().strip()&#10;            payment_method = self.payment_combo.currentText()&#10;            realized = self.realized_checkbox.isChecked()  # Get realized status&#10;            &#10;            # Validate inputs&#10;            if not amount_text:&#10;                QMessageBox.warning(self, &quot;Warning&quot;, &quot;Please enter an amount&quot;)&#10;                return&#10;                &#10;            if not category or not subcategory:&#10;                QMessageBox.warning(self, &quot;Warning&quot;, &quot;Please select category and subcategory&quot;)&#10;                return&#10;                &#10;            try:&#10;                amount = float(amount_text.replace(&quot;,&quot;, &quot;&quot;).replace(&quot;$&quot;, &quot;&quot;))&#10;            except ValueError:&#10;                QMessageBox.warning(self, &quot;Warning&quot;, &quot;Please enter a valid number for amount&quot;)&#10;                return&#10;            &#10;            # Add to database using the updated ExpenseModel.add method&#10;            from database.models import ExpenseModel&#10;            ExpenseModel.add(self.db, date, person, amount, category, subcategory, &#10;                           description, payment_method, realized)&#10;            &#10;            # Clear form&#10;            self.amount_input.clear()&#10;            self.description_input.clear()&#10;            self.realized_checkbox.setChecked(False)  # Reset checkbox&#10;            &#10;            # Refresh display&#10;            self.refresh_data()&#10;            &#10;            QMessageBox.information(self, &quot;Success&quot;, &quot;Expense added successfully!&quot;)&#10;            &#10;        except Exception as e:&#10;            QMessageBox.critical(self, &quot;Error&quot;, f&quot;Failed to add expense: {str(e)}&quot;)" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>